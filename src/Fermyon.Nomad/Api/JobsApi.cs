/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fermyon.Nomad.Client;
using Fermyon.Nomad.Model;

namespace Fermyon.Nomad.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobDeregisterResponse</returns>
        JobDeregisterResponse DeleteJob(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobDeregisterResponse</returns>
        ApiResponse<JobDeregisterResponse> DeleteJobWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Job</returns>
        Job GetJob(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> GetJobWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AllocationListStub&gt;</returns>
        List<AllocationListStub> GetJobAllocations(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AllocationListStub&gt;</returns>
        ApiResponse<List<AllocationListStub>> GetJobAllocationsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Deployment</returns>
        Deployment GetJobDeployment(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Deployment</returns>
        ApiResponse<Deployment> GetJobDeploymentWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Deployment&gt;</returns>
        List<Deployment> GetJobDeployments(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Deployment&gt;</returns>
        ApiResponse<List<Deployment>> GetJobDeploymentsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Evaluation&gt;</returns>
        List<Evaluation> GetJobEvaluations(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Evaluation&gt;</returns>
        ApiResponse<List<Evaluation>> GetJobEvaluationsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobScaleStatusResponse</returns>
        JobScaleStatusResponse GetJobScaleStatus(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobScaleStatusResponse</returns>
        ApiResponse<JobScaleStatusResponse> GetJobScaleStatusWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobSummary</returns>
        JobSummary GetJobSummary(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobSummary</returns>
        ApiResponse<JobSummary> GetJobSummaryWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobVersionsResponse</returns>
        JobVersionsResponse GetJobVersions(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobVersionsResponse</returns>
        ApiResponse<JobVersionsResponse> GetJobVersionsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;JobListStub&gt;</returns>
        List<JobListStub> GetJobs(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;JobListStub&gt;</returns>
        ApiResponse<List<JobListStub>> GetJobsWithHttpInfo(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        JobRegisterResponse PostJob(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        ApiResponse<JobRegisterResponse> PostJobWithHttpInfo(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobDispatchResponse</returns>
        JobDispatchResponse PostJobDispatch(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobDispatchResponse</returns>
        ApiResponse<JobDispatchResponse> PostJobDispatchWithHttpInfo(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        JobRegisterResponse PostJobEvaluate(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        ApiResponse<JobRegisterResponse> PostJobEvaluateWithHttpInfo(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Job</returns>
        Job PostJobParse(JobsParseRequest jobsParseRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> PostJobParseWithHttpInfo(JobsParseRequest jobsParseRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeriodicForceResponse</returns>
        PeriodicForceResponse PostJobPeriodicForce(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeriodicForceResponse</returns>
        ApiResponse<PeriodicForceResponse> PostJobPeriodicForceWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobPlanResponse</returns>
        JobPlanResponse PostJobPlan(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobPlanResponse</returns>
        ApiResponse<JobPlanResponse> PostJobPlanWithHttpInfo(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        JobRegisterResponse PostJobRevert(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        ApiResponse<JobRegisterResponse> PostJobRevertWithHttpInfo(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        JobRegisterResponse PostJobScalingRequest(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        ApiResponse<JobRegisterResponse> PostJobScalingRequestWithHttpInfo(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobStabilityResponse</returns>
        JobStabilityResponse PostJobStability(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobStabilityResponse</returns>
        ApiResponse<JobStabilityResponse> PostJobStabilityWithHttpInfo(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobValidateResponse</returns>
        JobValidateResponse PostJobValidateRequest(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobValidateResponse</returns>
        ApiResponse<JobValidateResponse> PostJobValidateRequestWithHttpInfo(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        JobRegisterResponse RegisterJob(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        ApiResponse<JobRegisterResponse> RegisterJobWithHttpInfo(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDeregisterResponse</returns>
        System.Threading.Tasks.Task<JobDeregisterResponse> DeleteJobAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDeregisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDeregisterResponse>> DeleteJobWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> GetJobAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> GetJobWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AllocationListStub&gt;</returns>
        System.Threading.Tasks.Task<List<AllocationListStub>> GetJobAllocationsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AllocationListStub&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AllocationListStub>>> GetJobAllocationsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Deployment</returns>
        System.Threading.Tasks.Task<Deployment> GetJobDeploymentAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deployment>> GetJobDeploymentWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Deployment&gt;</returns>
        System.Threading.Tasks.Task<List<Deployment>> GetJobDeploymentsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Deployment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Deployment>>> GetJobDeploymentsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Evaluation&gt;</returns>
        System.Threading.Tasks.Task<List<Evaluation>> GetJobEvaluationsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Evaluation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Evaluation>>> GetJobEvaluationsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobScaleStatusResponse</returns>
        System.Threading.Tasks.Task<JobScaleStatusResponse> GetJobScaleStatusAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobScaleStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobScaleStatusResponse>> GetJobScaleStatusWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobSummary</returns>
        System.Threading.Tasks.Task<JobSummary> GetJobSummaryAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobSummary>> GetJobSummaryWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobVersionsResponse</returns>
        System.Threading.Tasks.Task<JobVersionsResponse> GetJobVersionsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobVersionsResponse>> GetJobVersionsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobListStub&gt;</returns>
        System.Threading.Tasks.Task<List<JobListStub>> GetJobsAsync(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobListStub&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JobListStub>>> GetJobsWithHttpInfoAsync(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        System.Threading.Tasks.Task<JobRegisterResponse> PostJobAsync(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRegisterResponse>> PostJobWithHttpInfoAsync(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDispatchResponse</returns>
        System.Threading.Tasks.Task<JobDispatchResponse> PostJobDispatchAsync(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDispatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDispatchResponse>> PostJobDispatchWithHttpInfoAsync(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        System.Threading.Tasks.Task<JobRegisterResponse> PostJobEvaluateAsync(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRegisterResponse>> PostJobEvaluateWithHttpInfoAsync(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> PostJobParseAsync(JobsParseRequest jobsParseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> PostJobParseWithHttpInfoAsync(JobsParseRequest jobsParseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeriodicForceResponse</returns>
        System.Threading.Tasks.Task<PeriodicForceResponse> PostJobPeriodicForceAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeriodicForceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PeriodicForceResponse>> PostJobPeriodicForceWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobPlanResponse</returns>
        System.Threading.Tasks.Task<JobPlanResponse> PostJobPlanAsync(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobPlanResponse>> PostJobPlanWithHttpInfoAsync(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        System.Threading.Tasks.Task<JobRegisterResponse> PostJobRevertAsync(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRegisterResponse>> PostJobRevertWithHttpInfoAsync(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        System.Threading.Tasks.Task<JobRegisterResponse> PostJobScalingRequestAsync(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRegisterResponse>> PostJobScalingRequestWithHttpInfoAsync(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStabilityResponse</returns>
        System.Threading.Tasks.Task<JobStabilityResponse> PostJobStabilityAsync(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStabilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobStabilityResponse>> PostJobStabilityWithHttpInfoAsync(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobValidateResponse</returns>
        System.Threading.Tasks.Task<JobValidateResponse> PostJobValidateRequestAsync(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobValidateResponse>> PostJobValidateRequestWithHttpInfoAsync(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        System.Threading.Tasks.Task<JobRegisterResponse> RegisterJobAsync(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRegisterResponse>> RegisterJobWithHttpInfoAsync(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private Fermyon.Nomad.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(string basePath)
        {
            this.Configuration = Fermyon.Nomad.Client.Configuration.MergeConfigurations(
                Fermyon.Nomad.Client.GlobalConfiguration.Instance,
                new Fermyon.Nomad.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(Fermyon.Nomad.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fermyon.Nomad.Client.Configuration.MergeConfigurations(
                Fermyon.Nomad.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fermyon.Nomad.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(Fermyon.Nomad.Client.ISynchronousClient client, Fermyon.Nomad.Client.IAsynchronousClient asyncClient, Fermyon.Nomad.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fermyon.Nomad.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fermyon.Nomad.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fermyon.Nomad.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fermyon.Nomad.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fermyon.Nomad.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobDeregisterResponse</returns>
        public JobDeregisterResponse DeleteJob(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobDeregisterResponse> localVarResponse = DeleteJobWithHttpInfo(jobName, region, varNamespace, xNomadToken, idempotencyToken, purge, global);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobDeregisterResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobDeregisterResponse> DeleteJobWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->DeleteJob");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (purge != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "purge", purge));
            }
            if (global != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "global", global));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.DeleteJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<JobDeregisterResponse>("/job/{jobName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDeregisterResponse</returns>
        public async System.Threading.Tasks.Task<JobDeregisterResponse> DeleteJobAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobDeregisterResponse> localVarResponse = await DeleteJobWithHttpInfoAsync(jobName, region, varNamespace, xNomadToken, idempotencyToken, purge, global, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="purge">Boolean flag indicating whether to purge allocations of the job after deleting. (optional)</param>
        /// <param name="global">Boolean flag indicating whether the operation should apply to all instances of the job globally. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDeregisterResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobDeregisterResponse>> DeleteJobWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), bool? purge = default(bool?), bool? global = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->DeleteJob");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (purge != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "purge", purge));
            }
            if (global != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "global", global));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.DeleteJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<JobDeregisterResponse>("/job/{jobName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Job</returns>
        public Job GetJob(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<Job> localVarResponse = GetJobWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Job</returns>
        public Fermyon.Nomad.Client.ApiResponse<Job> GetJobWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJob");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Job>("/job/{jobName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> GetJobAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<Job> localVarResponse = await GetJobWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Job>> GetJobWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJob");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Job>("/job/{jobName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AllocationListStub&gt;</returns>
        public List<AllocationListStub> GetJobAllocations(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<List<AllocationListStub>> localVarResponse = GetJobAllocationsWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AllocationListStub&gt;</returns>
        public Fermyon.Nomad.Client.ApiResponse<List<AllocationListStub>> GetJobAllocationsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobAllocations");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AllocationListStub>>("/job/{jobName}/allocations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AllocationListStub&gt;</returns>
        public async System.Threading.Tasks.Task<List<AllocationListStub>> GetJobAllocationsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<List<AllocationListStub>> localVarResponse = await GetJobAllocationsWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Specifies whether the list of allocations should include allocations from a previously registered job with the same ID. This is possible if the job is deregistered and reregistered. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AllocationListStub&gt;)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<List<AllocationListStub>>> GetJobAllocationsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? all = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobAllocations");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobAllocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AllocationListStub>>("/job/{jobName}/allocations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobAllocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Deployment</returns>
        public Deployment GetJobDeployment(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<Deployment> localVarResponse = GetJobDeploymentWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Deployment</returns>
        public Fermyon.Nomad.Client.ApiResponse<Deployment> GetJobDeploymentWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobDeployment");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Deployment>("/job/{jobName}/deployment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Deployment</returns>
        public async System.Threading.Tasks.Task<Deployment> GetJobDeploymentAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<Deployment> localVarResponse = await GetJobDeploymentWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Deployment)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Deployment>> GetJobDeploymentWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobDeployment");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Deployment>("/job/{jobName}/deployment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Deployment&gt;</returns>
        public List<Deployment> GetJobDeployments(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<List<Deployment>> localVarResponse = GetJobDeploymentsWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Deployment&gt;</returns>
        public Fermyon.Nomad.Client.ApiResponse<List<Deployment>> GetJobDeploymentsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobDeployments");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobDeployments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Deployment>>("/job/{jobName}/deployments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDeployments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Deployment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Deployment>> GetJobDeploymentsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<List<Deployment>> localVarResponse = await GetJobDeploymentsWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="all">Flag indicating whether to constrain by job creation index or not. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Deployment&gt;)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<List<Deployment>>> GetJobDeploymentsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int? all = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobDeployments");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobDeployments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Deployment>>("/job/{jobName}/deployments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobDeployments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Evaluation&gt;</returns>
        public List<Evaluation> GetJobEvaluations(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<List<Evaluation>> localVarResponse = GetJobEvaluationsWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Evaluation&gt;</returns>
        public Fermyon.Nomad.Client.ApiResponse<List<Evaluation>> GetJobEvaluationsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobEvaluations");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobEvaluations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Evaluation>>("/job/{jobName}/evaluations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobEvaluations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Evaluation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Evaluation>> GetJobEvaluationsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<List<Evaluation>> localVarResponse = await GetJobEvaluationsWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Evaluation&gt;)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<List<Evaluation>>> GetJobEvaluationsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobEvaluations");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobEvaluations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Evaluation>>("/job/{jobName}/evaluations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobEvaluations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobScaleStatusResponse</returns>
        public JobScaleStatusResponse GetJobScaleStatus(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobScaleStatusResponse> localVarResponse = GetJobScaleStatusWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobScaleStatusResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobScaleStatusResponse> GetJobScaleStatusWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobScaleStatus");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobScaleStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobScaleStatusResponse>("/job/{jobName}/scale", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobScaleStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobScaleStatusResponse</returns>
        public async System.Threading.Tasks.Task<JobScaleStatusResponse> GetJobScaleStatusAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobScaleStatusResponse> localVarResponse = await GetJobScaleStatusWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobScaleStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobScaleStatusResponse>> GetJobScaleStatusWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobScaleStatus");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobScaleStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobScaleStatusResponse>("/job/{jobName}/scale", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobScaleStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobSummary</returns>
        public JobSummary GetJobSummary(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobSummary> localVarResponse = GetJobSummaryWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobSummary</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobSummary> GetJobSummaryWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobSummary");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobSummary>("/job/{jobName}/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobSummary</returns>
        public async System.Threading.Tasks.Task<JobSummary> GetJobSummaryAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobSummary> localVarResponse = await GetJobSummaryWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobSummary)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobSummary>> GetJobSummaryWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobSummary");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobSummary>("/job/{jobName}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobVersionsResponse</returns>
        public JobVersionsResponse GetJobVersions(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobVersionsResponse> localVarResponse = GetJobVersionsWithHttpInfo(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobVersionsResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobVersionsResponse> GetJobVersionsWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobVersions");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (diffs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "diffs", diffs));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobVersions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobVersionsResponse>("/job/{jobName}/versions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobVersionsResponse</returns>
        public async System.Threading.Tasks.Task<JobVersionsResponse> GetJobVersionsAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobVersionsResponse> localVarResponse = await GetJobVersionsWithHttpInfoAsync(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="diffs">Boolean flag indicating whether to compute job diffs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobVersionsResponse>> GetJobVersionsWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), bool? diffs = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->GetJobVersions");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (diffs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "diffs", diffs));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobVersions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobVersionsResponse>("/job/{jobName}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;JobListStub&gt;</returns>
        public List<JobListStub> GetJobs(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<List<JobListStub>> localVarResponse = GetJobsWithHttpInfo(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;JobListStub&gt;</returns>
        public Fermyon.Nomad.Client.ApiResponse<List<JobListStub>> GetJobsWithHttpInfo(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<JobListStub>>("/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;JobListStub&gt;</returns>
        public async System.Threading.Tasks.Task<List<JobListStub>> GetJobsAsync(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<List<JobListStub>> localVarResponse = await GetJobsWithHttpInfoAsync(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="index">If set, wait until query exceeds given index. Must be provided with WaitParam. (optional)</param>
        /// <param name="wait">Provided with IndexParam to wait for change. (optional)</param>
        /// <param name="stale">If present, results will include stale reads. (optional)</param>
        /// <param name="prefix">Constrains results to jobs that start with the defined prefix (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="perPage">Maximum number of results to return. (optional)</param>
        /// <param name="nextToken">Indicates where to start paging for queries that support pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;JobListStub&gt;)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<List<JobListStub>>> GetJobsWithHttpInfoAsync(string? region = default(string?), string? varNamespace = default(string?), int? index = default(int?), string? wait = default(string?), string? stale = default(string?), string? prefix = default(string?), string? xNomadToken = default(string?), int? perPage = default(int?), string? nextToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (wait != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "wait", wait));
            }
            if (stale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "stale", stale));
            }
            if (prefix != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "prefix", prefix));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (nextToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "next_token", nextToken));
            }
            if (index != null)
            {
                localVarRequestOptions.HeaderParameters.Add("index", Fermyon.Nomad.Client.ClientUtils.ParameterToString(index)); // header parameter
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.GetJobs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<JobListStub>>("/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        public JobRegisterResponse PostJob(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = PostJobWithHttpInfo(jobName, jobRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> PostJobWithHttpInfo(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJob");
            }

            // verify the required parameter 'jobRegisterRequest' is set
            if (jobRegisterRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobRegisterRequest' when calling JobsApi->PostJob");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobRegisterRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRegisterResponse>("/job/{jobName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        public async System.Threading.Tasks.Task<JobRegisterResponse> PostJobAsync(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = await PostJobWithHttpInfoAsync(jobName, jobRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse>> PostJobWithHttpInfoAsync(string jobName, JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJob");
            }

            // verify the required parameter 'jobRegisterRequest' is set
            if (jobRegisterRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobRegisterRequest' when calling JobsApi->PostJob");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobRegisterRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRegisterResponse>("/job/{jobName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobDispatchResponse</returns>
        public JobDispatchResponse PostJobDispatch(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobDispatchResponse> localVarResponse = PostJobDispatchWithHttpInfo(jobName, jobDispatchRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobDispatchResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobDispatchResponse> PostJobDispatchWithHttpInfo(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobDispatch");
            }

            // verify the required parameter 'jobDispatchRequest' is set
            if (jobDispatchRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobDispatchRequest' when calling JobsApi->PostJobDispatch");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobDispatchRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobDispatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobDispatchResponse>("/job/{jobName}/dispatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobDispatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDispatchResponse</returns>
        public async System.Threading.Tasks.Task<JobDispatchResponse> PostJobDispatchAsync(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobDispatchResponse> localVarResponse = await PostJobDispatchWithHttpInfoAsync(jobName, jobDispatchRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobDispatchRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDispatchResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobDispatchResponse>> PostJobDispatchWithHttpInfoAsync(string jobName, JobDispatchRequest jobDispatchRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobDispatch");
            }

            // verify the required parameter 'jobDispatchRequest' is set
            if (jobDispatchRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobDispatchRequest' when calling JobsApi->PostJobDispatch");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobDispatchRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobDispatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobDispatchResponse>("/job/{jobName}/dispatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobDispatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        public JobRegisterResponse PostJobEvaluate(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = PostJobEvaluateWithHttpInfo(jobName, jobEvaluateRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> PostJobEvaluateWithHttpInfo(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobEvaluate");
            }

            // verify the required parameter 'jobEvaluateRequest' is set
            if (jobEvaluateRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobEvaluateRequest' when calling JobsApi->PostJobEvaluate");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobEvaluateRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobEvaluate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRegisterResponse>("/job/{jobName}/evaluate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobEvaluate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        public async System.Threading.Tasks.Task<JobRegisterResponse> PostJobEvaluateAsync(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = await PostJobEvaluateWithHttpInfoAsync(jobName, jobEvaluateRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobEvaluateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse>> PostJobEvaluateWithHttpInfoAsync(string jobName, JobEvaluateRequest jobEvaluateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobEvaluate");
            }

            // verify the required parameter 'jobEvaluateRequest' is set
            if (jobEvaluateRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobEvaluateRequest' when calling JobsApi->PostJobEvaluate");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobEvaluateRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobEvaluate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRegisterResponse>("/job/{jobName}/evaluate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobEvaluate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Job</returns>
        public Job PostJobParse(JobsParseRequest jobsParseRequest, int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<Job> localVarResponse = PostJobParseWithHttpInfo(jobsParseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Job</returns>
        public Fermyon.Nomad.Client.ApiResponse<Job> PostJobParseWithHttpInfo(JobsParseRequest jobsParseRequest, int operationIndex = 0)
        {
            // verify the required parameter 'jobsParseRequest' is set
            if (jobsParseRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobsParseRequest' when calling JobsApi->PostJobParse");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = jobsParseRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobParse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Job>("/jobs/parse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobParse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> PostJobParseAsync(JobsParseRequest jobsParseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<Job> localVarResponse = await PostJobParseWithHttpInfoAsync(jobsParseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobsParseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<Job>> PostJobParseWithHttpInfoAsync(JobsParseRequest jobsParseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobsParseRequest' is set
            if (jobsParseRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobsParseRequest' when calling JobsApi->PostJobParse");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = jobsParseRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobParse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Job>("/jobs/parse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobParse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PeriodicForceResponse</returns>
        public PeriodicForceResponse PostJobPeriodicForce(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<PeriodicForceResponse> localVarResponse = PostJobPeriodicForceWithHttpInfo(jobName, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PeriodicForceResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<PeriodicForceResponse> PostJobPeriodicForceWithHttpInfo(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobPeriodicForce");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.PostJobPeriodicForce";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PeriodicForceResponse>("/job/{jobName}/periodic/force", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobPeriodicForce", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PeriodicForceResponse</returns>
        public async System.Threading.Tasks.Task<PeriodicForceResponse> PostJobPeriodicForceAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<PeriodicForceResponse> localVarResponse = await PostJobPeriodicForceWithHttpInfoAsync(jobName, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PeriodicForceResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<PeriodicForceResponse>> PostJobPeriodicForceWithHttpInfoAsync(string jobName, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobPeriodicForce");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }

            localVarRequestOptions.Operation = "JobsApi.PostJobPeriodicForce";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PeriodicForceResponse>("/job/{jobName}/periodic/force", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobPeriodicForce", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobPlanResponse</returns>
        public JobPlanResponse PostJobPlan(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobPlanResponse> localVarResponse = PostJobPlanWithHttpInfo(jobName, jobPlanRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobPlanResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobPlanResponse> PostJobPlanWithHttpInfo(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobPlan");
            }

            // verify the required parameter 'jobPlanRequest' is set
            if (jobPlanRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobPlanRequest' when calling JobsApi->PostJobPlan");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobPlanRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobPlanResponse>("/job/{jobName}/plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobPlanResponse</returns>
        public async System.Threading.Tasks.Task<JobPlanResponse> PostJobPlanAsync(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobPlanResponse> localVarResponse = await PostJobPlanWithHttpInfoAsync(jobName, jobPlanRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobPlanRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobPlanResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobPlanResponse>> PostJobPlanWithHttpInfoAsync(string jobName, JobPlanRequest jobPlanRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobPlan");
            }

            // verify the required parameter 'jobPlanRequest' is set
            if (jobPlanRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobPlanRequest' when calling JobsApi->PostJobPlan");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobPlanRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobPlanResponse>("/job/{jobName}/plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        public JobRegisterResponse PostJobRevert(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = PostJobRevertWithHttpInfo(jobName, jobRevertRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> PostJobRevertWithHttpInfo(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobRevert");
            }

            // verify the required parameter 'jobRevertRequest' is set
            if (jobRevertRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobRevertRequest' when calling JobsApi->PostJobRevert");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobRevertRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobRevert";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRegisterResponse>("/job/{jobName}/revert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobRevert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        public async System.Threading.Tasks.Task<JobRegisterResponse> PostJobRevertAsync(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = await PostJobRevertWithHttpInfoAsync(jobName, jobRevertRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobRevertRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse>> PostJobRevertWithHttpInfoAsync(string jobName, JobRevertRequest jobRevertRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobRevert");
            }

            // verify the required parameter 'jobRevertRequest' is set
            if (jobRevertRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobRevertRequest' when calling JobsApi->PostJobRevert");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobRevertRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobRevert";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRegisterResponse>("/job/{jobName}/revert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobRevert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        public JobRegisterResponse PostJobScalingRequest(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = PostJobScalingRequestWithHttpInfo(jobName, scalingRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> PostJobScalingRequestWithHttpInfo(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobScalingRequest");
            }

            // verify the required parameter 'scalingRequest' is set
            if (scalingRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'scalingRequest' when calling JobsApi->PostJobScalingRequest");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = scalingRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobScalingRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRegisterResponse>("/job/{jobName}/scale", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobScalingRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        public async System.Threading.Tasks.Task<JobRegisterResponse> PostJobScalingRequestAsync(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = await PostJobScalingRequestWithHttpInfoAsync(jobName, scalingRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="scalingRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse>> PostJobScalingRequestWithHttpInfoAsync(string jobName, ScalingRequest scalingRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobScalingRequest");
            }

            // verify the required parameter 'scalingRequest' is set
            if (scalingRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'scalingRequest' when calling JobsApi->PostJobScalingRequest");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = scalingRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobScalingRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRegisterResponse>("/job/{jobName}/scale", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobScalingRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobStabilityResponse</returns>
        public JobStabilityResponse PostJobStability(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobStabilityResponse> localVarResponse = PostJobStabilityWithHttpInfo(jobName, jobStabilityRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobStabilityResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobStabilityResponse> PostJobStabilityWithHttpInfo(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobStability");
            }

            // verify the required parameter 'jobStabilityRequest' is set
            if (jobStabilityRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobStabilityRequest' when calling JobsApi->PostJobStability");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobStabilityRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobStability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobStabilityResponse>("/job/{jobName}/stable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobStability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobStabilityResponse</returns>
        public async System.Threading.Tasks.Task<JobStabilityResponse> PostJobStabilityAsync(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobStabilityResponse> localVarResponse = await PostJobStabilityWithHttpInfoAsync(jobName, jobStabilityRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobName">The job identifier.</param>
        /// <param name="jobStabilityRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobStabilityResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobStabilityResponse>> PostJobStabilityWithHttpInfoAsync(string jobName, JobStabilityRequest jobStabilityRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobName' is set
            if (jobName == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobName' when calling JobsApi->PostJobStability");
            }

            // verify the required parameter 'jobStabilityRequest' is set
            if (jobStabilityRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobStabilityRequest' when calling JobsApi->PostJobStability");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("jobName", Fermyon.Nomad.Client.ClientUtils.ParameterToString(jobName)); // path parameter
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobStabilityRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobStability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobStabilityResponse>("/job/{jobName}/stable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobStability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobValidateResponse</returns>
        public JobValidateResponse PostJobValidateRequest(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobValidateResponse> localVarResponse = PostJobValidateRequestWithHttpInfo(jobValidateRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobValidateResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobValidateResponse> PostJobValidateRequestWithHttpInfo(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobValidateRequest' is set
            if (jobValidateRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobValidateRequest' when calling JobsApi->PostJobValidateRequest");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobValidateRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobValidateRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobValidateResponse>("/validate/job", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobValidateRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobValidateResponse</returns>
        public async System.Threading.Tasks.Task<JobValidateResponse> PostJobValidateRequestAsync(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobValidateResponse> localVarResponse = await PostJobValidateRequestWithHttpInfoAsync(jobValidateRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobValidateRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobValidateResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobValidateResponse>> PostJobValidateRequestWithHttpInfoAsync(JobValidateRequest jobValidateRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobValidateRequest' is set
            if (jobValidateRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobValidateRequest' when calling JobsApi->PostJobValidateRequest");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobValidateRequest;

            localVarRequestOptions.Operation = "JobsApi.PostJobValidateRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobValidateResponse>("/validate/job", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostJobValidateRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobRegisterResponse</returns>
        public JobRegisterResponse RegisterJob(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = RegisterJobWithHttpInfo(jobRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobRegisterResponse</returns>
        public Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> RegisterJobWithHttpInfo(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'jobRegisterRequest' is set
            if (jobRegisterRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobRegisterRequest' when calling JobsApi->RegisterJob");
            }

            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobRegisterRequest;

            localVarRequestOptions.Operation = "JobsApi.RegisterJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobRegisterResponse>("/jobs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRegisterResponse</returns>
        public async System.Threading.Tasks.Task<JobRegisterResponse> RegisterJobAsync(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse> localVarResponse = await RegisterJobWithHttpInfoAsync(jobRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Fermyon.Nomad.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobRegisterRequest"></param>
        /// <param name="region">Filters results based on the specified region. (optional)</param>
        /// <param name="varNamespace">Filters results based on the specified namespace. (optional)</param>
        /// <param name="xNomadToken">A Nomad ACL token. (optional)</param>
        /// <param name="idempotencyToken">Can be used to ensure operations are only run once. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<Fermyon.Nomad.Client.ApiResponse<JobRegisterResponse>> RegisterJobWithHttpInfoAsync(JobRegisterRequest jobRegisterRequest, string? region = default(string?), string? varNamespace = default(string?), string? xNomadToken = default(string?), string? idempotencyToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobRegisterRequest' is set
            if (jobRegisterRequest == null)
            {
                throw new Fermyon.Nomad.Client.ApiException(400, "Missing required parameter 'jobRegisterRequest' when calling JobsApi->RegisterJob");
            }


            Fermyon.Nomad.Client.RequestOptions localVarRequestOptions = new Fermyon.Nomad.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fermyon.Nomad.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fermyon.Nomad.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (varNamespace != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "namespace", varNamespace));
            }
            if (idempotencyToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fermyon.Nomad.Client.ClientUtils.ParameterToMultiMap("", "idempotency_token", idempotencyToken));
            }
            if (xNomadToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", Fermyon.Nomad.Client.ClientUtils.ParameterToString(xNomadToken)); // header parameter
            }
            localVarRequestOptions.Data = jobRegisterRequest;

            localVarRequestOptions.Operation = "JobsApi.RegisterJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Nomad-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Nomad-Token", this.Configuration.GetApiKeyWithPrefix("X-Nomad-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<JobRegisterResponse>("/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
