/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ConsulUpstream
    /// </summary>
    [DataContract(Name = "ConsulUpstream")]
    public partial class ConsulUpstream : IEquatable<ConsulUpstream>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsulUpstream" /> class.
        /// </summary>
        /// <param name="datacenter">datacenter.</param>
        /// <param name="destinationName">destinationName.</param>
        /// <param name="localBindAddress">localBindAddress.</param>
        /// <param name="localBindPort">localBindPort.</param>
        /// <param name="meshGateway">meshGateway.</param>
        public ConsulUpstream(string datacenter = default(string), string destinationName = default(string), string localBindAddress = default(string), int localBindPort = default(int), ConsulMeshGateway meshGateway = default(ConsulMeshGateway))
        {
            this.Datacenter = datacenter;
            this.DestinationName = destinationName;
            this.LocalBindAddress = localBindAddress;
            this.LocalBindPort = localBindPort;
            this.MeshGateway = meshGateway;
        }

        /// <summary>
        /// Gets or Sets Datacenter
        /// </summary>
        [DataMember(Name = "Datacenter", EmitDefaultValue = false)]
        public string Datacenter { get; set; }

        /// <summary>
        /// Gets or Sets DestinationName
        /// </summary>
        [DataMember(Name = "DestinationName", EmitDefaultValue = false)]
        public string DestinationName { get; set; }

        /// <summary>
        /// Gets or Sets LocalBindAddress
        /// </summary>
        [DataMember(Name = "LocalBindAddress", EmitDefaultValue = false)]
        public string LocalBindAddress { get; set; }

        /// <summary>
        /// Gets or Sets LocalBindPort
        /// </summary>
        [DataMember(Name = "LocalBindPort", EmitDefaultValue = false)]
        public int LocalBindPort { get; set; }

        /// <summary>
        /// Gets or Sets MeshGateway
        /// </summary>
        [DataMember(Name = "MeshGateway", EmitDefaultValue = false)]
        public ConsulMeshGateway MeshGateway { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsulUpstream {\n");
            sb.Append("  Datacenter: ").Append(Datacenter).Append("\n");
            sb.Append("  DestinationName: ").Append(DestinationName).Append("\n");
            sb.Append("  LocalBindAddress: ").Append(LocalBindAddress).Append("\n");
            sb.Append("  LocalBindPort: ").Append(LocalBindPort).Append("\n");
            sb.Append("  MeshGateway: ").Append(MeshGateway).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsulUpstream);
        }

        /// <summary>
        /// Returns true if ConsulUpstream instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsulUpstream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsulUpstream input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Datacenter == input.Datacenter ||
                    (this.Datacenter != null &&
                    this.Datacenter.Equals(input.Datacenter))
                ) && 
                (
                    this.DestinationName == input.DestinationName ||
                    (this.DestinationName != null &&
                    this.DestinationName.Equals(input.DestinationName))
                ) && 
                (
                    this.LocalBindAddress == input.LocalBindAddress ||
                    (this.LocalBindAddress != null &&
                    this.LocalBindAddress.Equals(input.LocalBindAddress))
                ) && 
                (
                    this.LocalBindPort == input.LocalBindPort ||
                    this.LocalBindPort.Equals(input.LocalBindPort)
                ) && 
                (
                    this.MeshGateway == input.MeshGateway ||
                    (this.MeshGateway != null &&
                    this.MeshGateway.Equals(input.MeshGateway))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Datacenter != null)
                {
                    hashCode = (hashCode * 59) + this.Datacenter.GetHashCode();
                }
                if (this.DestinationName != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationName.GetHashCode();
                }
                if (this.LocalBindAddress != null)
                {
                    hashCode = (hashCode * 59) + this.LocalBindAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocalBindPort.GetHashCode();
                if (this.MeshGateway != null)
                {
                    hashCode = (hashCode * 59) + this.MeshGateway.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
