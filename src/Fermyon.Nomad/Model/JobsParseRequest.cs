/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// JobsParseRequest
    /// </summary>
    [DataContract(Name = "JobsParseRequest")]
    public partial class JobsParseRequest : IEquatable<JobsParseRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobsParseRequest" /> class.
        /// </summary>
        /// <param name="canonicalize">canonicalize.</param>
        /// <param name="jobHCL">jobHCL.</param>
        /// <param name="hclv1">hclv1.</param>
        public JobsParseRequest(bool canonicalize = default(bool), string jobHCL = default(string), bool hclv1 = default(bool))
        {
            this.Canonicalize = canonicalize;
            this.JobHCL = jobHCL;
            this.Hclv1 = hclv1;
        }

        /// <summary>
        /// Gets or Sets Canonicalize
        /// </summary>
        [DataMember(Name = "Canonicalize", EmitDefaultValue = true)]
        public bool Canonicalize { get; set; }

        /// <summary>
        /// Gets or Sets JobHCL
        /// </summary>
        [DataMember(Name = "JobHCL", EmitDefaultValue = false)]
        public string JobHCL { get; set; }

        /// <summary>
        /// Gets or Sets Hclv1
        /// </summary>
        [DataMember(Name = "hclv1", EmitDefaultValue = true)]
        public bool Hclv1 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobsParseRequest {\n");
            sb.Append("  Canonicalize: ").Append(Canonicalize).Append("\n");
            sb.Append("  JobHCL: ").Append(JobHCL).Append("\n");
            sb.Append("  Hclv1: ").Append(Hclv1).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobsParseRequest);
        }

        /// <summary>
        /// Returns true if JobsParseRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of JobsParseRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobsParseRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Canonicalize == input.Canonicalize ||
                    this.Canonicalize.Equals(input.Canonicalize)
                ) && 
                (
                    this.JobHCL == input.JobHCL ||
                    (this.JobHCL != null &&
                    this.JobHCL.Equals(input.JobHCL))
                ) && 
                (
                    this.Hclv1 == input.Hclv1 ||
                    this.Hclv1.Equals(input.Hclv1)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Canonicalize.GetHashCode();
                if (this.JobHCL != null)
                {
                    hashCode = (hashCode * 59) + this.JobHCL.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hclv1.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
