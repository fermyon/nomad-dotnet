/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// AllocationListStub
    /// </summary>
    [DataContract(Name = "AllocationListStub")]
    public partial class AllocationListStub : IEquatable<AllocationListStub>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationListStub" /> class.
        /// </summary>
        /// <param name="allocatedResources">allocatedResources.</param>
        /// <param name="clientDescription">clientDescription.</param>
        /// <param name="clientStatus">clientStatus.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="createTime">createTime.</param>
        /// <param name="deploymentStatus">deploymentStatus.</param>
        /// <param name="desiredDescription">desiredDescription.</param>
        /// <param name="desiredStatus">desiredStatus.</param>
        /// <param name="evalID">evalID.</param>
        /// <param name="followupEvalID">followupEvalID.</param>
        /// <param name="iD">iD.</param>
        /// <param name="jobID">jobID.</param>
        /// <param name="jobType">jobType.</param>
        /// <param name="jobVersion">jobVersion.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="modifyTime">modifyTime.</param>
        /// <param name="name">name.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="nodeID">nodeID.</param>
        /// <param name="nodeName">nodeName.</param>
        /// <param name="preemptedAllocations">preemptedAllocations.</param>
        /// <param name="preemptedByAllocation">preemptedByAllocation.</param>
        /// <param name="rescheduleTracker">rescheduleTracker.</param>
        /// <param name="taskGroup">taskGroup.</param>
        /// <param name="taskStates">taskStates.</param>
        public AllocationListStub(AllocatedResources allocatedResources = default(AllocatedResources), string clientDescription = default(string), string clientStatus = default(string), int createIndex = default(int), long createTime = default(long), AllocDeploymentStatus deploymentStatus = default(AllocDeploymentStatus), string desiredDescription = default(string), string desiredStatus = default(string), string evalID = default(string), string followupEvalID = default(string), string iD = default(string), string jobID = default(string), string jobType = default(string), int jobVersion = default(int), int modifyIndex = default(int), long modifyTime = default(long), string name = default(string), string varNamespace = default(string), string nodeID = default(string), string nodeName = default(string), List<string> preemptedAllocations = default(List<string>), string preemptedByAllocation = default(string), RescheduleTracker rescheduleTracker = default(RescheduleTracker), string taskGroup = default(string), Dictionary<string, TaskState> taskStates = default(Dictionary<string, TaskState>))
        {
            this.AllocatedResources = allocatedResources;
            this.ClientDescription = clientDescription;
            this.ClientStatus = clientStatus;
            this.CreateIndex = createIndex;
            this.CreateTime = createTime;
            this.DeploymentStatus = deploymentStatus;
            this.DesiredDescription = desiredDescription;
            this.DesiredStatus = desiredStatus;
            this.EvalID = evalID;
            this.FollowupEvalID = followupEvalID;
            this.ID = iD;
            this.JobID = jobID;
            this.JobType = jobType;
            this.JobVersion = jobVersion;
            this.ModifyIndex = modifyIndex;
            this.ModifyTime = modifyTime;
            this.Name = name;
            this.VarNamespace = varNamespace;
            this.NodeID = nodeID;
            this.NodeName = nodeName;
            this.PreemptedAllocations = preemptedAllocations;
            this.PreemptedByAllocation = preemptedByAllocation;
            this.RescheduleTracker = rescheduleTracker;
            this.TaskGroup = taskGroup;
            this.TaskStates = taskStates;
        }

        /// <summary>
        /// Gets or Sets AllocatedResources
        /// </summary>
        [DataMember(Name = "AllocatedResources", EmitDefaultValue = false)]
        public AllocatedResources AllocatedResources { get; set; }

        /// <summary>
        /// Gets or Sets ClientDescription
        /// </summary>
        [DataMember(Name = "ClientDescription", EmitDefaultValue = false)]
        public string ClientDescription { get; set; }

        /// <summary>
        /// Gets or Sets ClientStatus
        /// </summary>
        [DataMember(Name = "ClientStatus", EmitDefaultValue = false)]
        public string ClientStatus { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name = "CreateTime", EmitDefaultValue = false)]
        public long CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets DeploymentStatus
        /// </summary>
        [DataMember(Name = "DeploymentStatus", EmitDefaultValue = false)]
        public AllocDeploymentStatus DeploymentStatus { get; set; }

        /// <summary>
        /// Gets or Sets DesiredDescription
        /// </summary>
        [DataMember(Name = "DesiredDescription", EmitDefaultValue = false)]
        public string DesiredDescription { get; set; }

        /// <summary>
        /// Gets or Sets DesiredStatus
        /// </summary>
        [DataMember(Name = "DesiredStatus", EmitDefaultValue = false)]
        public string DesiredStatus { get; set; }

        /// <summary>
        /// Gets or Sets EvalID
        /// </summary>
        [DataMember(Name = "EvalID", EmitDefaultValue = false)]
        public string EvalID { get; set; }

        /// <summary>
        /// Gets or Sets FollowupEvalID
        /// </summary>
        [DataMember(Name = "FollowupEvalID", EmitDefaultValue = false)]
        public string FollowupEvalID { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name = "JobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Gets or Sets JobType
        /// </summary>
        [DataMember(Name = "JobType", EmitDefaultValue = false)]
        public string JobType { get; set; }

        /// <summary>
        /// Gets or Sets JobVersion
        /// </summary>
        [DataMember(Name = "JobVersion", EmitDefaultValue = false)]
        public int JobVersion { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets ModifyTime
        /// </summary>
        [DataMember(Name = "ModifyTime", EmitDefaultValue = false)]
        public long ModifyTime { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets NodeID
        /// </summary>
        [DataMember(Name = "NodeID", EmitDefaultValue = false)]
        public string NodeID { get; set; }

        /// <summary>
        /// Gets or Sets NodeName
        /// </summary>
        [DataMember(Name = "NodeName", EmitDefaultValue = false)]
        public string NodeName { get; set; }

        /// <summary>
        /// Gets or Sets PreemptedAllocations
        /// </summary>
        [DataMember(Name = "PreemptedAllocations", EmitDefaultValue = false)]
        public List<string> PreemptedAllocations { get; set; }

        /// <summary>
        /// Gets or Sets PreemptedByAllocation
        /// </summary>
        [DataMember(Name = "PreemptedByAllocation", EmitDefaultValue = false)]
        public string PreemptedByAllocation { get; set; }

        /// <summary>
        /// Gets or Sets RescheduleTracker
        /// </summary>
        [DataMember(Name = "RescheduleTracker", EmitDefaultValue = false)]
        public RescheduleTracker RescheduleTracker { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroup
        /// </summary>
        [DataMember(Name = "TaskGroup", EmitDefaultValue = false)]
        public string TaskGroup { get; set; }

        /// <summary>
        /// Gets or Sets TaskStates
        /// </summary>
        [DataMember(Name = "TaskStates", EmitDefaultValue = false)]
        public Dictionary<string, TaskState> TaskStates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllocationListStub {\n");
            sb.Append("  AllocatedResources: ").Append(AllocatedResources).Append("\n");
            sb.Append("  ClientDescription: ").Append(ClientDescription).Append("\n");
            sb.Append("  ClientStatus: ").Append(ClientStatus).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  DeploymentStatus: ").Append(DeploymentStatus).Append("\n");
            sb.Append("  DesiredDescription: ").Append(DesiredDescription).Append("\n");
            sb.Append("  DesiredStatus: ").Append(DesiredStatus).Append("\n");
            sb.Append("  EvalID: ").Append(EvalID).Append("\n");
            sb.Append("  FollowupEvalID: ").Append(FollowupEvalID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  JobType: ").Append(JobType).Append("\n");
            sb.Append("  JobVersion: ").Append(JobVersion).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  ModifyTime: ").Append(ModifyTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  NodeID: ").Append(NodeID).Append("\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  PreemptedAllocations: ").Append(PreemptedAllocations).Append("\n");
            sb.Append("  PreemptedByAllocation: ").Append(PreemptedByAllocation).Append("\n");
            sb.Append("  RescheduleTracker: ").Append(RescheduleTracker).Append("\n");
            sb.Append("  TaskGroup: ").Append(TaskGroup).Append("\n");
            sb.Append("  TaskStates: ").Append(TaskStates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocationListStub);
        }

        /// <summary>
        /// Returns true if AllocationListStub instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocationListStub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocationListStub input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllocatedResources == input.AllocatedResources ||
                    (this.AllocatedResources != null &&
                    this.AllocatedResources.Equals(input.AllocatedResources))
                ) && 
                (
                    this.ClientDescription == input.ClientDescription ||
                    (this.ClientDescription != null &&
                    this.ClientDescription.Equals(input.ClientDescription))
                ) && 
                (
                    this.ClientStatus == input.ClientStatus ||
                    (this.ClientStatus != null &&
                    this.ClientStatus.Equals(input.ClientStatus))
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    this.CreateTime.Equals(input.CreateTime)
                ) && 
                (
                    this.DeploymentStatus == input.DeploymentStatus ||
                    (this.DeploymentStatus != null &&
                    this.DeploymentStatus.Equals(input.DeploymentStatus))
                ) && 
                (
                    this.DesiredDescription == input.DesiredDescription ||
                    (this.DesiredDescription != null &&
                    this.DesiredDescription.Equals(input.DesiredDescription))
                ) && 
                (
                    this.DesiredStatus == input.DesiredStatus ||
                    (this.DesiredStatus != null &&
                    this.DesiredStatus.Equals(input.DesiredStatus))
                ) && 
                (
                    this.EvalID == input.EvalID ||
                    (this.EvalID != null &&
                    this.EvalID.Equals(input.EvalID))
                ) && 
                (
                    this.FollowupEvalID == input.FollowupEvalID ||
                    (this.FollowupEvalID != null &&
                    this.FollowupEvalID.Equals(input.FollowupEvalID))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.JobType == input.JobType ||
                    (this.JobType != null &&
                    this.JobType.Equals(input.JobType))
                ) && 
                (
                    this.JobVersion == input.JobVersion ||
                    this.JobVersion.Equals(input.JobVersion)
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.ModifyTime == input.ModifyTime ||
                    this.ModifyTime.Equals(input.ModifyTime)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.NodeID == input.NodeID ||
                    (this.NodeID != null &&
                    this.NodeID.Equals(input.NodeID))
                ) && 
                (
                    this.NodeName == input.NodeName ||
                    (this.NodeName != null &&
                    this.NodeName.Equals(input.NodeName))
                ) && 
                (
                    this.PreemptedAllocations == input.PreemptedAllocations ||
                    this.PreemptedAllocations != null &&
                    input.PreemptedAllocations != null &&
                    this.PreemptedAllocations.SequenceEqual(input.PreemptedAllocations)
                ) && 
                (
                    this.PreemptedByAllocation == input.PreemptedByAllocation ||
                    (this.PreemptedByAllocation != null &&
                    this.PreemptedByAllocation.Equals(input.PreemptedByAllocation))
                ) && 
                (
                    this.RescheduleTracker == input.RescheduleTracker ||
                    (this.RescheduleTracker != null &&
                    this.RescheduleTracker.Equals(input.RescheduleTracker))
                ) && 
                (
                    this.TaskGroup == input.TaskGroup ||
                    (this.TaskGroup != null &&
                    this.TaskGroup.Equals(input.TaskGroup))
                ) && 
                (
                    this.TaskStates == input.TaskStates ||
                    this.TaskStates != null &&
                    input.TaskStates != null &&
                    this.TaskStates.SequenceEqual(input.TaskStates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocatedResources != null)
                {
                    hashCode = (hashCode * 59) + this.AllocatedResources.GetHashCode();
                }
                if (this.ClientDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ClientDescription.GetHashCode();
                }
                if (this.ClientStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ClientStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                if (this.DeploymentStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DeploymentStatus.GetHashCode();
                }
                if (this.DesiredDescription != null)
                {
                    hashCode = (hashCode * 59) + this.DesiredDescription.GetHashCode();
                }
                if (this.DesiredStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DesiredStatus.GetHashCode();
                }
                if (this.EvalID != null)
                {
                    hashCode = (hashCode * 59) + this.EvalID.GetHashCode();
                }
                if (this.FollowupEvalID != null)
                {
                    hashCode = (hashCode * 59) + this.FollowupEvalID.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                if (this.JobID != null)
                {
                    hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                }
                if (this.JobType != null)
                {
                    hashCode = (hashCode * 59) + this.JobType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifyTime.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.NodeID != null)
                {
                    hashCode = (hashCode * 59) + this.NodeID.GetHashCode();
                }
                if (this.NodeName != null)
                {
                    hashCode = (hashCode * 59) + this.NodeName.GetHashCode();
                }
                if (this.PreemptedAllocations != null)
                {
                    hashCode = (hashCode * 59) + this.PreemptedAllocations.GetHashCode();
                }
                if (this.PreemptedByAllocation != null)
                {
                    hashCode = (hashCode * 59) + this.PreemptedByAllocation.GetHashCode();
                }
                if (this.RescheduleTracker != null)
                {
                    hashCode = (hashCode * 59) + this.RescheduleTracker.GetHashCode();
                }
                if (this.TaskGroup != null)
                {
                    hashCode = (hashCode * 59) + this.TaskGroup.GetHashCode();
                }
                if (this.TaskStates != null)
                {
                    hashCode = (hashCode * 59) + this.TaskStates.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // JobVersion (int) maximum
            if (this.JobVersion > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobVersion, must be a value less than or equal to 384.", new [] { "JobVersion" });
            }

            // JobVersion (int) minimum
            if (this.JobVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobVersion, must be a value greater than or equal to 0.", new [] { "JobVersion" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            yield break;
        }
    }

}
