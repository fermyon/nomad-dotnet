/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// JobChildrenSummary
    /// </summary>
    [DataContract(Name = "JobChildrenSummary")]
    public partial class JobChildrenSummary : IEquatable<JobChildrenSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobChildrenSummary" /> class.
        /// </summary>
        /// <param name="dead">dead.</param>
        /// <param name="pending">pending.</param>
        /// <param name="running">running.</param>
        public JobChildrenSummary(long dead = default(long), long pending = default(long), long running = default(long))
        {
            this.Dead = dead;
            this.Pending = pending;
            this.Running = running;
        }

        /// <summary>
        /// Gets or Sets Dead
        /// </summary>
        [DataMember(Name = "Dead", EmitDefaultValue = false)]
        public long Dead { get; set; }

        /// <summary>
        /// Gets or Sets Pending
        /// </summary>
        [DataMember(Name = "Pending", EmitDefaultValue = false)]
        public long Pending { get; set; }

        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name = "Running", EmitDefaultValue = false)]
        public long Running { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobChildrenSummary {\n");
            sb.Append("  Dead: ").Append(Dead).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobChildrenSummary);
        }

        /// <summary>
        /// Returns true if JobChildrenSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of JobChildrenSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobChildrenSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dead == input.Dead ||
                    this.Dead.Equals(input.Dead)
                ) && 
                (
                    this.Pending == input.Pending ||
                    this.Pending.Equals(input.Pending)
                ) && 
                (
                    this.Running == input.Running ||
                    this.Running.Equals(input.Running)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Dead.GetHashCode();
                hashCode = (hashCode * 59) + this.Pending.GetHashCode();
                hashCode = (hashCode * 59) + this.Running.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
