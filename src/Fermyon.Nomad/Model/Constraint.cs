/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Constraint
    /// </summary>
    [DataContract(Name = "Constraint")]
    public partial class Constraint : IEquatable<Constraint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Constraint" /> class.
        /// </summary>
        /// <param name="lTarget">lTarget.</param>
        /// <param name="operand">operand.</param>
        /// <param name="rTarget">rTarget.</param>
        public Constraint(string lTarget = default(string), string operand = default(string), string rTarget = default(string))
        {
            this.LTarget = lTarget;
            this.Operand = operand;
            this.RTarget = rTarget;
        }

        /// <summary>
        /// Gets or Sets LTarget
        /// </summary>
        [DataMember(Name = "LTarget", EmitDefaultValue = false)]
        public string LTarget { get; set; }

        /// <summary>
        /// Gets or Sets Operand
        /// </summary>
        [DataMember(Name = "Operand", EmitDefaultValue = false)]
        public string Operand { get; set; }

        /// <summary>
        /// Gets or Sets RTarget
        /// </summary>
        [DataMember(Name = "RTarget", EmitDefaultValue = false)]
        public string RTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Constraint {\n");
            sb.Append("  LTarget: ").Append(LTarget).Append("\n");
            sb.Append("  Operand: ").Append(Operand).Append("\n");
            sb.Append("  RTarget: ").Append(RTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Constraint);
        }

        /// <summary>
        /// Returns true if Constraint instances are equal
        /// </summary>
        /// <param name="input">Instance of Constraint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Constraint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LTarget == input.LTarget ||
                    (this.LTarget != null &&
                    this.LTarget.Equals(input.LTarget))
                ) && 
                (
                    this.Operand == input.Operand ||
                    (this.Operand != null &&
                    this.Operand.Equals(input.Operand))
                ) && 
                (
                    this.RTarget == input.RTarget ||
                    (this.RTarget != null &&
                    this.RTarget.Equals(input.RTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LTarget != null)
                {
                    hashCode = (hashCode * 59) + this.LTarget.GetHashCode();
                }
                if (this.Operand != null)
                {
                    hashCode = (hashCode * 59) + this.Operand.GetHashCode();
                }
                if (this.RTarget != null)
                {
                    hashCode = (hashCode * 59) + this.RTarget.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
