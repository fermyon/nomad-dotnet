/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// CSIControllerInfo
    /// </summary>
    [DataContract(Name = "CSIControllerInfo")]
    public partial class CSIControllerInfo : IEquatable<CSIControllerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSIControllerInfo" /> class.
        /// </summary>
        /// <param name="supportsAttachDetach">supportsAttachDetach.</param>
        /// <param name="supportsClone">supportsClone.</param>
        /// <param name="supportsCondition">supportsCondition.</param>
        /// <param name="supportsCreateDelete">supportsCreateDelete.</param>
        /// <param name="supportsCreateDeleteSnapshot">supportsCreateDeleteSnapshot.</param>
        /// <param name="supportsExpand">supportsExpand.</param>
        /// <param name="supportsGet">supportsGet.</param>
        /// <param name="supportsGetCapacity">supportsGetCapacity.</param>
        /// <param name="supportsListSnapshots">supportsListSnapshots.</param>
        /// <param name="supportsListVolumes">supportsListVolumes.</param>
        /// <param name="supportsListVolumesAttachedNodes">supportsListVolumesAttachedNodes.</param>
        /// <param name="supportsReadOnlyAttach">supportsReadOnlyAttach.</param>
        public CSIControllerInfo(bool supportsAttachDetach = default(bool), bool supportsClone = default(bool), bool supportsCondition = default(bool), bool supportsCreateDelete = default(bool), bool supportsCreateDeleteSnapshot = default(bool), bool supportsExpand = default(bool), bool supportsGet = default(bool), bool supportsGetCapacity = default(bool), bool supportsListSnapshots = default(bool), bool supportsListVolumes = default(bool), bool supportsListVolumesAttachedNodes = default(bool), bool supportsReadOnlyAttach = default(bool))
        {
            this.SupportsAttachDetach = supportsAttachDetach;
            this.SupportsClone = supportsClone;
            this.SupportsCondition = supportsCondition;
            this.SupportsCreateDelete = supportsCreateDelete;
            this.SupportsCreateDeleteSnapshot = supportsCreateDeleteSnapshot;
            this.SupportsExpand = supportsExpand;
            this.SupportsGet = supportsGet;
            this.SupportsGetCapacity = supportsGetCapacity;
            this.SupportsListSnapshots = supportsListSnapshots;
            this.SupportsListVolumes = supportsListVolumes;
            this.SupportsListVolumesAttachedNodes = supportsListVolumesAttachedNodes;
            this.SupportsReadOnlyAttach = supportsReadOnlyAttach;
        }

        /// <summary>
        /// Gets or Sets SupportsAttachDetach
        /// </summary>
        [DataMember(Name = "SupportsAttachDetach", EmitDefaultValue = true)]
        public bool SupportsAttachDetach { get; set; }

        /// <summary>
        /// Gets or Sets SupportsClone
        /// </summary>
        [DataMember(Name = "SupportsClone", EmitDefaultValue = true)]
        public bool SupportsClone { get; set; }

        /// <summary>
        /// Gets or Sets SupportsCondition
        /// </summary>
        [DataMember(Name = "SupportsCondition", EmitDefaultValue = true)]
        public bool SupportsCondition { get; set; }

        /// <summary>
        /// Gets or Sets SupportsCreateDelete
        /// </summary>
        [DataMember(Name = "SupportsCreateDelete", EmitDefaultValue = true)]
        public bool SupportsCreateDelete { get; set; }

        /// <summary>
        /// Gets or Sets SupportsCreateDeleteSnapshot
        /// </summary>
        [DataMember(Name = "SupportsCreateDeleteSnapshot", EmitDefaultValue = true)]
        public bool SupportsCreateDeleteSnapshot { get; set; }

        /// <summary>
        /// Gets or Sets SupportsExpand
        /// </summary>
        [DataMember(Name = "SupportsExpand", EmitDefaultValue = true)]
        public bool SupportsExpand { get; set; }

        /// <summary>
        /// Gets or Sets SupportsGet
        /// </summary>
        [DataMember(Name = "SupportsGet", EmitDefaultValue = true)]
        public bool SupportsGet { get; set; }

        /// <summary>
        /// Gets or Sets SupportsGetCapacity
        /// </summary>
        [DataMember(Name = "SupportsGetCapacity", EmitDefaultValue = true)]
        public bool SupportsGetCapacity { get; set; }

        /// <summary>
        /// Gets or Sets SupportsListSnapshots
        /// </summary>
        [DataMember(Name = "SupportsListSnapshots", EmitDefaultValue = true)]
        public bool SupportsListSnapshots { get; set; }

        /// <summary>
        /// Gets or Sets SupportsListVolumes
        /// </summary>
        [DataMember(Name = "SupportsListVolumes", EmitDefaultValue = true)]
        public bool SupportsListVolumes { get; set; }

        /// <summary>
        /// Gets or Sets SupportsListVolumesAttachedNodes
        /// </summary>
        [DataMember(Name = "SupportsListVolumesAttachedNodes", EmitDefaultValue = true)]
        public bool SupportsListVolumesAttachedNodes { get; set; }

        /// <summary>
        /// Gets or Sets SupportsReadOnlyAttach
        /// </summary>
        [DataMember(Name = "SupportsReadOnlyAttach", EmitDefaultValue = true)]
        public bool SupportsReadOnlyAttach { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CSIControllerInfo {\n");
            sb.Append("  SupportsAttachDetach: ").Append(SupportsAttachDetach).Append("\n");
            sb.Append("  SupportsClone: ").Append(SupportsClone).Append("\n");
            sb.Append("  SupportsCondition: ").Append(SupportsCondition).Append("\n");
            sb.Append("  SupportsCreateDelete: ").Append(SupportsCreateDelete).Append("\n");
            sb.Append("  SupportsCreateDeleteSnapshot: ").Append(SupportsCreateDeleteSnapshot).Append("\n");
            sb.Append("  SupportsExpand: ").Append(SupportsExpand).Append("\n");
            sb.Append("  SupportsGet: ").Append(SupportsGet).Append("\n");
            sb.Append("  SupportsGetCapacity: ").Append(SupportsGetCapacity).Append("\n");
            sb.Append("  SupportsListSnapshots: ").Append(SupportsListSnapshots).Append("\n");
            sb.Append("  SupportsListVolumes: ").Append(SupportsListVolumes).Append("\n");
            sb.Append("  SupportsListVolumesAttachedNodes: ").Append(SupportsListVolumesAttachedNodes).Append("\n");
            sb.Append("  SupportsReadOnlyAttach: ").Append(SupportsReadOnlyAttach).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSIControllerInfo);
        }

        /// <summary>
        /// Returns true if CSIControllerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CSIControllerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSIControllerInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SupportsAttachDetach == input.SupportsAttachDetach ||
                    this.SupportsAttachDetach.Equals(input.SupportsAttachDetach)
                ) && 
                (
                    this.SupportsClone == input.SupportsClone ||
                    this.SupportsClone.Equals(input.SupportsClone)
                ) && 
                (
                    this.SupportsCondition == input.SupportsCondition ||
                    this.SupportsCondition.Equals(input.SupportsCondition)
                ) && 
                (
                    this.SupportsCreateDelete == input.SupportsCreateDelete ||
                    this.SupportsCreateDelete.Equals(input.SupportsCreateDelete)
                ) && 
                (
                    this.SupportsCreateDeleteSnapshot == input.SupportsCreateDeleteSnapshot ||
                    this.SupportsCreateDeleteSnapshot.Equals(input.SupportsCreateDeleteSnapshot)
                ) && 
                (
                    this.SupportsExpand == input.SupportsExpand ||
                    this.SupportsExpand.Equals(input.SupportsExpand)
                ) && 
                (
                    this.SupportsGet == input.SupportsGet ||
                    this.SupportsGet.Equals(input.SupportsGet)
                ) && 
                (
                    this.SupportsGetCapacity == input.SupportsGetCapacity ||
                    this.SupportsGetCapacity.Equals(input.SupportsGetCapacity)
                ) && 
                (
                    this.SupportsListSnapshots == input.SupportsListSnapshots ||
                    this.SupportsListSnapshots.Equals(input.SupportsListSnapshots)
                ) && 
                (
                    this.SupportsListVolumes == input.SupportsListVolumes ||
                    this.SupportsListVolumes.Equals(input.SupportsListVolumes)
                ) && 
                (
                    this.SupportsListVolumesAttachedNodes == input.SupportsListVolumesAttachedNodes ||
                    this.SupportsListVolumesAttachedNodes.Equals(input.SupportsListVolumesAttachedNodes)
                ) && 
                (
                    this.SupportsReadOnlyAttach == input.SupportsReadOnlyAttach ||
                    this.SupportsReadOnlyAttach.Equals(input.SupportsReadOnlyAttach)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SupportsAttachDetach.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsClone.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsCondition.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsCreateDelete.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsCreateDeleteSnapshot.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsExpand.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsGet.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsGetCapacity.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsListSnapshots.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsListVolumes.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsListVolumesAttachedNodes.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsReadOnlyAttach.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
