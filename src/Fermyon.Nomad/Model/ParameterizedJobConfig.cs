/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ParameterizedJobConfig
    /// </summary>
    [DataContract(Name = "ParameterizedJobConfig")]
    public partial class ParameterizedJobConfig : IEquatable<ParameterizedJobConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterizedJobConfig" /> class.
        /// </summary>
        /// <param name="metaOptional">metaOptional.</param>
        /// <param name="metaRequired">metaRequired.</param>
        /// <param name="payload">payload.</param>
        public ParameterizedJobConfig(List<string> metaOptional = default(List<string>), List<string> metaRequired = default(List<string>), string payload = default(string))
        {
            this.MetaOptional = metaOptional;
            this.MetaRequired = metaRequired;
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets MetaOptional
        /// </summary>
        [DataMember(Name = "MetaOptional", EmitDefaultValue = false)]
        public List<string> MetaOptional { get; set; }

        /// <summary>
        /// Gets or Sets MetaRequired
        /// </summary>
        [DataMember(Name = "MetaRequired", EmitDefaultValue = false)]
        public List<string> MetaRequired { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "Payload", EmitDefaultValue = false)]
        public string Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterizedJobConfig {\n");
            sb.Append("  MetaOptional: ").Append(MetaOptional).Append("\n");
            sb.Append("  MetaRequired: ").Append(MetaRequired).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParameterizedJobConfig);
        }

        /// <summary>
        /// Returns true if ParameterizedJobConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ParameterizedJobConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterizedJobConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MetaOptional == input.MetaOptional ||
                    this.MetaOptional != null &&
                    input.MetaOptional != null &&
                    this.MetaOptional.SequenceEqual(input.MetaOptional)
                ) && 
                (
                    this.MetaRequired == input.MetaRequired ||
                    this.MetaRequired != null &&
                    input.MetaRequired != null &&
                    this.MetaRequired.SequenceEqual(input.MetaRequired)
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MetaOptional != null)
                {
                    hashCode = (hashCode * 59) + this.MetaOptional.GetHashCode();
                }
                if (this.MetaRequired != null)
                {
                    hashCode = (hashCode * 59) + this.MetaRequired.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
