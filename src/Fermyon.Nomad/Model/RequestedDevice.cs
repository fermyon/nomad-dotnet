/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// RequestedDevice
    /// </summary>
    [DataContract(Name = "RequestedDevice")]
    public partial class RequestedDevice : IEquatable<RequestedDevice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedDevice" /> class.
        /// </summary>
        /// <param name="affinities">affinities.</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="count">count.</param>
        /// <param name="name">name.</param>
        public RequestedDevice(List<Affinity> affinities = default(List<Affinity>), List<Constraint> constraints = default(List<Constraint>), int count = default(int), string name = default(string))
        {
            this.Affinities = affinities;
            this.Constraints = constraints;
            this.Count = count;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Affinities
        /// </summary>
        [DataMember(Name = "Affinities", EmitDefaultValue = false)]
        public List<Affinity> Affinities { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "Constraints", EmitDefaultValue = false)]
        public List<Constraint> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RequestedDevice {\n");
            sb.Append("  Affinities: ").Append(Affinities).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestedDevice);
        }

        /// <summary>
        /// Returns true if RequestedDevice instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestedDevice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestedDevice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Affinities == input.Affinities ||
                    this.Affinities != null &&
                    input.Affinities != null &&
                    this.Affinities.SequenceEqual(input.Affinities)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affinities != null)
                {
                    hashCode = (hashCode * 59) + this.Affinities.GetHashCode();
                }
                if (this.Constraints != null)
                {
                    hashCode = (hashCode * 59) + this.Constraints.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Count (int) maximum
            if (this.Count > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value less than or equal to 384.", new [] { "Count" });
            }

            // Count (int) minimum
            if (this.Count < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Count, must be a value greater than or equal to 0.", new [] { "Count" });
            }

            yield break;
        }
    }

}
