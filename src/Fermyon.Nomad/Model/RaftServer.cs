/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// RaftServer
    /// </summary>
    [DataContract(Name = "RaftServer")]
    public partial class RaftServer : IEquatable<RaftServer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RaftServer" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="iD">iD.</param>
        /// <param name="leader">leader.</param>
        /// <param name="node">node.</param>
        /// <param name="raftProtocol">raftProtocol.</param>
        /// <param name="voter">voter.</param>
        public RaftServer(string address = default(string), string iD = default(string), bool leader = default(bool), string node = default(string), string raftProtocol = default(string), bool voter = default(bool))
        {
            this.Address = address;
            this.ID = iD;
            this.Leader = leader;
            this.Node = node;
            this.RaftProtocol = raftProtocol;
            this.Voter = voter;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Leader
        /// </summary>
        [DataMember(Name = "Leader", EmitDefaultValue = true)]
        public bool Leader { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name = "Node", EmitDefaultValue = false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets RaftProtocol
        /// </summary>
        [DataMember(Name = "RaftProtocol", EmitDefaultValue = false)]
        public string RaftProtocol { get; set; }

        /// <summary>
        /// Gets or Sets Voter
        /// </summary>
        [DataMember(Name = "Voter", EmitDefaultValue = true)]
        public bool Voter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RaftServer {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Leader: ").Append(Leader).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  RaftProtocol: ").Append(RaftProtocol).Append("\n");
            sb.Append("  Voter: ").Append(Voter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RaftServer);
        }

        /// <summary>
        /// Returns true if RaftServer instances are equal
        /// </summary>
        /// <param name="input">Instance of RaftServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RaftServer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Leader == input.Leader ||
                    this.Leader.Equals(input.Leader)
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.RaftProtocol == input.RaftProtocol ||
                    (this.RaftProtocol != null &&
                    this.RaftProtocol.Equals(input.RaftProtocol))
                ) && 
                (
                    this.Voter == input.Voter ||
                    this.Voter.Equals(input.Voter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Leader.GetHashCode();
                if (this.Node != null)
                {
                    hashCode = (hashCode * 59) + this.Node.GetHashCode();
                }
                if (this.RaftProtocol != null)
                {
                    hashCode = (hashCode * 59) + this.RaftProtocol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Voter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
