/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// JobScaleStatusResponse
    /// </summary>
    [DataContract(Name = "JobScaleStatusResponse")]
    public partial class JobScaleStatusResponse : IEquatable<JobScaleStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobScaleStatusResponse" /> class.
        /// </summary>
        /// <param name="jobCreateIndex">jobCreateIndex.</param>
        /// <param name="jobID">jobID.</param>
        /// <param name="jobModifyIndex">jobModifyIndex.</param>
        /// <param name="jobStopped">jobStopped.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="taskGroups">taskGroups.</param>
        public JobScaleStatusResponse(int jobCreateIndex = default(int), string jobID = default(string), int jobModifyIndex = default(int), bool jobStopped = default(bool), string varNamespace = default(string), Dictionary<string, TaskGroupScaleStatus> taskGroups = default(Dictionary<string, TaskGroupScaleStatus>))
        {
            this.JobCreateIndex = jobCreateIndex;
            this.JobID = jobID;
            this.JobModifyIndex = jobModifyIndex;
            this.JobStopped = jobStopped;
            this.VarNamespace = varNamespace;
            this.TaskGroups = taskGroups;
        }

        /// <summary>
        /// Gets or Sets JobCreateIndex
        /// </summary>
        [DataMember(Name = "JobCreateIndex", EmitDefaultValue = false)]
        public int JobCreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name = "JobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Gets or Sets JobModifyIndex
        /// </summary>
        [DataMember(Name = "JobModifyIndex", EmitDefaultValue = false)]
        public int JobModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets JobStopped
        /// </summary>
        [DataMember(Name = "JobStopped", EmitDefaultValue = true)]
        public bool JobStopped { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroups
        /// </summary>
        [DataMember(Name = "TaskGroups", EmitDefaultValue = false)]
        public Dictionary<string, TaskGroupScaleStatus> TaskGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobScaleStatusResponse {\n");
            sb.Append("  JobCreateIndex: ").Append(JobCreateIndex).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  JobModifyIndex: ").Append(JobModifyIndex).Append("\n");
            sb.Append("  JobStopped: ").Append(JobStopped).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  TaskGroups: ").Append(TaskGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobScaleStatusResponse);
        }

        /// <summary>
        /// Returns true if JobScaleStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of JobScaleStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobScaleStatusResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobCreateIndex == input.JobCreateIndex ||
                    this.JobCreateIndex.Equals(input.JobCreateIndex)
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.JobModifyIndex == input.JobModifyIndex ||
                    this.JobModifyIndex.Equals(input.JobModifyIndex)
                ) && 
                (
                    this.JobStopped == input.JobStopped ||
                    this.JobStopped.Equals(input.JobStopped)
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.TaskGroups == input.TaskGroups ||
                    this.TaskGroups != null &&
                    input.TaskGroups != null &&
                    this.TaskGroups.SequenceEqual(input.TaskGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.JobCreateIndex.GetHashCode();
                if (this.JobID != null)
                {
                    hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobModifyIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.JobStopped.GetHashCode();
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.TaskGroups != null)
                {
                    hashCode = (hashCode * 59) + this.TaskGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // JobCreateIndex (int) maximum
            if (this.JobCreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobCreateIndex, must be a value less than or equal to 384.", new [] { "JobCreateIndex" });
            }

            // JobCreateIndex (int) minimum
            if (this.JobCreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobCreateIndex, must be a value greater than or equal to 0.", new [] { "JobCreateIndex" });
            }

            // JobModifyIndex (int) maximum
            if (this.JobModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value less than or equal to 384.", new [] { "JobModifyIndex" });
            }

            // JobModifyIndex (int) minimum
            if (this.JobModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value greater than or equal to 0.", new [] { "JobModifyIndex" });
            }

            yield break;
        }
    }

}
