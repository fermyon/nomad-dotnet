/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Deployment
    /// </summary>
    [DataContract(Name = "Deployment")]
    public partial class Deployment : IEquatable<Deployment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Deployment" /> class.
        /// </summary>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="iD">iD.</param>
        /// <param name="isMultiregion">isMultiregion.</param>
        /// <param name="jobCreateIndex">jobCreateIndex.</param>
        /// <param name="jobID">jobID.</param>
        /// <param name="jobModifyIndex">jobModifyIndex.</param>
        /// <param name="jobSpecModifyIndex">jobSpecModifyIndex.</param>
        /// <param name="jobVersion">jobVersion.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="taskGroups">taskGroups.</param>
        public Deployment(int createIndex = default(int), string iD = default(string), bool isMultiregion = default(bool), int jobCreateIndex = default(int), string jobID = default(string), int jobModifyIndex = default(int), int jobSpecModifyIndex = default(int), int jobVersion = default(int), int modifyIndex = default(int), string varNamespace = default(string), string status = default(string), string statusDescription = default(string), Dictionary<string, DeploymentState> taskGroups = default(Dictionary<string, DeploymentState>))
        {
            this.CreateIndex = createIndex;
            this.ID = iD;
            this.IsMultiregion = isMultiregion;
            this.JobCreateIndex = jobCreateIndex;
            this.JobID = jobID;
            this.JobModifyIndex = jobModifyIndex;
            this.JobSpecModifyIndex = jobSpecModifyIndex;
            this.JobVersion = jobVersion;
            this.ModifyIndex = modifyIndex;
            this.VarNamespace = varNamespace;
            this.Status = status;
            this.StatusDescription = statusDescription;
            this.TaskGroups = taskGroups;
        }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets IsMultiregion
        /// </summary>
        [DataMember(Name = "IsMultiregion", EmitDefaultValue = true)]
        public bool IsMultiregion { get; set; }

        /// <summary>
        /// Gets or Sets JobCreateIndex
        /// </summary>
        [DataMember(Name = "JobCreateIndex", EmitDefaultValue = false)]
        public int JobCreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name = "JobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Gets or Sets JobModifyIndex
        /// </summary>
        [DataMember(Name = "JobModifyIndex", EmitDefaultValue = false)]
        public int JobModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets JobSpecModifyIndex
        /// </summary>
        [DataMember(Name = "JobSpecModifyIndex", EmitDefaultValue = false)]
        public int JobSpecModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets JobVersion
        /// </summary>
        [DataMember(Name = "JobVersion", EmitDefaultValue = false)]
        public int JobVersion { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "StatusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroups
        /// </summary>
        [DataMember(Name = "TaskGroups", EmitDefaultValue = false)]
        public Dictionary<string, DeploymentState> TaskGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Deployment {\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IsMultiregion: ").Append(IsMultiregion).Append("\n");
            sb.Append("  JobCreateIndex: ").Append(JobCreateIndex).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  JobModifyIndex: ").Append(JobModifyIndex).Append("\n");
            sb.Append("  JobSpecModifyIndex: ").Append(JobSpecModifyIndex).Append("\n");
            sb.Append("  JobVersion: ").Append(JobVersion).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  TaskGroups: ").Append(TaskGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Deployment);
        }

        /// <summary>
        /// Returns true if Deployment instances are equal
        /// </summary>
        /// <param name="input">Instance of Deployment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Deployment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.IsMultiregion == input.IsMultiregion ||
                    this.IsMultiregion.Equals(input.IsMultiregion)
                ) && 
                (
                    this.JobCreateIndex == input.JobCreateIndex ||
                    this.JobCreateIndex.Equals(input.JobCreateIndex)
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.JobModifyIndex == input.JobModifyIndex ||
                    this.JobModifyIndex.Equals(input.JobModifyIndex)
                ) && 
                (
                    this.JobSpecModifyIndex == input.JobSpecModifyIndex ||
                    this.JobSpecModifyIndex.Equals(input.JobSpecModifyIndex)
                ) && 
                (
                    this.JobVersion == input.JobVersion ||
                    this.JobVersion.Equals(input.JobVersion)
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.TaskGroups == input.TaskGroups ||
                    this.TaskGroups != null &&
                    input.TaskGroups != null &&
                    this.TaskGroups.SequenceEqual(input.TaskGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMultiregion.GetHashCode();
                hashCode = (hashCode * 59) + this.JobCreateIndex.GetHashCode();
                if (this.JobID != null)
                {
                    hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobModifyIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.JobSpecModifyIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.JobVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                if (this.TaskGroups != null)
                {
                    hashCode = (hashCode * 59) + this.TaskGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // JobCreateIndex (int) maximum
            if (this.JobCreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobCreateIndex, must be a value less than or equal to 384.", new [] { "JobCreateIndex" });
            }

            // JobCreateIndex (int) minimum
            if (this.JobCreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobCreateIndex, must be a value greater than or equal to 0.", new [] { "JobCreateIndex" });
            }

            // JobModifyIndex (int) maximum
            if (this.JobModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value less than or equal to 384.", new [] { "JobModifyIndex" });
            }

            // JobModifyIndex (int) minimum
            if (this.JobModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value greater than or equal to 0.", new [] { "JobModifyIndex" });
            }

            // JobSpecModifyIndex (int) maximum
            if (this.JobSpecModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobSpecModifyIndex, must be a value less than or equal to 384.", new [] { "JobSpecModifyIndex" });
            }

            // JobSpecModifyIndex (int) minimum
            if (this.JobSpecModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobSpecModifyIndex, must be a value greater than or equal to 0.", new [] { "JobSpecModifyIndex" });
            }

            // JobVersion (int) maximum
            if (this.JobVersion > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobVersion, must be a value less than or equal to 384.", new [] { "JobVersion" });
            }

            // JobVersion (int) minimum
            if (this.JobVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobVersion, must be a value greater than or equal to 0.", new [] { "JobVersion" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            yield break;
        }
    }

}
