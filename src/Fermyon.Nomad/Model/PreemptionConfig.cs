/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// PreemptionConfig
    /// </summary>
    [DataContract(Name = "PreemptionConfig")]
    public partial class PreemptionConfig : IEquatable<PreemptionConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreemptionConfig" /> class.
        /// </summary>
        /// <param name="batchSchedulerEnabled">batchSchedulerEnabled.</param>
        /// <param name="serviceSchedulerEnabled">serviceSchedulerEnabled.</param>
        /// <param name="sysBatchSchedulerEnabled">sysBatchSchedulerEnabled.</param>
        /// <param name="systemSchedulerEnabled">systemSchedulerEnabled.</param>
        public PreemptionConfig(bool batchSchedulerEnabled = default(bool), bool serviceSchedulerEnabled = default(bool), bool sysBatchSchedulerEnabled = default(bool), bool systemSchedulerEnabled = default(bool))
        {
            this.BatchSchedulerEnabled = batchSchedulerEnabled;
            this.ServiceSchedulerEnabled = serviceSchedulerEnabled;
            this.SysBatchSchedulerEnabled = sysBatchSchedulerEnabled;
            this.SystemSchedulerEnabled = systemSchedulerEnabled;
        }

        /// <summary>
        /// Gets or Sets BatchSchedulerEnabled
        /// </summary>
        [DataMember(Name = "BatchSchedulerEnabled", EmitDefaultValue = true)]
        public bool BatchSchedulerEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ServiceSchedulerEnabled
        /// </summary>
        [DataMember(Name = "ServiceSchedulerEnabled", EmitDefaultValue = true)]
        public bool ServiceSchedulerEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SysBatchSchedulerEnabled
        /// </summary>
        [DataMember(Name = "SysBatchSchedulerEnabled", EmitDefaultValue = true)]
        public bool SysBatchSchedulerEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SystemSchedulerEnabled
        /// </summary>
        [DataMember(Name = "SystemSchedulerEnabled", EmitDefaultValue = true)]
        public bool SystemSchedulerEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreemptionConfig {\n");
            sb.Append("  BatchSchedulerEnabled: ").Append(BatchSchedulerEnabled).Append("\n");
            sb.Append("  ServiceSchedulerEnabled: ").Append(ServiceSchedulerEnabled).Append("\n");
            sb.Append("  SysBatchSchedulerEnabled: ").Append(SysBatchSchedulerEnabled).Append("\n");
            sb.Append("  SystemSchedulerEnabled: ").Append(SystemSchedulerEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreemptionConfig);
        }

        /// <summary>
        /// Returns true if PreemptionConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of PreemptionConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreemptionConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BatchSchedulerEnabled == input.BatchSchedulerEnabled ||
                    this.BatchSchedulerEnabled.Equals(input.BatchSchedulerEnabled)
                ) && 
                (
                    this.ServiceSchedulerEnabled == input.ServiceSchedulerEnabled ||
                    this.ServiceSchedulerEnabled.Equals(input.ServiceSchedulerEnabled)
                ) && 
                (
                    this.SysBatchSchedulerEnabled == input.SysBatchSchedulerEnabled ||
                    this.SysBatchSchedulerEnabled.Equals(input.SysBatchSchedulerEnabled)
                ) && 
                (
                    this.SystemSchedulerEnabled == input.SystemSchedulerEnabled ||
                    this.SystemSchedulerEnabled.Equals(input.SystemSchedulerEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BatchSchedulerEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceSchedulerEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SysBatchSchedulerEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SystemSchedulerEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
