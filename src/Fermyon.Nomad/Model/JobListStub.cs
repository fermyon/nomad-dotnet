/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// JobListStub
    /// </summary>
    [DataContract(Name = "JobListStub")]
    public partial class JobListStub : IEquatable<JobListStub>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobListStub" /> class.
        /// </summary>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="datacenters">datacenters.</param>
        /// <param name="iD">iD.</param>
        /// <param name="jobModifyIndex">jobModifyIndex.</param>
        /// <param name="jobSummary">jobSummary.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="name">name.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="parameterizedJob">parameterizedJob.</param>
        /// <param name="parentID">parentID.</param>
        /// <param name="periodic">periodic.</param>
        /// <param name="priority">priority.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="stop">stop.</param>
        /// <param name="submitTime">submitTime.</param>
        /// <param name="type">type.</param>
        public JobListStub(int createIndex = default(int), List<string> datacenters = default(List<string>), string iD = default(string), int jobModifyIndex = default(int), JobSummary jobSummary = default(JobSummary), int modifyIndex = default(int), string name = default(string), string varNamespace = default(string), bool parameterizedJob = default(bool), string parentID = default(string), bool periodic = default(bool), int priority = default(int), string status = default(string), string statusDescription = default(string), bool stop = default(bool), long submitTime = default(long), string type = default(string))
        {
            this.CreateIndex = createIndex;
            this.Datacenters = datacenters;
            this.ID = iD;
            this.JobModifyIndex = jobModifyIndex;
            this.JobSummary = jobSummary;
            this.ModifyIndex = modifyIndex;
            this.Name = name;
            this.VarNamespace = varNamespace;
            this.ParameterizedJob = parameterizedJob;
            this.ParentID = parentID;
            this.Periodic = periodic;
            this.Priority = priority;
            this.Status = status;
            this.StatusDescription = statusDescription;
            this.Stop = stop;
            this.SubmitTime = submitTime;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets Datacenters
        /// </summary>
        [DataMember(Name = "Datacenters", EmitDefaultValue = false)]
        public List<string> Datacenters { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets JobModifyIndex
        /// </summary>
        [DataMember(Name = "JobModifyIndex", EmitDefaultValue = false)]
        public int JobModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets JobSummary
        /// </summary>
        [DataMember(Name = "JobSummary", EmitDefaultValue = false)]
        public JobSummary JobSummary { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets ParameterizedJob
        /// </summary>
        [DataMember(Name = "ParameterizedJob", EmitDefaultValue = true)]
        public bool ParameterizedJob { get; set; }

        /// <summary>
        /// Gets or Sets ParentID
        /// </summary>
        [DataMember(Name = "ParentID", EmitDefaultValue = false)]
        public string ParentID { get; set; }

        /// <summary>
        /// Gets or Sets Periodic
        /// </summary>
        [DataMember(Name = "Periodic", EmitDefaultValue = true)]
        public bool Periodic { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "StatusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name = "Stop", EmitDefaultValue = true)]
        public bool Stop { get; set; }

        /// <summary>
        /// Gets or Sets SubmitTime
        /// </summary>
        [DataMember(Name = "SubmitTime", EmitDefaultValue = false)]
        public long SubmitTime { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobListStub {\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  Datacenters: ").Append(Datacenters).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  JobModifyIndex: ").Append(JobModifyIndex).Append("\n");
            sb.Append("  JobSummary: ").Append(JobSummary).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  ParameterizedJob: ").Append(ParameterizedJob).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  Periodic: ").Append(Periodic).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  SubmitTime: ").Append(SubmitTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobListStub);
        }

        /// <summary>
        /// Returns true if JobListStub instances are equal
        /// </summary>
        /// <param name="input">Instance of JobListStub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobListStub input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.Datacenters == input.Datacenters ||
                    this.Datacenters != null &&
                    input.Datacenters != null &&
                    this.Datacenters.SequenceEqual(input.Datacenters)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.JobModifyIndex == input.JobModifyIndex ||
                    this.JobModifyIndex.Equals(input.JobModifyIndex)
                ) && 
                (
                    this.JobSummary == input.JobSummary ||
                    (this.JobSummary != null &&
                    this.JobSummary.Equals(input.JobSummary))
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.ParameterizedJob == input.ParameterizedJob ||
                    this.ParameterizedJob.Equals(input.ParameterizedJob)
                ) && 
                (
                    this.ParentID == input.ParentID ||
                    (this.ParentID != null &&
                    this.ParentID.Equals(input.ParentID))
                ) && 
                (
                    this.Periodic == input.Periodic ||
                    this.Periodic.Equals(input.Periodic)
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.Stop == input.Stop ||
                    this.Stop.Equals(input.Stop)
                ) && 
                (
                    this.SubmitTime == input.SubmitTime ||
                    this.SubmitTime.Equals(input.SubmitTime)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                if (this.Datacenters != null)
                {
                    hashCode = (hashCode * 59) + this.Datacenters.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobModifyIndex.GetHashCode();
                if (this.JobSummary != null)
                {
                    hashCode = (hashCode * 59) + this.JobSummary.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ParameterizedJob.GetHashCode();
                if (this.ParentID != null)
                {
                    hashCode = (hashCode * 59) + this.ParentID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Periodic.GetHashCode();
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stop.GetHashCode();
                hashCode = (hashCode * 59) + this.SubmitTime.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // JobModifyIndex (int) maximum
            if (this.JobModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value less than or equal to 384.", new [] { "JobModifyIndex" });
            }

            // JobModifyIndex (int) minimum
            if (this.JobModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value greater than or equal to 0.", new [] { "JobModifyIndex" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            yield break;
        }
    }

}
