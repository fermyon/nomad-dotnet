/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// JobPlanResponse
    /// </summary>
    [DataContract(Name = "JobPlanResponse")]
    public partial class JobPlanResponse : IEquatable<JobPlanResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPlanResponse" /> class.
        /// </summary>
        /// <param name="annotations">annotations.</param>
        /// <param name="createdEvals">createdEvals.</param>
        /// <param name="diff">diff.</param>
        /// <param name="failedTGAllocs">failedTGAllocs.</param>
        /// <param name="jobModifyIndex">jobModifyIndex.</param>
        /// <param name="nextPeriodicLaunch">nextPeriodicLaunch.</param>
        /// <param name="warnings">warnings.</param>
        public JobPlanResponse(PlanAnnotations annotations = default(PlanAnnotations), List<Evaluation> createdEvals = default(List<Evaluation>), JobDiff diff = default(JobDiff), Dictionary<string, AllocationMetric> failedTGAllocs = default(Dictionary<string, AllocationMetric>), int jobModifyIndex = default(int), DateTime nextPeriodicLaunch = default(DateTime), string warnings = default(string))
        {
            this.Annotations = annotations;
            this.CreatedEvals = createdEvals;
            this.Diff = diff;
            this.FailedTGAllocs = failedTGAllocs;
            this.JobModifyIndex = jobModifyIndex;
            this.NextPeriodicLaunch = nextPeriodicLaunch;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name = "Annotations", EmitDefaultValue = false)]
        public PlanAnnotations Annotations { get; set; }

        /// <summary>
        /// Gets or Sets CreatedEvals
        /// </summary>
        [DataMember(Name = "CreatedEvals", EmitDefaultValue = false)]
        public List<Evaluation> CreatedEvals { get; set; }

        /// <summary>
        /// Gets or Sets Diff
        /// </summary>
        [DataMember(Name = "Diff", EmitDefaultValue = false)]
        public JobDiff Diff { get; set; }

        /// <summary>
        /// Gets or Sets FailedTGAllocs
        /// </summary>
        [DataMember(Name = "FailedTGAllocs", EmitDefaultValue = false)]
        public Dictionary<string, AllocationMetric> FailedTGAllocs { get; set; }

        /// <summary>
        /// Gets or Sets JobModifyIndex
        /// </summary>
        [DataMember(Name = "JobModifyIndex", EmitDefaultValue = false)]
        public int JobModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets NextPeriodicLaunch
        /// </summary>
        [DataMember(Name = "NextPeriodicLaunch", EmitDefaultValue = false)]
        public DateTime NextPeriodicLaunch { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public string Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobPlanResponse {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  CreatedEvals: ").Append(CreatedEvals).Append("\n");
            sb.Append("  Diff: ").Append(Diff).Append("\n");
            sb.Append("  FailedTGAllocs: ").Append(FailedTGAllocs).Append("\n");
            sb.Append("  JobModifyIndex: ").Append(JobModifyIndex).Append("\n");
            sb.Append("  NextPeriodicLaunch: ").Append(NextPeriodicLaunch).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobPlanResponse);
        }

        /// <summary>
        /// Returns true if JobPlanResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of JobPlanResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobPlanResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Annotations == input.Annotations ||
                    (this.Annotations != null &&
                    this.Annotations.Equals(input.Annotations))
                ) && 
                (
                    this.CreatedEvals == input.CreatedEvals ||
                    this.CreatedEvals != null &&
                    input.CreatedEvals != null &&
                    this.CreatedEvals.SequenceEqual(input.CreatedEvals)
                ) && 
                (
                    this.Diff == input.Diff ||
                    (this.Diff != null &&
                    this.Diff.Equals(input.Diff))
                ) && 
                (
                    this.FailedTGAllocs == input.FailedTGAllocs ||
                    this.FailedTGAllocs != null &&
                    input.FailedTGAllocs != null &&
                    this.FailedTGAllocs.SequenceEqual(input.FailedTGAllocs)
                ) && 
                (
                    this.JobModifyIndex == input.JobModifyIndex ||
                    this.JobModifyIndex.Equals(input.JobModifyIndex)
                ) && 
                (
                    this.NextPeriodicLaunch == input.NextPeriodicLaunch ||
                    (this.NextPeriodicLaunch != null &&
                    this.NextPeriodicLaunch.Equals(input.NextPeriodicLaunch))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    (this.Warnings != null &&
                    this.Warnings.Equals(input.Warnings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Annotations != null)
                {
                    hashCode = (hashCode * 59) + this.Annotations.GetHashCode();
                }
                if (this.CreatedEvals != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedEvals.GetHashCode();
                }
                if (this.Diff != null)
                {
                    hashCode = (hashCode * 59) + this.Diff.GetHashCode();
                }
                if (this.FailedTGAllocs != null)
                {
                    hashCode = (hashCode * 59) + this.FailedTGAllocs.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobModifyIndex.GetHashCode();
                if (this.NextPeriodicLaunch != null)
                {
                    hashCode = (hashCode * 59) + this.NextPeriodicLaunch.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // JobModifyIndex (int) maximum
            if (this.JobModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value less than or equal to 384.", new [] { "JobModifyIndex" });
            }

            // JobModifyIndex (int) minimum
            if (this.JobModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value greater than or equal to 0.", new [] { "JobModifyIndex" });
            }

            yield break;
        }
    }

}
