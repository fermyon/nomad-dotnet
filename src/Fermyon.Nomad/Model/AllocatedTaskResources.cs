/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// AllocatedTaskResources
    /// </summary>
    [DataContract(Name = "AllocatedTaskResources")]
    public partial class AllocatedTaskResources : IEquatable<AllocatedTaskResources>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocatedTaskResources" /> class.
        /// </summary>
        /// <param name="cpu">cpu.</param>
        /// <param name="devices">devices.</param>
        /// <param name="memory">memory.</param>
        /// <param name="networks">networks.</param>
        public AllocatedTaskResources(AllocatedCpuResources cpu = default(AllocatedCpuResources), List<AllocatedDeviceResource> devices = default(List<AllocatedDeviceResource>), AllocatedMemoryResources memory = default(AllocatedMemoryResources), List<NetworkResource> networks = default(List<NetworkResource>))
        {
            this.Cpu = cpu;
            this.Devices = devices;
            this.Memory = memory;
            this.Networks = networks;
        }

        /// <summary>
        /// Gets or Sets Cpu
        /// </summary>
        [DataMember(Name = "Cpu", EmitDefaultValue = false)]
        public AllocatedCpuResources Cpu { get; set; }

        /// <summary>
        /// Gets or Sets Devices
        /// </summary>
        [DataMember(Name = "Devices", EmitDefaultValue = false)]
        public List<AllocatedDeviceResource> Devices { get; set; }

        /// <summary>
        /// Gets or Sets Memory
        /// </summary>
        [DataMember(Name = "Memory", EmitDefaultValue = false)]
        public AllocatedMemoryResources Memory { get; set; }

        /// <summary>
        /// Gets or Sets Networks
        /// </summary>
        [DataMember(Name = "Networks", EmitDefaultValue = false)]
        public List<NetworkResource> Networks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllocatedTaskResources {\n");
            sb.Append("  Cpu: ").Append(Cpu).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocatedTaskResources);
        }

        /// <summary>
        /// Returns true if AllocatedTaskResources instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocatedTaskResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocatedTaskResources input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cpu == input.Cpu ||
                    (this.Cpu != null &&
                    this.Cpu.Equals(input.Cpu))
                ) && 
                (
                    this.Devices == input.Devices ||
                    this.Devices != null &&
                    input.Devices != null &&
                    this.Devices.SequenceEqual(input.Devices)
                ) && 
                (
                    this.Memory == input.Memory ||
                    (this.Memory != null &&
                    this.Memory.Equals(input.Memory))
                ) && 
                (
                    this.Networks == input.Networks ||
                    this.Networks != null &&
                    input.Networks != null &&
                    this.Networks.SequenceEqual(input.Networks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cpu != null)
                {
                    hashCode = (hashCode * 59) + this.Cpu.GetHashCode();
                }
                if (this.Devices != null)
                {
                    hashCode = (hashCode * 59) + this.Devices.GetHashCode();
                }
                if (this.Memory != null)
                {
                    hashCode = (hashCode * 59) + this.Memory.GetHashCode();
                }
                if (this.Networks != null)
                {
                    hashCode = (hashCode * 59) + this.Networks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
