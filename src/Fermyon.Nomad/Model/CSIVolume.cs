/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// CSIVolume
    /// </summary>
    [DataContract(Name = "CSIVolume")]
    public partial class CSIVolume : IEquatable<CSIVolume>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSIVolume" /> class.
        /// </summary>
        /// <param name="accessMode">accessMode.</param>
        /// <param name="allocations">allocations.</param>
        /// <param name="attachmentMode">attachmentMode.</param>
        /// <param name="capacity">capacity.</param>
        /// <param name="cloneID">cloneID.</param>
        /// <param name="context">context.</param>
        /// <param name="controllerRequired">controllerRequired.</param>
        /// <param name="controllersExpected">controllersExpected.</param>
        /// <param name="controllersHealthy">controllersHealthy.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="externalID">externalID.</param>
        /// <param name="iD">iD.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="mountOptions">mountOptions.</param>
        /// <param name="name">name.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="nodesExpected">nodesExpected.</param>
        /// <param name="nodesHealthy">nodesHealthy.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="pluginID">pluginID.</param>
        /// <param name="provider">provider.</param>
        /// <param name="providerVersion">providerVersion.</param>
        /// <param name="readAllocs">readAllocs.</param>
        /// <param name="requestedCapabilities">requestedCapabilities.</param>
        /// <param name="requestedCapacityMax">requestedCapacityMax.</param>
        /// <param name="requestedCapacityMin">requestedCapacityMin.</param>
        /// <param name="requestedTopologies">requestedTopologies.</param>
        /// <param name="resourceExhausted">resourceExhausted.</param>
        /// <param name="schedulable">schedulable.</param>
        /// <param name="secrets">secrets.</param>
        /// <param name="snapshotID">snapshotID.</param>
        /// <param name="topologies">topologies.</param>
        /// <param name="writeAllocs">writeAllocs.</param>
        public CSIVolume(string accessMode = default(string), List<AllocationListStub> allocations = default(List<AllocationListStub>), string attachmentMode = default(string), long capacity = default(long), string cloneID = default(string), Dictionary<string, string> context = default(Dictionary<string, string>), bool controllerRequired = default(bool), int controllersExpected = default(int), int controllersHealthy = default(int), int createIndex = default(int), string externalID = default(string), string iD = default(string), int modifyIndex = default(int), CSIMountOptions mountOptions = default(CSIMountOptions), string name = default(string), string varNamespace = default(string), int nodesExpected = default(int), int nodesHealthy = default(int), Dictionary<string, string> parameters = default(Dictionary<string, string>), string pluginID = default(string), string provider = default(string), string providerVersion = default(string), Dictionary<string, Allocation> readAllocs = default(Dictionary<string, Allocation>), List<CSIVolumeCapability> requestedCapabilities = default(List<CSIVolumeCapability>), long requestedCapacityMax = default(long), long requestedCapacityMin = default(long), CSITopologyRequest requestedTopologies = default(CSITopologyRequest), DateTime resourceExhausted = default(DateTime), bool schedulable = default(bool), Dictionary<string, string> secrets = default(Dictionary<string, string>), string snapshotID = default(string), List<CSITopology> topologies = default(List<CSITopology>), Dictionary<string, Allocation> writeAllocs = default(Dictionary<string, Allocation>))
        {
            this.AccessMode = accessMode;
            this.Allocations = allocations;
            this.AttachmentMode = attachmentMode;
            this.Capacity = capacity;
            this.CloneID = cloneID;
            this.Context = context;
            this.ControllerRequired = controllerRequired;
            this.ControllersExpected = controllersExpected;
            this.ControllersHealthy = controllersHealthy;
            this.CreateIndex = createIndex;
            this.ExternalID = externalID;
            this.ID = iD;
            this.ModifyIndex = modifyIndex;
            this.MountOptions = mountOptions;
            this.Name = name;
            this.VarNamespace = varNamespace;
            this.NodesExpected = nodesExpected;
            this.NodesHealthy = nodesHealthy;
            this.Parameters = parameters;
            this.PluginID = pluginID;
            this.Provider = provider;
            this.ProviderVersion = providerVersion;
            this.ReadAllocs = readAllocs;
            this.RequestedCapabilities = requestedCapabilities;
            this.RequestedCapacityMax = requestedCapacityMax;
            this.RequestedCapacityMin = requestedCapacityMin;
            this.RequestedTopologies = requestedTopologies;
            this.ResourceExhausted = resourceExhausted;
            this.Schedulable = schedulable;
            this.Secrets = secrets;
            this.SnapshotID = snapshotID;
            this.Topologies = topologies;
            this.WriteAllocs = writeAllocs;
        }

        /// <summary>
        /// Gets or Sets AccessMode
        /// </summary>
        [DataMember(Name = "AccessMode", EmitDefaultValue = false)]
        public string AccessMode { get; set; }

        /// <summary>
        /// Gets or Sets Allocations
        /// </summary>
        [DataMember(Name = "Allocations", EmitDefaultValue = false)]
        public List<AllocationListStub> Allocations { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentMode
        /// </summary>
        [DataMember(Name = "AttachmentMode", EmitDefaultValue = false)]
        public string AttachmentMode { get; set; }

        /// <summary>
        /// Gets or Sets Capacity
        /// </summary>
        [DataMember(Name = "Capacity", EmitDefaultValue = false)]
        public long Capacity { get; set; }

        /// <summary>
        /// Gets or Sets CloneID
        /// </summary>
        [DataMember(Name = "CloneID", EmitDefaultValue = false)]
        public string CloneID { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "Context", EmitDefaultValue = false)]
        public Dictionary<string, string> Context { get; set; }

        /// <summary>
        /// Gets or Sets ControllerRequired
        /// </summary>
        [DataMember(Name = "ControllerRequired", EmitDefaultValue = true)]
        public bool ControllerRequired { get; set; }

        /// <summary>
        /// Gets or Sets ControllersExpected
        /// </summary>
        [DataMember(Name = "ControllersExpected", EmitDefaultValue = false)]
        public int ControllersExpected { get; set; }

        /// <summary>
        /// Gets or Sets ControllersHealthy
        /// </summary>
        [DataMember(Name = "ControllersHealthy", EmitDefaultValue = false)]
        public int ControllersHealthy { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets ExternalID
        /// </summary>
        [DataMember(Name = "ExternalID", EmitDefaultValue = false)]
        public string ExternalID { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets MountOptions
        /// </summary>
        [DataMember(Name = "MountOptions", EmitDefaultValue = false)]
        public CSIMountOptions MountOptions { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets NodesExpected
        /// </summary>
        [DataMember(Name = "NodesExpected", EmitDefaultValue = false)]
        public int NodesExpected { get; set; }

        /// <summary>
        /// Gets or Sets NodesHealthy
        /// </summary>
        [DataMember(Name = "NodesHealthy", EmitDefaultValue = false)]
        public int NodesHealthy { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "Parameters", EmitDefaultValue = false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets PluginID
        /// </summary>
        [DataMember(Name = "PluginID", EmitDefaultValue = false)]
        public string PluginID { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "Provider", EmitDefaultValue = false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets ProviderVersion
        /// </summary>
        [DataMember(Name = "ProviderVersion", EmitDefaultValue = false)]
        public string ProviderVersion { get; set; }

        /// <summary>
        /// Gets or Sets ReadAllocs
        /// </summary>
        [DataMember(Name = "ReadAllocs", EmitDefaultValue = false)]
        public Dictionary<string, Allocation> ReadAllocs { get; set; }

        /// <summary>
        /// Gets or Sets RequestedCapabilities
        /// </summary>
        [DataMember(Name = "RequestedCapabilities", EmitDefaultValue = false)]
        public List<CSIVolumeCapability> RequestedCapabilities { get; set; }

        /// <summary>
        /// Gets or Sets RequestedCapacityMax
        /// </summary>
        [DataMember(Name = "RequestedCapacityMax", EmitDefaultValue = false)]
        public long RequestedCapacityMax { get; set; }

        /// <summary>
        /// Gets or Sets RequestedCapacityMin
        /// </summary>
        [DataMember(Name = "RequestedCapacityMin", EmitDefaultValue = false)]
        public long RequestedCapacityMin { get; set; }

        /// <summary>
        /// Gets or Sets RequestedTopologies
        /// </summary>
        [DataMember(Name = "RequestedTopologies", EmitDefaultValue = false)]
        public CSITopologyRequest RequestedTopologies { get; set; }

        /// <summary>
        /// Gets or Sets ResourceExhausted
        /// </summary>
        [DataMember(Name = "ResourceExhausted", EmitDefaultValue = false)]
        public DateTime ResourceExhausted { get; set; }

        /// <summary>
        /// Gets or Sets Schedulable
        /// </summary>
        [DataMember(Name = "Schedulable", EmitDefaultValue = true)]
        public bool Schedulable { get; set; }

        /// <summary>
        /// Gets or Sets Secrets
        /// </summary>
        [DataMember(Name = "Secrets", EmitDefaultValue = false)]
        public Dictionary<string, string> Secrets { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotID
        /// </summary>
        [DataMember(Name = "SnapshotID", EmitDefaultValue = false)]
        public string SnapshotID { get; set; }

        /// <summary>
        /// Gets or Sets Topologies
        /// </summary>
        [DataMember(Name = "Topologies", EmitDefaultValue = false)]
        public List<CSITopology> Topologies { get; set; }

        /// <summary>
        /// Gets or Sets WriteAllocs
        /// </summary>
        [DataMember(Name = "WriteAllocs", EmitDefaultValue = false)]
        public Dictionary<string, Allocation> WriteAllocs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CSIVolume {\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("  Allocations: ").Append(Allocations).Append("\n");
            sb.Append("  AttachmentMode: ").Append(AttachmentMode).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  CloneID: ").Append(CloneID).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ControllerRequired: ").Append(ControllerRequired).Append("\n");
            sb.Append("  ControllersExpected: ").Append(ControllersExpected).Append("\n");
            sb.Append("  ControllersHealthy: ").Append(ControllersHealthy).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  ExternalID: ").Append(ExternalID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  MountOptions: ").Append(MountOptions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  NodesExpected: ").Append(NodesExpected).Append("\n");
            sb.Append("  NodesHealthy: ").Append(NodesHealthy).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  PluginID: ").Append(PluginID).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  ProviderVersion: ").Append(ProviderVersion).Append("\n");
            sb.Append("  ReadAllocs: ").Append(ReadAllocs).Append("\n");
            sb.Append("  RequestedCapabilities: ").Append(RequestedCapabilities).Append("\n");
            sb.Append("  RequestedCapacityMax: ").Append(RequestedCapacityMax).Append("\n");
            sb.Append("  RequestedCapacityMin: ").Append(RequestedCapacityMin).Append("\n");
            sb.Append("  RequestedTopologies: ").Append(RequestedTopologies).Append("\n");
            sb.Append("  ResourceExhausted: ").Append(ResourceExhausted).Append("\n");
            sb.Append("  Schedulable: ").Append(Schedulable).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  SnapshotID: ").Append(SnapshotID).Append("\n");
            sb.Append("  Topologies: ").Append(Topologies).Append("\n");
            sb.Append("  WriteAllocs: ").Append(WriteAllocs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSIVolume);
        }

        /// <summary>
        /// Returns true if CSIVolume instances are equal
        /// </summary>
        /// <param name="input">Instance of CSIVolume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSIVolume input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessMode == input.AccessMode ||
                    (this.AccessMode != null &&
                    this.AccessMode.Equals(input.AccessMode))
                ) && 
                (
                    this.Allocations == input.Allocations ||
                    this.Allocations != null &&
                    input.Allocations != null &&
                    this.Allocations.SequenceEqual(input.Allocations)
                ) && 
                (
                    this.AttachmentMode == input.AttachmentMode ||
                    (this.AttachmentMode != null &&
                    this.AttachmentMode.Equals(input.AttachmentMode))
                ) && 
                (
                    this.Capacity == input.Capacity ||
                    this.Capacity.Equals(input.Capacity)
                ) && 
                (
                    this.CloneID == input.CloneID ||
                    (this.CloneID != null &&
                    this.CloneID.Equals(input.CloneID))
                ) && 
                (
                    this.Context == input.Context ||
                    this.Context != null &&
                    input.Context != null &&
                    this.Context.SequenceEqual(input.Context)
                ) && 
                (
                    this.ControllerRequired == input.ControllerRequired ||
                    this.ControllerRequired.Equals(input.ControllerRequired)
                ) && 
                (
                    this.ControllersExpected == input.ControllersExpected ||
                    this.ControllersExpected.Equals(input.ControllersExpected)
                ) && 
                (
                    this.ControllersHealthy == input.ControllersHealthy ||
                    this.ControllersHealthy.Equals(input.ControllersHealthy)
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.ExternalID == input.ExternalID ||
                    (this.ExternalID != null &&
                    this.ExternalID.Equals(input.ExternalID))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.MountOptions == input.MountOptions ||
                    (this.MountOptions != null &&
                    this.MountOptions.Equals(input.MountOptions))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.NodesExpected == input.NodesExpected ||
                    this.NodesExpected.Equals(input.NodesExpected)
                ) && 
                (
                    this.NodesHealthy == input.NodesHealthy ||
                    this.NodesHealthy.Equals(input.NodesHealthy)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.PluginID == input.PluginID ||
                    (this.PluginID != null &&
                    this.PluginID.Equals(input.PluginID))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.ProviderVersion == input.ProviderVersion ||
                    (this.ProviderVersion != null &&
                    this.ProviderVersion.Equals(input.ProviderVersion))
                ) && 
                (
                    this.ReadAllocs == input.ReadAllocs ||
                    this.ReadAllocs != null &&
                    input.ReadAllocs != null &&
                    this.ReadAllocs.SequenceEqual(input.ReadAllocs)
                ) && 
                (
                    this.RequestedCapabilities == input.RequestedCapabilities ||
                    this.RequestedCapabilities != null &&
                    input.RequestedCapabilities != null &&
                    this.RequestedCapabilities.SequenceEqual(input.RequestedCapabilities)
                ) && 
                (
                    this.RequestedCapacityMax == input.RequestedCapacityMax ||
                    this.RequestedCapacityMax.Equals(input.RequestedCapacityMax)
                ) && 
                (
                    this.RequestedCapacityMin == input.RequestedCapacityMin ||
                    this.RequestedCapacityMin.Equals(input.RequestedCapacityMin)
                ) && 
                (
                    this.RequestedTopologies == input.RequestedTopologies ||
                    (this.RequestedTopologies != null &&
                    this.RequestedTopologies.Equals(input.RequestedTopologies))
                ) && 
                (
                    this.ResourceExhausted == input.ResourceExhausted ||
                    (this.ResourceExhausted != null &&
                    this.ResourceExhausted.Equals(input.ResourceExhausted))
                ) && 
                (
                    this.Schedulable == input.Schedulable ||
                    this.Schedulable.Equals(input.Schedulable)
                ) && 
                (
                    this.Secrets == input.Secrets ||
                    this.Secrets != null &&
                    input.Secrets != null &&
                    this.Secrets.SequenceEqual(input.Secrets)
                ) && 
                (
                    this.SnapshotID == input.SnapshotID ||
                    (this.SnapshotID != null &&
                    this.SnapshotID.Equals(input.SnapshotID))
                ) && 
                (
                    this.Topologies == input.Topologies ||
                    this.Topologies != null &&
                    input.Topologies != null &&
                    this.Topologies.SequenceEqual(input.Topologies)
                ) && 
                (
                    this.WriteAllocs == input.WriteAllocs ||
                    this.WriteAllocs != null &&
                    input.WriteAllocs != null &&
                    this.WriteAllocs.SequenceEqual(input.WriteAllocs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessMode != null)
                {
                    hashCode = (hashCode * 59) + this.AccessMode.GetHashCode();
                }
                if (this.Allocations != null)
                {
                    hashCode = (hashCode * 59) + this.Allocations.GetHashCode();
                }
                if (this.AttachmentMode != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Capacity.GetHashCode();
                if (this.CloneID != null)
                {
                    hashCode = (hashCode * 59) + this.CloneID.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ControllerRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.ControllersExpected.GetHashCode();
                hashCode = (hashCode * 59) + this.ControllersHealthy.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                if (this.ExternalID != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalID.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                if (this.MountOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MountOptions.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NodesExpected.GetHashCode();
                hashCode = (hashCode * 59) + this.NodesHealthy.GetHashCode();
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.PluginID != null)
                {
                    hashCode = (hashCode * 59) + this.PluginID.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.ProviderVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ProviderVersion.GetHashCode();
                }
                if (this.ReadAllocs != null)
                {
                    hashCode = (hashCode * 59) + this.ReadAllocs.GetHashCode();
                }
                if (this.RequestedCapabilities != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedCapabilities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestedCapacityMax.GetHashCode();
                hashCode = (hashCode * 59) + this.RequestedCapacityMin.GetHashCode();
                if (this.RequestedTopologies != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedTopologies.GetHashCode();
                }
                if (this.ResourceExhausted != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceExhausted.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Schedulable.GetHashCode();
                if (this.Secrets != null)
                {
                    hashCode = (hashCode * 59) + this.Secrets.GetHashCode();
                }
                if (this.SnapshotID != null)
                {
                    hashCode = (hashCode * 59) + this.SnapshotID.GetHashCode();
                }
                if (this.Topologies != null)
                {
                    hashCode = (hashCode * 59) + this.Topologies.GetHashCode();
                }
                if (this.WriteAllocs != null)
                {
                    hashCode = (hashCode * 59) + this.WriteAllocs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            yield break;
        }
    }

}
