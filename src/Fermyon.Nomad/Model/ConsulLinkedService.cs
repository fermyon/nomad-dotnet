/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ConsulLinkedService
    /// </summary>
    [DataContract(Name = "ConsulLinkedService")]
    public partial class ConsulLinkedService : IEquatable<ConsulLinkedService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsulLinkedService" /> class.
        /// </summary>
        /// <param name="cAFile">cAFile.</param>
        /// <param name="certFile">certFile.</param>
        /// <param name="keyFile">keyFile.</param>
        /// <param name="name">name.</param>
        /// <param name="sNI">sNI.</param>
        public ConsulLinkedService(string cAFile = default(string), string certFile = default(string), string keyFile = default(string), string name = default(string), string sNI = default(string))
        {
            this.CAFile = cAFile;
            this.CertFile = certFile;
            this.KeyFile = keyFile;
            this.Name = name;
            this.SNI = sNI;
        }

        /// <summary>
        /// Gets or Sets CAFile
        /// </summary>
        [DataMember(Name = "CAFile", EmitDefaultValue = false)]
        public string CAFile { get; set; }

        /// <summary>
        /// Gets or Sets CertFile
        /// </summary>
        [DataMember(Name = "CertFile", EmitDefaultValue = false)]
        public string CertFile { get; set; }

        /// <summary>
        /// Gets or Sets KeyFile
        /// </summary>
        [DataMember(Name = "KeyFile", EmitDefaultValue = false)]
        public string KeyFile { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SNI
        /// </summary>
        [DataMember(Name = "SNI", EmitDefaultValue = false)]
        public string SNI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsulLinkedService {\n");
            sb.Append("  CAFile: ").Append(CAFile).Append("\n");
            sb.Append("  CertFile: ").Append(CertFile).Append("\n");
            sb.Append("  KeyFile: ").Append(KeyFile).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SNI: ").Append(SNI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsulLinkedService);
        }

        /// <summary>
        /// Returns true if ConsulLinkedService instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsulLinkedService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsulLinkedService input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CAFile == input.CAFile ||
                    (this.CAFile != null &&
                    this.CAFile.Equals(input.CAFile))
                ) && 
                (
                    this.CertFile == input.CertFile ||
                    (this.CertFile != null &&
                    this.CertFile.Equals(input.CertFile))
                ) && 
                (
                    this.KeyFile == input.KeyFile ||
                    (this.KeyFile != null &&
                    this.KeyFile.Equals(input.KeyFile))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SNI == input.SNI ||
                    (this.SNI != null &&
                    this.SNI.Equals(input.SNI))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CAFile != null)
                {
                    hashCode = (hashCode * 59) + this.CAFile.GetHashCode();
                }
                if (this.CertFile != null)
                {
                    hashCode = (hashCode * 59) + this.CertFile.GetHashCode();
                }
                if (this.KeyFile != null)
                {
                    hashCode = (hashCode * 59) + this.KeyFile.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SNI != null)
                {
                    hashCode = (hashCode * 59) + this.SNI.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
