/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ScalingEvent
    /// </summary>
    [DataContract(Name = "ScalingEvent")]
    public partial class ScalingEvent : IEquatable<ScalingEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScalingEvent" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="error">error.</param>
        /// <param name="evalID">evalID.</param>
        /// <param name="message">message.</param>
        /// <param name="meta">meta.</param>
        /// <param name="previousCount">previousCount.</param>
        /// <param name="time">time.</param>
        public ScalingEvent(long count = default(long), int createIndex = default(int), bool error = default(bool), string evalID = default(string), string message = default(string), Dictionary<string, Object> meta = default(Dictionary<string, Object>), long previousCount = default(long), int time = default(int))
        {
            this.Count = count;
            this.CreateIndex = createIndex;
            this.Error = error;
            this.EvalID = evalID;
            this.Message = message;
            this.Meta = meta;
            this.PreviousCount = previousCount;
            this.Time = time;
        }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "Error", EmitDefaultValue = true)]
        public bool Error { get; set; }

        /// <summary>
        /// Gets or Sets EvalID
        /// </summary>
        [DataMember(Name = "EvalID", EmitDefaultValue = false)]
        public string EvalID { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "Message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "Meta", EmitDefaultValue = false)]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Gets or Sets PreviousCount
        /// </summary>
        [DataMember(Name = "PreviousCount", EmitDefaultValue = false)]
        public long PreviousCount { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "Time", EmitDefaultValue = false)]
        public int Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScalingEvent {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  EvalID: ").Append(EvalID).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  PreviousCount: ").Append(PreviousCount).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScalingEvent);
        }

        /// <summary>
        /// Returns true if ScalingEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ScalingEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScalingEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.Error == input.Error ||
                    this.Error.Equals(input.Error)
                ) && 
                (
                    this.EvalID == input.EvalID ||
                    (this.EvalID != null &&
                    this.EvalID.Equals(input.EvalID))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.PreviousCount == input.PreviousCount ||
                    this.PreviousCount.Equals(input.PreviousCount)
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.Error.GetHashCode();
                if (this.EvalID != null)
                {
                    hashCode = (hashCode * 59) + this.EvalID.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PreviousCount.GetHashCode();
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // Time (int) maximum
            if (this.Time > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value less than or equal to 384.", new [] { "Time" });
            }

            // Time (int) minimum
            if (this.Time < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value greater than or equal to 0.", new [] { "Time" });
            }

            yield break;
        }
    }

}
