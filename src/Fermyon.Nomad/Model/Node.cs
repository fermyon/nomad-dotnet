/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Node
    /// </summary>
    [DataContract(Name = "Node")]
    public partial class Node : IEquatable<Node>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Node" /> class.
        /// </summary>
        /// <param name="attributes">attributes.</param>
        /// <param name="cSIControllerPlugins">cSIControllerPlugins.</param>
        /// <param name="cSINodePlugins">cSINodePlugins.</param>
        /// <param name="cgroupParent">cgroupParent.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="datacenter">datacenter.</param>
        /// <param name="drain">drain.</param>
        /// <param name="drainStrategy">drainStrategy.</param>
        /// <param name="drivers">drivers.</param>
        /// <param name="events">events.</param>
        /// <param name="hTTPAddr">hTTPAddr.</param>
        /// <param name="hostNetworks">hostNetworks.</param>
        /// <param name="hostVolumes">hostVolumes.</param>
        /// <param name="iD">iD.</param>
        /// <param name="lastDrain">lastDrain.</param>
        /// <param name="links">links.</param>
        /// <param name="meta">meta.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="name">name.</param>
        /// <param name="nodeClass">nodeClass.</param>
        /// <param name="nodeResources">nodeResources.</param>
        /// <param name="reserved">reserved.</param>
        /// <param name="reservedResources">reservedResources.</param>
        /// <param name="resources">resources.</param>
        /// <param name="schedulingEligibility">schedulingEligibility.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="statusUpdatedAt">statusUpdatedAt.</param>
        /// <param name="tLSEnabled">tLSEnabled.</param>
        public Node(Dictionary<string, string> attributes = default(Dictionary<string, string>), Dictionary<string, CSIInfo> cSIControllerPlugins = default(Dictionary<string, CSIInfo>), Dictionary<string, CSIInfo> cSINodePlugins = default(Dictionary<string, CSIInfo>), string cgroupParent = default(string), int createIndex = default(int), string datacenter = default(string), bool drain = default(bool), DrainStrategy drainStrategy = default(DrainStrategy), Dictionary<string, DriverInfo> drivers = default(Dictionary<string, DriverInfo>), List<NodeEvent> events = default(List<NodeEvent>), string hTTPAddr = default(string), Dictionary<string, HostNetworkInfo> hostNetworks = default(Dictionary<string, HostNetworkInfo>), Dictionary<string, HostVolumeInfo> hostVolumes = default(Dictionary<string, HostVolumeInfo>), string iD = default(string), DrainMetadata lastDrain = default(DrainMetadata), Dictionary<string, string> links = default(Dictionary<string, string>), Dictionary<string, string> meta = default(Dictionary<string, string>), int modifyIndex = default(int), string name = default(string), string nodeClass = default(string), NodeResources nodeResources = default(NodeResources), Resources reserved = default(Resources), NodeReservedResources reservedResources = default(NodeReservedResources), Resources resources = default(Resources), string schedulingEligibility = default(string), string status = default(string), string statusDescription = default(string), long statusUpdatedAt = default(long), bool tLSEnabled = default(bool))
        {
            this.Attributes = attributes;
            this.CSIControllerPlugins = cSIControllerPlugins;
            this.CSINodePlugins = cSINodePlugins;
            this.CgroupParent = cgroupParent;
            this.CreateIndex = createIndex;
            this.Datacenter = datacenter;
            this.Drain = drain;
            this.DrainStrategy = drainStrategy;
            this.Drivers = drivers;
            this.Events = events;
            this.HTTPAddr = hTTPAddr;
            this.HostNetworks = hostNetworks;
            this.HostVolumes = hostVolumes;
            this.ID = iD;
            this.LastDrain = lastDrain;
            this.Links = links;
            this.Meta = meta;
            this.ModifyIndex = modifyIndex;
            this.Name = name;
            this.NodeClass = nodeClass;
            this.NodeResources = nodeResources;
            this.Reserved = reserved;
            this.ReservedResources = reservedResources;
            this.Resources = resources;
            this.SchedulingEligibility = schedulingEligibility;
            this.Status = status;
            this.StatusDescription = statusDescription;
            this.StatusUpdatedAt = statusUpdatedAt;
            this.TLSEnabled = tLSEnabled;
        }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "Attributes", EmitDefaultValue = false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets CSIControllerPlugins
        /// </summary>
        [DataMember(Name = "CSIControllerPlugins", EmitDefaultValue = false)]
        public Dictionary<string, CSIInfo> CSIControllerPlugins { get; set; }

        /// <summary>
        /// Gets or Sets CSINodePlugins
        /// </summary>
        [DataMember(Name = "CSINodePlugins", EmitDefaultValue = false)]
        public Dictionary<string, CSIInfo> CSINodePlugins { get; set; }

        /// <summary>
        /// Gets or Sets CgroupParent
        /// </summary>
        [DataMember(Name = "CgroupParent", EmitDefaultValue = false)]
        public string CgroupParent { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets Datacenter
        /// </summary>
        [DataMember(Name = "Datacenter", EmitDefaultValue = false)]
        public string Datacenter { get; set; }

        /// <summary>
        /// Gets or Sets Drain
        /// </summary>
        [DataMember(Name = "Drain", EmitDefaultValue = true)]
        public bool Drain { get; set; }

        /// <summary>
        /// Gets or Sets DrainStrategy
        /// </summary>
        [DataMember(Name = "DrainStrategy", EmitDefaultValue = false)]
        public DrainStrategy DrainStrategy { get; set; }

        /// <summary>
        /// Gets or Sets Drivers
        /// </summary>
        [DataMember(Name = "Drivers", EmitDefaultValue = false)]
        public Dictionary<string, DriverInfo> Drivers { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "Events", EmitDefaultValue = false)]
        public List<NodeEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets HTTPAddr
        /// </summary>
        [DataMember(Name = "HTTPAddr", EmitDefaultValue = false)]
        public string HTTPAddr { get; set; }

        /// <summary>
        /// Gets or Sets HostNetworks
        /// </summary>
        [DataMember(Name = "HostNetworks", EmitDefaultValue = false)]
        public Dictionary<string, HostNetworkInfo> HostNetworks { get; set; }

        /// <summary>
        /// Gets or Sets HostVolumes
        /// </summary>
        [DataMember(Name = "HostVolumes", EmitDefaultValue = false)]
        public Dictionary<string, HostVolumeInfo> HostVolumes { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets LastDrain
        /// </summary>
        [DataMember(Name = "LastDrain", EmitDefaultValue = false)]
        public DrainMetadata LastDrain { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "Links", EmitDefaultValue = false)]
        public Dictionary<string, string> Links { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "Meta", EmitDefaultValue = false)]
        public Dictionary<string, string> Meta { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NodeClass
        /// </summary>
        [DataMember(Name = "NodeClass", EmitDefaultValue = false)]
        public string NodeClass { get; set; }

        /// <summary>
        /// Gets or Sets NodeResources
        /// </summary>
        [DataMember(Name = "NodeResources", EmitDefaultValue = false)]
        public NodeResources NodeResources { get; set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [DataMember(Name = "Reserved", EmitDefaultValue = false)]
        public Resources Reserved { get; set; }

        /// <summary>
        /// Gets or Sets ReservedResources
        /// </summary>
        [DataMember(Name = "ReservedResources", EmitDefaultValue = false)]
        public NodeReservedResources ReservedResources { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name = "Resources", EmitDefaultValue = false)]
        public Resources Resources { get; set; }

        /// <summary>
        /// Gets or Sets SchedulingEligibility
        /// </summary>
        [DataMember(Name = "SchedulingEligibility", EmitDefaultValue = false)]
        public string SchedulingEligibility { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "StatusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets StatusUpdatedAt
        /// </summary>
        [DataMember(Name = "StatusUpdatedAt", EmitDefaultValue = false)]
        public long StatusUpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TLSEnabled
        /// </summary>
        [DataMember(Name = "TLSEnabled", EmitDefaultValue = true)]
        public bool TLSEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Node {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CSIControllerPlugins: ").Append(CSIControllerPlugins).Append("\n");
            sb.Append("  CSINodePlugins: ").Append(CSINodePlugins).Append("\n");
            sb.Append("  CgroupParent: ").Append(CgroupParent).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  Datacenter: ").Append(Datacenter).Append("\n");
            sb.Append("  Drain: ").Append(Drain).Append("\n");
            sb.Append("  DrainStrategy: ").Append(DrainStrategy).Append("\n");
            sb.Append("  Drivers: ").Append(Drivers).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  HTTPAddr: ").Append(HTTPAddr).Append("\n");
            sb.Append("  HostNetworks: ").Append(HostNetworks).Append("\n");
            sb.Append("  HostVolumes: ").Append(HostVolumes).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LastDrain: ").Append(LastDrain).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NodeClass: ").Append(NodeClass).Append("\n");
            sb.Append("  NodeResources: ").Append(NodeResources).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("  ReservedResources: ").Append(ReservedResources).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  SchedulingEligibility: ").Append(SchedulingEligibility).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  StatusUpdatedAt: ").Append(StatusUpdatedAt).Append("\n");
            sb.Append("  TLSEnabled: ").Append(TLSEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Node);
        }

        /// <summary>
        /// Returns true if Node instances are equal
        /// </summary>
        /// <param name="input">Instance of Node to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Node input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.CSIControllerPlugins == input.CSIControllerPlugins ||
                    this.CSIControllerPlugins != null &&
                    input.CSIControllerPlugins != null &&
                    this.CSIControllerPlugins.SequenceEqual(input.CSIControllerPlugins)
                ) && 
                (
                    this.CSINodePlugins == input.CSINodePlugins ||
                    this.CSINodePlugins != null &&
                    input.CSINodePlugins != null &&
                    this.CSINodePlugins.SequenceEqual(input.CSINodePlugins)
                ) && 
                (
                    this.CgroupParent == input.CgroupParent ||
                    (this.CgroupParent != null &&
                    this.CgroupParent.Equals(input.CgroupParent))
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.Datacenter == input.Datacenter ||
                    (this.Datacenter != null &&
                    this.Datacenter.Equals(input.Datacenter))
                ) && 
                (
                    this.Drain == input.Drain ||
                    this.Drain.Equals(input.Drain)
                ) && 
                (
                    this.DrainStrategy == input.DrainStrategy ||
                    (this.DrainStrategy != null &&
                    this.DrainStrategy.Equals(input.DrainStrategy))
                ) && 
                (
                    this.Drivers == input.Drivers ||
                    this.Drivers != null &&
                    input.Drivers != null &&
                    this.Drivers.SequenceEqual(input.Drivers)
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.HTTPAddr == input.HTTPAddr ||
                    (this.HTTPAddr != null &&
                    this.HTTPAddr.Equals(input.HTTPAddr))
                ) && 
                (
                    this.HostNetworks == input.HostNetworks ||
                    this.HostNetworks != null &&
                    input.HostNetworks != null &&
                    this.HostNetworks.SequenceEqual(input.HostNetworks)
                ) && 
                (
                    this.HostVolumes == input.HostVolumes ||
                    this.HostVolumes != null &&
                    input.HostVolumes != null &&
                    this.HostVolumes.SequenceEqual(input.HostVolumes)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.LastDrain == input.LastDrain ||
                    (this.LastDrain != null &&
                    this.LastDrain.Equals(input.LastDrain))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NodeClass == input.NodeClass ||
                    (this.NodeClass != null &&
                    this.NodeClass.Equals(input.NodeClass))
                ) && 
                (
                    this.NodeResources == input.NodeResources ||
                    (this.NodeResources != null &&
                    this.NodeResources.Equals(input.NodeResources))
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    (this.Reserved != null &&
                    this.Reserved.Equals(input.Reserved))
                ) && 
                (
                    this.ReservedResources == input.ReservedResources ||
                    (this.ReservedResources != null &&
                    this.ReservedResources.Equals(input.ReservedResources))
                ) && 
                (
                    this.Resources == input.Resources ||
                    (this.Resources != null &&
                    this.Resources.Equals(input.Resources))
                ) && 
                (
                    this.SchedulingEligibility == input.SchedulingEligibility ||
                    (this.SchedulingEligibility != null &&
                    this.SchedulingEligibility.Equals(input.SchedulingEligibility))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.StatusUpdatedAt == input.StatusUpdatedAt ||
                    this.StatusUpdatedAt.Equals(input.StatusUpdatedAt)
                ) && 
                (
                    this.TLSEnabled == input.TLSEnabled ||
                    this.TLSEnabled.Equals(input.TLSEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.CSIControllerPlugins != null)
                {
                    hashCode = (hashCode * 59) + this.CSIControllerPlugins.GetHashCode();
                }
                if (this.CSINodePlugins != null)
                {
                    hashCode = (hashCode * 59) + this.CSINodePlugins.GetHashCode();
                }
                if (this.CgroupParent != null)
                {
                    hashCode = (hashCode * 59) + this.CgroupParent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                if (this.Datacenter != null)
                {
                    hashCode = (hashCode * 59) + this.Datacenter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Drain.GetHashCode();
                if (this.DrainStrategy != null)
                {
                    hashCode = (hashCode * 59) + this.DrainStrategy.GetHashCode();
                }
                if (this.Drivers != null)
                {
                    hashCode = (hashCode * 59) + this.Drivers.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.HTTPAddr != null)
                {
                    hashCode = (hashCode * 59) + this.HTTPAddr.GetHashCode();
                }
                if (this.HostNetworks != null)
                {
                    hashCode = (hashCode * 59) + this.HostNetworks.GetHashCode();
                }
                if (this.HostVolumes != null)
                {
                    hashCode = (hashCode * 59) + this.HostVolumes.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                if (this.LastDrain != null)
                {
                    hashCode = (hashCode * 59) + this.LastDrain.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NodeClass != null)
                {
                    hashCode = (hashCode * 59) + this.NodeClass.GetHashCode();
                }
                if (this.NodeResources != null)
                {
                    hashCode = (hashCode * 59) + this.NodeResources.GetHashCode();
                }
                if (this.Reserved != null)
                {
                    hashCode = (hashCode * 59) + this.Reserved.GetHashCode();
                }
                if (this.ReservedResources != null)
                {
                    hashCode = (hashCode * 59) + this.ReservedResources.GetHashCode();
                }
                if (this.Resources != null)
                {
                    hashCode = (hashCode * 59) + this.Resources.GetHashCode();
                }
                if (this.SchedulingEligibility != null)
                {
                    hashCode = (hashCode * 59) + this.SchedulingEligibility.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusUpdatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.TLSEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            yield break;
        }
    }

}
