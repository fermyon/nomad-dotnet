/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// CSIInfo
    /// </summary>
    [DataContract(Name = "CSIInfo")]
    public partial class CSIInfo : IEquatable<CSIInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSIInfo" /> class.
        /// </summary>
        /// <param name="allocID">allocID.</param>
        /// <param name="controllerInfo">controllerInfo.</param>
        /// <param name="healthDescription">healthDescription.</param>
        /// <param name="healthy">healthy.</param>
        /// <param name="nodeInfo">nodeInfo.</param>
        /// <param name="pluginID">pluginID.</param>
        /// <param name="requiresControllerPlugin">requiresControllerPlugin.</param>
        /// <param name="requiresTopologies">requiresTopologies.</param>
        /// <param name="updateTime">updateTime.</param>
        public CSIInfo(string allocID = default(string), CSIControllerInfo controllerInfo = default(CSIControllerInfo), string healthDescription = default(string), bool healthy = default(bool), CSINodeInfo nodeInfo = default(CSINodeInfo), string pluginID = default(string), bool requiresControllerPlugin = default(bool), bool requiresTopologies = default(bool), DateTime updateTime = default(DateTime))
        {
            this.AllocID = allocID;
            this.ControllerInfo = controllerInfo;
            this.HealthDescription = healthDescription;
            this.Healthy = healthy;
            this.NodeInfo = nodeInfo;
            this.PluginID = pluginID;
            this.RequiresControllerPlugin = requiresControllerPlugin;
            this.RequiresTopologies = requiresTopologies;
            this.UpdateTime = updateTime;
        }

        /// <summary>
        /// Gets or Sets AllocID
        /// </summary>
        [DataMember(Name = "AllocID", EmitDefaultValue = false)]
        public string AllocID { get; set; }

        /// <summary>
        /// Gets or Sets ControllerInfo
        /// </summary>
        [DataMember(Name = "ControllerInfo", EmitDefaultValue = false)]
        public CSIControllerInfo ControllerInfo { get; set; }

        /// <summary>
        /// Gets or Sets HealthDescription
        /// </summary>
        [DataMember(Name = "HealthDescription", EmitDefaultValue = false)]
        public string HealthDescription { get; set; }

        /// <summary>
        /// Gets or Sets Healthy
        /// </summary>
        [DataMember(Name = "Healthy", EmitDefaultValue = true)]
        public bool Healthy { get; set; }

        /// <summary>
        /// Gets or Sets NodeInfo
        /// </summary>
        [DataMember(Name = "NodeInfo", EmitDefaultValue = false)]
        public CSINodeInfo NodeInfo { get; set; }

        /// <summary>
        /// Gets or Sets PluginID
        /// </summary>
        [DataMember(Name = "PluginID", EmitDefaultValue = false)]
        public string PluginID { get; set; }

        /// <summary>
        /// Gets or Sets RequiresControllerPlugin
        /// </summary>
        [DataMember(Name = "RequiresControllerPlugin", EmitDefaultValue = true)]
        public bool RequiresControllerPlugin { get; set; }

        /// <summary>
        /// Gets or Sets RequiresTopologies
        /// </summary>
        [DataMember(Name = "RequiresTopologies", EmitDefaultValue = true)]
        public bool RequiresTopologies { get; set; }

        /// <summary>
        /// Gets or Sets UpdateTime
        /// </summary>
        [DataMember(Name = "UpdateTime", EmitDefaultValue = false)]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CSIInfo {\n");
            sb.Append("  AllocID: ").Append(AllocID).Append("\n");
            sb.Append("  ControllerInfo: ").Append(ControllerInfo).Append("\n");
            sb.Append("  HealthDescription: ").Append(HealthDescription).Append("\n");
            sb.Append("  Healthy: ").Append(Healthy).Append("\n");
            sb.Append("  NodeInfo: ").Append(NodeInfo).Append("\n");
            sb.Append("  PluginID: ").Append(PluginID).Append("\n");
            sb.Append("  RequiresControllerPlugin: ").Append(RequiresControllerPlugin).Append("\n");
            sb.Append("  RequiresTopologies: ").Append(RequiresTopologies).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSIInfo);
        }

        /// <summary>
        /// Returns true if CSIInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CSIInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSIInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllocID == input.AllocID ||
                    (this.AllocID != null &&
                    this.AllocID.Equals(input.AllocID))
                ) && 
                (
                    this.ControllerInfo == input.ControllerInfo ||
                    (this.ControllerInfo != null &&
                    this.ControllerInfo.Equals(input.ControllerInfo))
                ) && 
                (
                    this.HealthDescription == input.HealthDescription ||
                    (this.HealthDescription != null &&
                    this.HealthDescription.Equals(input.HealthDescription))
                ) && 
                (
                    this.Healthy == input.Healthy ||
                    this.Healthy.Equals(input.Healthy)
                ) && 
                (
                    this.NodeInfo == input.NodeInfo ||
                    (this.NodeInfo != null &&
                    this.NodeInfo.Equals(input.NodeInfo))
                ) && 
                (
                    this.PluginID == input.PluginID ||
                    (this.PluginID != null &&
                    this.PluginID.Equals(input.PluginID))
                ) && 
                (
                    this.RequiresControllerPlugin == input.RequiresControllerPlugin ||
                    this.RequiresControllerPlugin.Equals(input.RequiresControllerPlugin)
                ) && 
                (
                    this.RequiresTopologies == input.RequiresTopologies ||
                    this.RequiresTopologies.Equals(input.RequiresTopologies)
                ) && 
                (
                    this.UpdateTime == input.UpdateTime ||
                    (this.UpdateTime != null &&
                    this.UpdateTime.Equals(input.UpdateTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocID != null)
                {
                    hashCode = (hashCode * 59) + this.AllocID.GetHashCode();
                }
                if (this.ControllerInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ControllerInfo.GetHashCode();
                }
                if (this.HealthDescription != null)
                {
                    hashCode = (hashCode * 59) + this.HealthDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Healthy.GetHashCode();
                if (this.NodeInfo != null)
                {
                    hashCode = (hashCode * 59) + this.NodeInfo.GetHashCode();
                }
                if (this.PluginID != null)
                {
                    hashCode = (hashCode * 59) + this.PluginID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequiresControllerPlugin.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiresTopologies.GetHashCode();
                if (this.UpdateTime != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
