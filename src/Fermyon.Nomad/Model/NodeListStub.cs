/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// NodeListStub
    /// </summary>
    [DataContract(Name = "NodeListStub")]
    public partial class NodeListStub : IEquatable<NodeListStub>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeListStub" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="datacenter">datacenter.</param>
        /// <param name="drain">drain.</param>
        /// <param name="drivers">drivers.</param>
        /// <param name="iD">iD.</param>
        /// <param name="lastDrain">lastDrain.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="name">name.</param>
        /// <param name="nodeClass">nodeClass.</param>
        /// <param name="nodeResources">nodeResources.</param>
        /// <param name="reservedResources">reservedResources.</param>
        /// <param name="schedulingEligibility">schedulingEligibility.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="varVersion">varVersion.</param>
        public NodeListStub(string address = default(string), Dictionary<string, string> attributes = default(Dictionary<string, string>), int createIndex = default(int), string datacenter = default(string), bool drain = default(bool), Dictionary<string, DriverInfo> drivers = default(Dictionary<string, DriverInfo>), string iD = default(string), DrainMetadata lastDrain = default(DrainMetadata), int modifyIndex = default(int), string name = default(string), string nodeClass = default(string), NodeResources nodeResources = default(NodeResources), NodeReservedResources reservedResources = default(NodeReservedResources), string schedulingEligibility = default(string), string status = default(string), string statusDescription = default(string), string varVersion = default(string))
        {
            this.Address = address;
            this.Attributes = attributes;
            this.CreateIndex = createIndex;
            this.Datacenter = datacenter;
            this.Drain = drain;
            this.Drivers = drivers;
            this.ID = iD;
            this.LastDrain = lastDrain;
            this.ModifyIndex = modifyIndex;
            this.Name = name;
            this.NodeClass = nodeClass;
            this.NodeResources = nodeResources;
            this.ReservedResources = reservedResources;
            this.SchedulingEligibility = schedulingEligibility;
            this.Status = status;
            this.StatusDescription = statusDescription;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "Address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "Attributes", EmitDefaultValue = false)]
        public Dictionary<string, string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets Datacenter
        /// </summary>
        [DataMember(Name = "Datacenter", EmitDefaultValue = false)]
        public string Datacenter { get; set; }

        /// <summary>
        /// Gets or Sets Drain
        /// </summary>
        [DataMember(Name = "Drain", EmitDefaultValue = true)]
        public bool Drain { get; set; }

        /// <summary>
        /// Gets or Sets Drivers
        /// </summary>
        [DataMember(Name = "Drivers", EmitDefaultValue = false)]
        public Dictionary<string, DriverInfo> Drivers { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets LastDrain
        /// </summary>
        [DataMember(Name = "LastDrain", EmitDefaultValue = false)]
        public DrainMetadata LastDrain { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NodeClass
        /// </summary>
        [DataMember(Name = "NodeClass", EmitDefaultValue = false)]
        public string NodeClass { get; set; }

        /// <summary>
        /// Gets or Sets NodeResources
        /// </summary>
        [DataMember(Name = "NodeResources", EmitDefaultValue = false)]
        public NodeResources NodeResources { get; set; }

        /// <summary>
        /// Gets or Sets ReservedResources
        /// </summary>
        [DataMember(Name = "ReservedResources", EmitDefaultValue = false)]
        public NodeReservedResources ReservedResources { get; set; }

        /// <summary>
        /// Gets or Sets SchedulingEligibility
        /// </summary>
        [DataMember(Name = "SchedulingEligibility", EmitDefaultValue = false)]
        public string SchedulingEligibility { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "StatusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "Version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeListStub {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  Datacenter: ").Append(Datacenter).Append("\n");
            sb.Append("  Drain: ").Append(Drain).Append("\n");
            sb.Append("  Drivers: ").Append(Drivers).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LastDrain: ").Append(LastDrain).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NodeClass: ").Append(NodeClass).Append("\n");
            sb.Append("  NodeResources: ").Append(NodeResources).Append("\n");
            sb.Append("  ReservedResources: ").Append(ReservedResources).Append("\n");
            sb.Append("  SchedulingEligibility: ").Append(SchedulingEligibility).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeListStub);
        }

        /// <summary>
        /// Returns true if NodeListStub instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeListStub to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeListStub input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.Datacenter == input.Datacenter ||
                    (this.Datacenter != null &&
                    this.Datacenter.Equals(input.Datacenter))
                ) && 
                (
                    this.Drain == input.Drain ||
                    this.Drain.Equals(input.Drain)
                ) && 
                (
                    this.Drivers == input.Drivers ||
                    this.Drivers != null &&
                    input.Drivers != null &&
                    this.Drivers.SequenceEqual(input.Drivers)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.LastDrain == input.LastDrain ||
                    (this.LastDrain != null &&
                    this.LastDrain.Equals(input.LastDrain))
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NodeClass == input.NodeClass ||
                    (this.NodeClass != null &&
                    this.NodeClass.Equals(input.NodeClass))
                ) && 
                (
                    this.NodeResources == input.NodeResources ||
                    (this.NodeResources != null &&
                    this.NodeResources.Equals(input.NodeResources))
                ) && 
                (
                    this.ReservedResources == input.ReservedResources ||
                    (this.ReservedResources != null &&
                    this.ReservedResources.Equals(input.ReservedResources))
                ) && 
                (
                    this.SchedulingEligibility == input.SchedulingEligibility ||
                    (this.SchedulingEligibility != null &&
                    this.SchedulingEligibility.Equals(input.SchedulingEligibility))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    (this.VarVersion != null &&
                    this.VarVersion.Equals(input.VarVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                if (this.Datacenter != null)
                {
                    hashCode = (hashCode * 59) + this.Datacenter.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Drain.GetHashCode();
                if (this.Drivers != null)
                {
                    hashCode = (hashCode * 59) + this.Drivers.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                if (this.LastDrain != null)
                {
                    hashCode = (hashCode * 59) + this.LastDrain.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.NodeClass != null)
                {
                    hashCode = (hashCode * 59) + this.NodeClass.GetHashCode();
                }
                if (this.NodeResources != null)
                {
                    hashCode = (hashCode * 59) + this.NodeResources.GetHashCode();
                }
                if (this.ReservedResources != null)
                {
                    hashCode = (hashCode * 59) + this.ReservedResources.GetHashCode();
                }
                if (this.SchedulingEligibility != null)
                {
                    hashCode = (hashCode * 59) + this.SchedulingEligibility.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                if (this.VarVersion != null)
                {
                    hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            yield break;
        }
    }

}
