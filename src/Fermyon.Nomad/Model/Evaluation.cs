/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Evaluation
    /// </summary>
    [DataContract(Name = "Evaluation")]
    public partial class Evaluation : IEquatable<Evaluation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Evaluation" /> class.
        /// </summary>
        /// <param name="annotatePlan">annotatePlan.</param>
        /// <param name="blockedEval">blockedEval.</param>
        /// <param name="classEligibility">classEligibility.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="createTime">createTime.</param>
        /// <param name="deploymentID">deploymentID.</param>
        /// <param name="escapedComputedClass">escapedComputedClass.</param>
        /// <param name="failedTGAllocs">failedTGAllocs.</param>
        /// <param name="iD">iD.</param>
        /// <param name="jobID">jobID.</param>
        /// <param name="jobModifyIndex">jobModifyIndex.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="modifyTime">modifyTime.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="nextEval">nextEval.</param>
        /// <param name="nodeID">nodeID.</param>
        /// <param name="nodeModifyIndex">nodeModifyIndex.</param>
        /// <param name="previousEval">previousEval.</param>
        /// <param name="priority">priority.</param>
        /// <param name="queuedAllocations">queuedAllocations.</param>
        /// <param name="quotaLimitReached">quotaLimitReached.</param>
        /// <param name="relatedEvals">relatedEvals.</param>
        /// <param name="snapshotIndex">snapshotIndex.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="triggeredBy">triggeredBy.</param>
        /// <param name="type">type.</param>
        /// <param name="wait">wait.</param>
        /// <param name="waitUntil">waitUntil.</param>
        public Evaluation(bool annotatePlan = default(bool), string blockedEval = default(string), Dictionary<string, bool> classEligibility = default(Dictionary<string, bool>), int createIndex = default(int), long createTime = default(long), string deploymentID = default(string), bool escapedComputedClass = default(bool), Dictionary<string, AllocationMetric> failedTGAllocs = default(Dictionary<string, AllocationMetric>), string iD = default(string), string jobID = default(string), int jobModifyIndex = default(int), int modifyIndex = default(int), long modifyTime = default(long), string varNamespace = default(string), string nextEval = default(string), string nodeID = default(string), int nodeModifyIndex = default(int), string previousEval = default(string), int priority = default(int), Dictionary<string, int> queuedAllocations = default(Dictionary<string, int>), string quotaLimitReached = default(string), List<EvaluationStub> relatedEvals = default(List<EvaluationStub>), int snapshotIndex = default(int), string status = default(string), string statusDescription = default(string), string triggeredBy = default(string), string type = default(string), long wait = default(long), DateTime waitUntil = default(DateTime))
        {
            this.AnnotatePlan = annotatePlan;
            this.BlockedEval = blockedEval;
            this.ClassEligibility = classEligibility;
            this.CreateIndex = createIndex;
            this.CreateTime = createTime;
            this.DeploymentID = deploymentID;
            this.EscapedComputedClass = escapedComputedClass;
            this.FailedTGAllocs = failedTGAllocs;
            this.ID = iD;
            this.JobID = jobID;
            this.JobModifyIndex = jobModifyIndex;
            this.ModifyIndex = modifyIndex;
            this.ModifyTime = modifyTime;
            this.VarNamespace = varNamespace;
            this.NextEval = nextEval;
            this.NodeID = nodeID;
            this.NodeModifyIndex = nodeModifyIndex;
            this.PreviousEval = previousEval;
            this.Priority = priority;
            this.QueuedAllocations = queuedAllocations;
            this.QuotaLimitReached = quotaLimitReached;
            this.RelatedEvals = relatedEvals;
            this.SnapshotIndex = snapshotIndex;
            this.Status = status;
            this.StatusDescription = statusDescription;
            this.TriggeredBy = triggeredBy;
            this.Type = type;
            this.Wait = wait;
            this.WaitUntil = waitUntil;
        }

        /// <summary>
        /// Gets or Sets AnnotatePlan
        /// </summary>
        [DataMember(Name = "AnnotatePlan", EmitDefaultValue = true)]
        public bool AnnotatePlan { get; set; }

        /// <summary>
        /// Gets or Sets BlockedEval
        /// </summary>
        [DataMember(Name = "BlockedEval", EmitDefaultValue = false)]
        public string BlockedEval { get; set; }

        /// <summary>
        /// Gets or Sets ClassEligibility
        /// </summary>
        [DataMember(Name = "ClassEligibility", EmitDefaultValue = false)]
        public Dictionary<string, bool> ClassEligibility { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name = "CreateTime", EmitDefaultValue = false)]
        public long CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets DeploymentID
        /// </summary>
        [DataMember(Name = "DeploymentID", EmitDefaultValue = false)]
        public string DeploymentID { get; set; }

        /// <summary>
        /// Gets or Sets EscapedComputedClass
        /// </summary>
        [DataMember(Name = "EscapedComputedClass", EmitDefaultValue = true)]
        public bool EscapedComputedClass { get; set; }

        /// <summary>
        /// Gets or Sets FailedTGAllocs
        /// </summary>
        [DataMember(Name = "FailedTGAllocs", EmitDefaultValue = false)]
        public Dictionary<string, AllocationMetric> FailedTGAllocs { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name = "JobID", EmitDefaultValue = false)]
        public string JobID { get; set; }

        /// <summary>
        /// Gets or Sets JobModifyIndex
        /// </summary>
        [DataMember(Name = "JobModifyIndex", EmitDefaultValue = false)]
        public int JobModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets ModifyTime
        /// </summary>
        [DataMember(Name = "ModifyTime", EmitDefaultValue = false)]
        public long ModifyTime { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets NextEval
        /// </summary>
        [DataMember(Name = "NextEval", EmitDefaultValue = false)]
        public string NextEval { get; set; }

        /// <summary>
        /// Gets or Sets NodeID
        /// </summary>
        [DataMember(Name = "NodeID", EmitDefaultValue = false)]
        public string NodeID { get; set; }

        /// <summary>
        /// Gets or Sets NodeModifyIndex
        /// </summary>
        [DataMember(Name = "NodeModifyIndex", EmitDefaultValue = false)]
        public int NodeModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets PreviousEval
        /// </summary>
        [DataMember(Name = "PreviousEval", EmitDefaultValue = false)]
        public string PreviousEval { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets QueuedAllocations
        /// </summary>
        [DataMember(Name = "QueuedAllocations", EmitDefaultValue = false)]
        public Dictionary<string, int> QueuedAllocations { get; set; }

        /// <summary>
        /// Gets or Sets QuotaLimitReached
        /// </summary>
        [DataMember(Name = "QuotaLimitReached", EmitDefaultValue = false)]
        public string QuotaLimitReached { get; set; }

        /// <summary>
        /// Gets or Sets RelatedEvals
        /// </summary>
        [DataMember(Name = "RelatedEvals", EmitDefaultValue = false)]
        public List<EvaluationStub> RelatedEvals { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotIndex
        /// </summary>
        [DataMember(Name = "SnapshotIndex", EmitDefaultValue = false)]
        public int SnapshotIndex { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "StatusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets TriggeredBy
        /// </summary>
        [DataMember(Name = "TriggeredBy", EmitDefaultValue = false)]
        public string TriggeredBy { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Wait
        /// </summary>
        [DataMember(Name = "Wait", EmitDefaultValue = false)]
        public long Wait { get; set; }

        /// <summary>
        /// Gets or Sets WaitUntil
        /// </summary>
        [DataMember(Name = "WaitUntil", EmitDefaultValue = false)]
        public DateTime WaitUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Evaluation {\n");
            sb.Append("  AnnotatePlan: ").Append(AnnotatePlan).Append("\n");
            sb.Append("  BlockedEval: ").Append(BlockedEval).Append("\n");
            sb.Append("  ClassEligibility: ").Append(ClassEligibility).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  DeploymentID: ").Append(DeploymentID).Append("\n");
            sb.Append("  EscapedComputedClass: ").Append(EscapedComputedClass).Append("\n");
            sb.Append("  FailedTGAllocs: ").Append(FailedTGAllocs).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  JobModifyIndex: ").Append(JobModifyIndex).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  ModifyTime: ").Append(ModifyTime).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  NextEval: ").Append(NextEval).Append("\n");
            sb.Append("  NodeID: ").Append(NodeID).Append("\n");
            sb.Append("  NodeModifyIndex: ").Append(NodeModifyIndex).Append("\n");
            sb.Append("  PreviousEval: ").Append(PreviousEval).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  QueuedAllocations: ").Append(QueuedAllocations).Append("\n");
            sb.Append("  QuotaLimitReached: ").Append(QuotaLimitReached).Append("\n");
            sb.Append("  RelatedEvals: ").Append(RelatedEvals).Append("\n");
            sb.Append("  SnapshotIndex: ").Append(SnapshotIndex).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  TriggeredBy: ").Append(TriggeredBy).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Wait: ").Append(Wait).Append("\n");
            sb.Append("  WaitUntil: ").Append(WaitUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Evaluation);
        }

        /// <summary>
        /// Returns true if Evaluation instances are equal
        /// </summary>
        /// <param name="input">Instance of Evaluation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Evaluation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AnnotatePlan == input.AnnotatePlan ||
                    this.AnnotatePlan.Equals(input.AnnotatePlan)
                ) && 
                (
                    this.BlockedEval == input.BlockedEval ||
                    (this.BlockedEval != null &&
                    this.BlockedEval.Equals(input.BlockedEval))
                ) && 
                (
                    this.ClassEligibility == input.ClassEligibility ||
                    this.ClassEligibility != null &&
                    input.ClassEligibility != null &&
                    this.ClassEligibility.SequenceEqual(input.ClassEligibility)
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.CreateTime == input.CreateTime ||
                    this.CreateTime.Equals(input.CreateTime)
                ) && 
                (
                    this.DeploymentID == input.DeploymentID ||
                    (this.DeploymentID != null &&
                    this.DeploymentID.Equals(input.DeploymentID))
                ) && 
                (
                    this.EscapedComputedClass == input.EscapedComputedClass ||
                    this.EscapedComputedClass.Equals(input.EscapedComputedClass)
                ) && 
                (
                    this.FailedTGAllocs == input.FailedTGAllocs ||
                    this.FailedTGAllocs != null &&
                    input.FailedTGAllocs != null &&
                    this.FailedTGAllocs.SequenceEqual(input.FailedTGAllocs)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.JobModifyIndex == input.JobModifyIndex ||
                    this.JobModifyIndex.Equals(input.JobModifyIndex)
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.ModifyTime == input.ModifyTime ||
                    this.ModifyTime.Equals(input.ModifyTime)
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.NextEval == input.NextEval ||
                    (this.NextEval != null &&
                    this.NextEval.Equals(input.NextEval))
                ) && 
                (
                    this.NodeID == input.NodeID ||
                    (this.NodeID != null &&
                    this.NodeID.Equals(input.NodeID))
                ) && 
                (
                    this.NodeModifyIndex == input.NodeModifyIndex ||
                    this.NodeModifyIndex.Equals(input.NodeModifyIndex)
                ) && 
                (
                    this.PreviousEval == input.PreviousEval ||
                    (this.PreviousEval != null &&
                    this.PreviousEval.Equals(input.PreviousEval))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.QueuedAllocations == input.QueuedAllocations ||
                    this.QueuedAllocations != null &&
                    input.QueuedAllocations != null &&
                    this.QueuedAllocations.SequenceEqual(input.QueuedAllocations)
                ) && 
                (
                    this.QuotaLimitReached == input.QuotaLimitReached ||
                    (this.QuotaLimitReached != null &&
                    this.QuotaLimitReached.Equals(input.QuotaLimitReached))
                ) && 
                (
                    this.RelatedEvals == input.RelatedEvals ||
                    this.RelatedEvals != null &&
                    input.RelatedEvals != null &&
                    this.RelatedEvals.SequenceEqual(input.RelatedEvals)
                ) && 
                (
                    this.SnapshotIndex == input.SnapshotIndex ||
                    this.SnapshotIndex.Equals(input.SnapshotIndex)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.TriggeredBy == input.TriggeredBy ||
                    (this.TriggeredBy != null &&
                    this.TriggeredBy.Equals(input.TriggeredBy))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Wait == input.Wait ||
                    this.Wait.Equals(input.Wait)
                ) && 
                (
                    this.WaitUntil == input.WaitUntil ||
                    (this.WaitUntil != null &&
                    this.WaitUntil.Equals(input.WaitUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AnnotatePlan.GetHashCode();
                if (this.BlockedEval != null)
                {
                    hashCode = (hashCode * 59) + this.BlockedEval.GetHashCode();
                }
                if (this.ClassEligibility != null)
                {
                    hashCode = (hashCode * 59) + this.ClassEligibility.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                if (this.DeploymentID != null)
                {
                    hashCode = (hashCode * 59) + this.DeploymentID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EscapedComputedClass.GetHashCode();
                if (this.FailedTGAllocs != null)
                {
                    hashCode = (hashCode * 59) + this.FailedTGAllocs.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                if (this.JobID != null)
                {
                    hashCode = (hashCode * 59) + this.JobID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobModifyIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.ModifyTime.GetHashCode();
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.NextEval != null)
                {
                    hashCode = (hashCode * 59) + this.NextEval.GetHashCode();
                }
                if (this.NodeID != null)
                {
                    hashCode = (hashCode * 59) + this.NodeID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NodeModifyIndex.GetHashCode();
                if (this.PreviousEval != null)
                {
                    hashCode = (hashCode * 59) + this.PreviousEval.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.QueuedAllocations != null)
                {
                    hashCode = (hashCode * 59) + this.QueuedAllocations.GetHashCode();
                }
                if (this.QuotaLimitReached != null)
                {
                    hashCode = (hashCode * 59) + this.QuotaLimitReached.GetHashCode();
                }
                if (this.RelatedEvals != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedEvals.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SnapshotIndex.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                if (this.TriggeredBy != null)
                {
                    hashCode = (hashCode * 59) + this.TriggeredBy.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Wait.GetHashCode();
                if (this.WaitUntil != null)
                {
                    hashCode = (hashCode * 59) + this.WaitUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // JobModifyIndex (int) maximum
            if (this.JobModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value less than or equal to 384.", new [] { "JobModifyIndex" });
            }

            // JobModifyIndex (int) minimum
            if (this.JobModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value greater than or equal to 0.", new [] { "JobModifyIndex" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            // NodeModifyIndex (int) maximum
            if (this.NodeModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NodeModifyIndex, must be a value less than or equal to 384.", new [] { "NodeModifyIndex" });
            }

            // NodeModifyIndex (int) minimum
            if (this.NodeModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NodeModifyIndex, must be a value greater than or equal to 0.", new [] { "NodeModifyIndex" });
            }

            // SnapshotIndex (int) maximum
            if (this.SnapshotIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SnapshotIndex, must be a value less than or equal to 384.", new [] { "SnapshotIndex" });
            }

            // SnapshotIndex (int) minimum
            if (this.SnapshotIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SnapshotIndex, must be a value greater than or equal to 0.", new [] { "SnapshotIndex" });
            }

            yield break;
        }
    }

}
