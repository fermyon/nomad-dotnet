/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Attribute
    /// </summary>
    [DataContract(Name = "Attribute")]
    public partial class Attribute : IEquatable<Attribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Attribute" /> class.
        /// </summary>
        /// <param name="varBool">varBool.</param>
        /// <param name="varFloat">varFloat.</param>
        /// <param name="varInt">varInt.</param>
        /// <param name="varString">varString.</param>
        /// <param name="unit">unit.</param>
        public Attribute(bool varBool = default(bool), double varFloat = default(double), long varInt = default(long), string varString = default(string), string unit = default(string))
        {
            this.VarBool = varBool;
            this.VarFloat = varFloat;
            this.VarInt = varInt;
            this.VarString = varString;
            this.Unit = unit;
        }

        /// <summary>
        /// Gets or Sets VarBool
        /// </summary>
        [DataMember(Name = "Bool", EmitDefaultValue = true)]
        public bool VarBool { get; set; }

        /// <summary>
        /// Gets or Sets VarFloat
        /// </summary>
        [DataMember(Name = "Float", EmitDefaultValue = false)]
        public double VarFloat { get; set; }

        /// <summary>
        /// Gets or Sets VarInt
        /// </summary>
        [DataMember(Name = "Int", EmitDefaultValue = false)]
        public long VarInt { get; set; }

        /// <summary>
        /// Gets or Sets VarString
        /// </summary>
        [DataMember(Name = "String", EmitDefaultValue = false)]
        public string VarString { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "Unit", EmitDefaultValue = false)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Attribute {\n");
            sb.Append("  VarBool: ").Append(VarBool).Append("\n");
            sb.Append("  VarFloat: ").Append(VarFloat).Append("\n");
            sb.Append("  VarInt: ").Append(VarInt).Append("\n");
            sb.Append("  VarString: ").Append(VarString).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Attribute);
        }

        /// <summary>
        /// Returns true if Attribute instances are equal
        /// </summary>
        /// <param name="input">Instance of Attribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attribute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarBool == input.VarBool ||
                    this.VarBool.Equals(input.VarBool)
                ) && 
                (
                    this.VarFloat == input.VarFloat ||
                    this.VarFloat.Equals(input.VarFloat)
                ) && 
                (
                    this.VarInt == input.VarInt ||
                    this.VarInt.Equals(input.VarInt)
                ) && 
                (
                    this.VarString == input.VarString ||
                    (this.VarString != null &&
                    this.VarString.Equals(input.VarString))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarBool.GetHashCode();
                hashCode = (hashCode * 59) + this.VarFloat.GetHashCode();
                hashCode = (hashCode * 59) + this.VarInt.GetHashCode();
                if (this.VarString != null)
                {
                    hashCode = (hashCode * 59) + this.VarString.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
