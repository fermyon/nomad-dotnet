/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// NodeUpdateDrainRequest
    /// </summary>
    [DataContract(Name = "NodeUpdateDrainRequest")]
    public partial class NodeUpdateDrainRequest : IEquatable<NodeUpdateDrainRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeUpdateDrainRequest" /> class.
        /// </summary>
        /// <param name="drainSpec">drainSpec.</param>
        /// <param name="markEligible">markEligible.</param>
        /// <param name="meta">meta.</param>
        /// <param name="nodeID">nodeID.</param>
        public NodeUpdateDrainRequest(DrainSpec drainSpec = default(DrainSpec), bool markEligible = default(bool), Dictionary<string, string> meta = default(Dictionary<string, string>), string nodeID = default(string))
        {
            this.DrainSpec = drainSpec;
            this.MarkEligible = markEligible;
            this.Meta = meta;
            this.NodeID = nodeID;
        }

        /// <summary>
        /// Gets or Sets DrainSpec
        /// </summary>
        [DataMember(Name = "DrainSpec", EmitDefaultValue = false)]
        public DrainSpec DrainSpec { get; set; }

        /// <summary>
        /// Gets or Sets MarkEligible
        /// </summary>
        [DataMember(Name = "MarkEligible", EmitDefaultValue = true)]
        public bool MarkEligible { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "Meta", EmitDefaultValue = false)]
        public Dictionary<string, string> Meta { get; set; }

        /// <summary>
        /// Gets or Sets NodeID
        /// </summary>
        [DataMember(Name = "NodeID", EmitDefaultValue = false)]
        public string NodeID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NodeUpdateDrainRequest {\n");
            sb.Append("  DrainSpec: ").Append(DrainSpec).Append("\n");
            sb.Append("  MarkEligible: ").Append(MarkEligible).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  NodeID: ").Append(NodeID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeUpdateDrainRequest);
        }

        /// <summary>
        /// Returns true if NodeUpdateDrainRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeUpdateDrainRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeUpdateDrainRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DrainSpec == input.DrainSpec ||
                    (this.DrainSpec != null &&
                    this.DrainSpec.Equals(input.DrainSpec))
                ) && 
                (
                    this.MarkEligible == input.MarkEligible ||
                    this.MarkEligible.Equals(input.MarkEligible)
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.NodeID == input.NodeID ||
                    (this.NodeID != null &&
                    this.NodeID.Equals(input.NodeID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DrainSpec != null)
                {
                    hashCode = (hashCode * 59) + this.DrainSpec.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MarkEligible.GetHashCode();
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.NodeID != null)
                {
                    hashCode = (hashCode * 59) + this.NodeID.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
