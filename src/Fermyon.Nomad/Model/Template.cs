/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Template
    /// </summary>
    [DataContract(Name = "Template")]
    public partial class Template : IEquatable<Template>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Template" /> class.
        /// </summary>
        /// <param name="changeMode">changeMode.</param>
        /// <param name="changeSignal">changeSignal.</param>
        /// <param name="destPath">destPath.</param>
        /// <param name="embeddedTmpl">embeddedTmpl.</param>
        /// <param name="envvars">envvars.</param>
        /// <param name="leftDelim">leftDelim.</param>
        /// <param name="perms">perms.</param>
        /// <param name="rightDelim">rightDelim.</param>
        /// <param name="sourcePath">sourcePath.</param>
        /// <param name="splay">splay.</param>
        /// <param name="vaultGrace">vaultGrace.</param>
        /// <param name="wait">wait.</param>
        public Template(string changeMode = default(string), string changeSignal = default(string), string destPath = default(string), string embeddedTmpl = default(string), bool envvars = default(bool), string leftDelim = default(string), string perms = default(string), string rightDelim = default(string), string sourcePath = default(string), long splay = default(long), long vaultGrace = default(long), WaitConfig wait = default(WaitConfig))
        {
            this.ChangeMode = changeMode;
            this.ChangeSignal = changeSignal;
            this.DestPath = destPath;
            this.EmbeddedTmpl = embeddedTmpl;
            this.Envvars = envvars;
            this.LeftDelim = leftDelim;
            this.Perms = perms;
            this.RightDelim = rightDelim;
            this.SourcePath = sourcePath;
            this.Splay = splay;
            this.VaultGrace = vaultGrace;
            this.Wait = wait;
        }

        /// <summary>
        /// Gets or Sets ChangeMode
        /// </summary>
        [DataMember(Name = "ChangeMode", EmitDefaultValue = false)]
        public string ChangeMode { get; set; }

        /// <summary>
        /// Gets or Sets ChangeSignal
        /// </summary>
        [DataMember(Name = "ChangeSignal", EmitDefaultValue = false)]
        public string ChangeSignal { get; set; }

        /// <summary>
        /// Gets or Sets DestPath
        /// </summary>
        [DataMember(Name = "DestPath", EmitDefaultValue = false)]
        public string DestPath { get; set; }

        /// <summary>
        /// Gets or Sets EmbeddedTmpl
        /// </summary>
        [DataMember(Name = "EmbeddedTmpl", EmitDefaultValue = false)]
        public string EmbeddedTmpl { get; set; }

        /// <summary>
        /// Gets or Sets Envvars
        /// </summary>
        [DataMember(Name = "Envvars", EmitDefaultValue = true)]
        public bool Envvars { get; set; }

        /// <summary>
        /// Gets or Sets LeftDelim
        /// </summary>
        [DataMember(Name = "LeftDelim", EmitDefaultValue = false)]
        public string LeftDelim { get; set; }

        /// <summary>
        /// Gets or Sets Perms
        /// </summary>
        [DataMember(Name = "Perms", EmitDefaultValue = false)]
        public string Perms { get; set; }

        /// <summary>
        /// Gets or Sets RightDelim
        /// </summary>
        [DataMember(Name = "RightDelim", EmitDefaultValue = false)]
        public string RightDelim { get; set; }

        /// <summary>
        /// Gets or Sets SourcePath
        /// </summary>
        [DataMember(Name = "SourcePath", EmitDefaultValue = false)]
        public string SourcePath { get; set; }

        /// <summary>
        /// Gets or Sets Splay
        /// </summary>
        [DataMember(Name = "Splay", EmitDefaultValue = false)]
        public long Splay { get; set; }

        /// <summary>
        /// Gets or Sets VaultGrace
        /// </summary>
        [DataMember(Name = "VaultGrace", EmitDefaultValue = false)]
        public long VaultGrace { get; set; }

        /// <summary>
        /// Gets or Sets Wait
        /// </summary>
        [DataMember(Name = "Wait", EmitDefaultValue = false)]
        public WaitConfig Wait { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Template {\n");
            sb.Append("  ChangeMode: ").Append(ChangeMode).Append("\n");
            sb.Append("  ChangeSignal: ").Append(ChangeSignal).Append("\n");
            sb.Append("  DestPath: ").Append(DestPath).Append("\n");
            sb.Append("  EmbeddedTmpl: ").Append(EmbeddedTmpl).Append("\n");
            sb.Append("  Envvars: ").Append(Envvars).Append("\n");
            sb.Append("  LeftDelim: ").Append(LeftDelim).Append("\n");
            sb.Append("  Perms: ").Append(Perms).Append("\n");
            sb.Append("  RightDelim: ").Append(RightDelim).Append("\n");
            sb.Append("  SourcePath: ").Append(SourcePath).Append("\n");
            sb.Append("  Splay: ").Append(Splay).Append("\n");
            sb.Append("  VaultGrace: ").Append(VaultGrace).Append("\n");
            sb.Append("  Wait: ").Append(Wait).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Template);
        }

        /// <summary>
        /// Returns true if Template instances are equal
        /// </summary>
        /// <param name="input">Instance of Template to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Template input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChangeMode == input.ChangeMode ||
                    (this.ChangeMode != null &&
                    this.ChangeMode.Equals(input.ChangeMode))
                ) && 
                (
                    this.ChangeSignal == input.ChangeSignal ||
                    (this.ChangeSignal != null &&
                    this.ChangeSignal.Equals(input.ChangeSignal))
                ) && 
                (
                    this.DestPath == input.DestPath ||
                    (this.DestPath != null &&
                    this.DestPath.Equals(input.DestPath))
                ) && 
                (
                    this.EmbeddedTmpl == input.EmbeddedTmpl ||
                    (this.EmbeddedTmpl != null &&
                    this.EmbeddedTmpl.Equals(input.EmbeddedTmpl))
                ) && 
                (
                    this.Envvars == input.Envvars ||
                    this.Envvars.Equals(input.Envvars)
                ) && 
                (
                    this.LeftDelim == input.LeftDelim ||
                    (this.LeftDelim != null &&
                    this.LeftDelim.Equals(input.LeftDelim))
                ) && 
                (
                    this.Perms == input.Perms ||
                    (this.Perms != null &&
                    this.Perms.Equals(input.Perms))
                ) && 
                (
                    this.RightDelim == input.RightDelim ||
                    (this.RightDelim != null &&
                    this.RightDelim.Equals(input.RightDelim))
                ) && 
                (
                    this.SourcePath == input.SourcePath ||
                    (this.SourcePath != null &&
                    this.SourcePath.Equals(input.SourcePath))
                ) && 
                (
                    this.Splay == input.Splay ||
                    this.Splay.Equals(input.Splay)
                ) && 
                (
                    this.VaultGrace == input.VaultGrace ||
                    this.VaultGrace.Equals(input.VaultGrace)
                ) && 
                (
                    this.Wait == input.Wait ||
                    (this.Wait != null &&
                    this.Wait.Equals(input.Wait))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChangeMode != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeMode.GetHashCode();
                }
                if (this.ChangeSignal != null)
                {
                    hashCode = (hashCode * 59) + this.ChangeSignal.GetHashCode();
                }
                if (this.DestPath != null)
                {
                    hashCode = (hashCode * 59) + this.DestPath.GetHashCode();
                }
                if (this.EmbeddedTmpl != null)
                {
                    hashCode = (hashCode * 59) + this.EmbeddedTmpl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Envvars.GetHashCode();
                if (this.LeftDelim != null)
                {
                    hashCode = (hashCode * 59) + this.LeftDelim.GetHashCode();
                }
                if (this.Perms != null)
                {
                    hashCode = (hashCode * 59) + this.Perms.GetHashCode();
                }
                if (this.RightDelim != null)
                {
                    hashCode = (hashCode * 59) + this.RightDelim.GetHashCode();
                }
                if (this.SourcePath != null)
                {
                    hashCode = (hashCode * 59) + this.SourcePath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Splay.GetHashCode();
                hashCode = (hashCode * 59) + this.VaultGrace.GetHashCode();
                if (this.Wait != null)
                {
                    hashCode = (hashCode * 59) + this.Wait.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
