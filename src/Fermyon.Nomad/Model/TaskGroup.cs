/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// TaskGroup
    /// </summary>
    [DataContract(Name = "TaskGroup")]
    public partial class TaskGroup : IEquatable<TaskGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGroup" /> class.
        /// </summary>
        /// <param name="affinities">affinities.</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="consul">consul.</param>
        /// <param name="count">count.</param>
        /// <param name="ephemeralDisk">ephemeralDisk.</param>
        /// <param name="maxClientDisconnect">maxClientDisconnect.</param>
        /// <param name="meta">meta.</param>
        /// <param name="migrate">migrate.</param>
        /// <param name="name">name.</param>
        /// <param name="networks">networks.</param>
        /// <param name="reschedulePolicy">reschedulePolicy.</param>
        /// <param name="restartPolicy">restartPolicy.</param>
        /// <param name="scaling">scaling.</param>
        /// <param name="services">services.</param>
        /// <param name="shutdownDelay">shutdownDelay.</param>
        /// <param name="spreads">spreads.</param>
        /// <param name="stopAfterClientDisconnect">stopAfterClientDisconnect.</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="update">update.</param>
        /// <param name="volumes">volumes.</param>
        public TaskGroup(List<Affinity> affinities = default(List<Affinity>), List<Constraint> constraints = default(List<Constraint>), Consul consul = default(Consul), int count = default(int), EphemeralDisk ephemeralDisk = default(EphemeralDisk), long maxClientDisconnect = default(long), Dictionary<string, string> meta = default(Dictionary<string, string>), MigrateStrategy migrate = default(MigrateStrategy), string name = default(string), List<NetworkResource> networks = default(List<NetworkResource>), ReschedulePolicy reschedulePolicy = default(ReschedulePolicy), RestartPolicy restartPolicy = default(RestartPolicy), ScalingPolicy scaling = default(ScalingPolicy), List<Service> services = default(List<Service>), long? shutdownDelay = default(long?), List<Spread> spreads = default(List<Spread>), long? stopAfterClientDisconnect = default(long?), List<Task> tasks = default(List<Task>), UpdateStrategy update = default(UpdateStrategy), Dictionary<string, VolumeRequest> volumes = default(Dictionary<string, VolumeRequest>))
        {
            this.Affinities = affinities;
            this.Constraints = constraints;
            this.Consul = consul;
            this.Count = count;
            this.EphemeralDisk = ephemeralDisk;
            this.MaxClientDisconnect = maxClientDisconnect;
            this.Meta = meta;
            this.Migrate = migrate;
            this.Name = name;
            this.Networks = networks;
            this.ReschedulePolicy = reschedulePolicy;
            this.RestartPolicy = restartPolicy;
            this.Scaling = scaling;
            this.Services = services;
            this.ShutdownDelay = shutdownDelay;
            this.Spreads = spreads;
            this.StopAfterClientDisconnect = stopAfterClientDisconnect;
            this.Tasks = tasks;
            this.Update = update;
            this.Volumes = volumes;
        }

        /// <summary>
        /// Gets or Sets Affinities
        /// </summary>
        [DataMember(Name = "Affinities", EmitDefaultValue = false)]
        public List<Affinity> Affinities { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "Constraints", EmitDefaultValue = false)]
        public List<Constraint> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets Consul
        /// </summary>
        [DataMember(Name = "Consul", EmitDefaultValue = false)]
        public Consul Consul { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets EphemeralDisk
        /// </summary>
        [DataMember(Name = "EphemeralDisk", EmitDefaultValue = false)]
        public EphemeralDisk EphemeralDisk { get; set; }

        /// <summary>
        /// Gets or Sets MaxClientDisconnect
        /// </summary>
        [DataMember(Name = "MaxClientDisconnect", EmitDefaultValue = false)]
        public long MaxClientDisconnect { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "Meta", EmitDefaultValue = false)]
        public Dictionary<string, string> Meta { get; set; }

        /// <summary>
        /// Gets or Sets Migrate
        /// </summary>
        [DataMember(Name = "Migrate", EmitDefaultValue = false)]
        public MigrateStrategy Migrate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Networks
        /// </summary>
        [DataMember(Name = "Networks", EmitDefaultValue = false)]
        public List<NetworkResource> Networks { get; set; }

        /// <summary>
        /// Gets or Sets ReschedulePolicy
        /// </summary>
        [DataMember(Name = "ReschedulePolicy", EmitDefaultValue = false)]
        public ReschedulePolicy ReschedulePolicy { get; set; }

        /// <summary>
        /// Gets or Sets RestartPolicy
        /// </summary>
        [DataMember(Name = "RestartPolicy", EmitDefaultValue = false)]
        public RestartPolicy RestartPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Scaling
        /// </summary>
        [DataMember(Name = "Scaling", EmitDefaultValue = false)]
        public ScalingPolicy Scaling { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "Services", EmitDefaultValue = false)]
        public List<Service> Services { get; set; }

        /// <summary>
        /// Gets or Sets ShutdownDelay
        /// </summary>
        [DataMember(Name = "ShutdownDelay", EmitDefaultValue = true)]
        public long? ShutdownDelay { get; set; }

        /// <summary>
        /// Gets or Sets Spreads
        /// </summary>
        [DataMember(Name = "Spreads", EmitDefaultValue = false)]
        public List<Spread> Spreads { get; set; }

        /// <summary>
        /// Gets or Sets StopAfterClientDisconnect
        /// </summary>
        [DataMember(Name = "StopAfterClientDisconnect", EmitDefaultValue = true)]
        public long? StopAfterClientDisconnect { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name = "Tasks", EmitDefaultValue = false)]
        public List<Task> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name = "Update", EmitDefaultValue = false)]
        public UpdateStrategy Update { get; set; }

        /// <summary>
        /// Gets or Sets Volumes
        /// </summary>
        [DataMember(Name = "Volumes", EmitDefaultValue = false)]
        public Dictionary<string, VolumeRequest> Volumes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskGroup {\n");
            sb.Append("  Affinities: ").Append(Affinities).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Consul: ").Append(Consul).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  EphemeralDisk: ").Append(EphemeralDisk).Append("\n");
            sb.Append("  MaxClientDisconnect: ").Append(MaxClientDisconnect).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Migrate: ").Append(Migrate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("  ReschedulePolicy: ").Append(ReschedulePolicy).Append("\n");
            sb.Append("  RestartPolicy: ").Append(RestartPolicy).Append("\n");
            sb.Append("  Scaling: ").Append(Scaling).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  ShutdownDelay: ").Append(ShutdownDelay).Append("\n");
            sb.Append("  Spreads: ").Append(Spreads).Append("\n");
            sb.Append("  StopAfterClientDisconnect: ").Append(StopAfterClientDisconnect).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskGroup);
        }

        /// <summary>
        /// Returns true if TaskGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskGroup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Affinities == input.Affinities ||
                    this.Affinities != null &&
                    input.Affinities != null &&
                    this.Affinities.SequenceEqual(input.Affinities)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Consul == input.Consul ||
                    (this.Consul != null &&
                    this.Consul.Equals(input.Consul))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.EphemeralDisk == input.EphemeralDisk ||
                    (this.EphemeralDisk != null &&
                    this.EphemeralDisk.Equals(input.EphemeralDisk))
                ) && 
                (
                    this.MaxClientDisconnect == input.MaxClientDisconnect ||
                    this.MaxClientDisconnect.Equals(input.MaxClientDisconnect)
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.Migrate == input.Migrate ||
                    (this.Migrate != null &&
                    this.Migrate.Equals(input.Migrate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Networks == input.Networks ||
                    this.Networks != null &&
                    input.Networks != null &&
                    this.Networks.SequenceEqual(input.Networks)
                ) && 
                (
                    this.ReschedulePolicy == input.ReschedulePolicy ||
                    (this.ReschedulePolicy != null &&
                    this.ReschedulePolicy.Equals(input.ReschedulePolicy))
                ) && 
                (
                    this.RestartPolicy == input.RestartPolicy ||
                    (this.RestartPolicy != null &&
                    this.RestartPolicy.Equals(input.RestartPolicy))
                ) && 
                (
                    this.Scaling == input.Scaling ||
                    (this.Scaling != null &&
                    this.Scaling.Equals(input.Scaling))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    input.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.ShutdownDelay == input.ShutdownDelay ||
                    (this.ShutdownDelay != null &&
                    this.ShutdownDelay.Equals(input.ShutdownDelay))
                ) && 
                (
                    this.Spreads == input.Spreads ||
                    this.Spreads != null &&
                    input.Spreads != null &&
                    this.Spreads.SequenceEqual(input.Spreads)
                ) && 
                (
                    this.StopAfterClientDisconnect == input.StopAfterClientDisconnect ||
                    (this.StopAfterClientDisconnect != null &&
                    this.StopAfterClientDisconnect.Equals(input.StopAfterClientDisconnect))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    input.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                ) && 
                (
                    this.Update == input.Update ||
                    (this.Update != null &&
                    this.Update.Equals(input.Update))
                ) && 
                (
                    this.Volumes == input.Volumes ||
                    this.Volumes != null &&
                    input.Volumes != null &&
                    this.Volumes.SequenceEqual(input.Volumes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affinities != null)
                {
                    hashCode = (hashCode * 59) + this.Affinities.GetHashCode();
                }
                if (this.Constraints != null)
                {
                    hashCode = (hashCode * 59) + this.Constraints.GetHashCode();
                }
                if (this.Consul != null)
                {
                    hashCode = (hashCode * 59) + this.Consul.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.EphemeralDisk != null)
                {
                    hashCode = (hashCode * 59) + this.EphemeralDisk.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxClientDisconnect.GetHashCode();
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.Migrate != null)
                {
                    hashCode = (hashCode * 59) + this.Migrate.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Networks != null)
                {
                    hashCode = (hashCode * 59) + this.Networks.GetHashCode();
                }
                if (this.ReschedulePolicy != null)
                {
                    hashCode = (hashCode * 59) + this.ReschedulePolicy.GetHashCode();
                }
                if (this.RestartPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.RestartPolicy.GetHashCode();
                }
                if (this.Scaling != null)
                {
                    hashCode = (hashCode * 59) + this.Scaling.GetHashCode();
                }
                if (this.Services != null)
                {
                    hashCode = (hashCode * 59) + this.Services.GetHashCode();
                }
                if (this.ShutdownDelay != null)
                {
                    hashCode = (hashCode * 59) + this.ShutdownDelay.GetHashCode();
                }
                if (this.Spreads != null)
                {
                    hashCode = (hashCode * 59) + this.Spreads.GetHashCode();
                }
                if (this.StopAfterClientDisconnect != null)
                {
                    hashCode = (hashCode * 59) + this.StopAfterClientDisconnect.GetHashCode();
                }
                if (this.Tasks != null)
                {
                    hashCode = (hashCode * 59) + this.Tasks.GetHashCode();
                }
                if (this.Update != null)
                {
                    hashCode = (hashCode * 59) + this.Update.GetHashCode();
                }
                if (this.Volumes != null)
                {
                    hashCode = (hashCode * 59) + this.Volumes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
