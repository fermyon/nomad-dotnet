/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// VolumeMount
    /// </summary>
    [DataContract(Name = "VolumeMount")]
    public partial class VolumeMount : IEquatable<VolumeMount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeMount" /> class.
        /// </summary>
        /// <param name="destination">destination.</param>
        /// <param name="propagationMode">propagationMode.</param>
        /// <param name="varReadOnly">varReadOnly.</param>
        /// <param name="volume">volume.</param>
        public VolumeMount(string destination = default(string), string propagationMode = default(string), bool varReadOnly = default(bool), string volume = default(string))
        {
            this.Destination = destination;
            this.PropagationMode = propagationMode;
            this.VarReadOnly = varReadOnly;
            this.Volume = volume;
        }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "Destination", EmitDefaultValue = false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets PropagationMode
        /// </summary>
        [DataMember(Name = "PropagationMode", EmitDefaultValue = false)]
        public string PropagationMode { get; set; }

        /// <summary>
        /// Gets or Sets VarReadOnly
        /// </summary>
        [DataMember(Name = "ReadOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "Volume", EmitDefaultValue = false)]
        public string Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VolumeMount {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  PropagationMode: ").Append(PropagationMode).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeMount);
        }

        /// <summary>
        /// Returns true if VolumeMount instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeMount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeMount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.PropagationMode == input.PropagationMode ||
                    (this.PropagationMode != null &&
                    this.PropagationMode.Equals(input.PropagationMode))
                ) && 
                (
                    this.VarReadOnly == input.VarReadOnly ||
                    this.VarReadOnly.Equals(input.VarReadOnly)
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.PropagationMode != null)
                {
                    hashCode = (hashCode * 59) + this.PropagationMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarReadOnly.GetHashCode();
                if (this.Volume != null)
                {
                    hashCode = (hashCode * 59) + this.Volume.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
