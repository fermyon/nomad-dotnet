/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// DesiredUpdates
    /// </summary>
    [DataContract(Name = "DesiredUpdates")]
    public partial class DesiredUpdates : IEquatable<DesiredUpdates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DesiredUpdates" /> class.
        /// </summary>
        /// <param name="canary">canary.</param>
        /// <param name="destructiveUpdate">destructiveUpdate.</param>
        /// <param name="ignore">ignore.</param>
        /// <param name="inPlaceUpdate">inPlaceUpdate.</param>
        /// <param name="migrate">migrate.</param>
        /// <param name="place">place.</param>
        /// <param name="preemptions">preemptions.</param>
        /// <param name="stop">stop.</param>
        public DesiredUpdates(int canary = default(int), int destructiveUpdate = default(int), int ignore = default(int), int inPlaceUpdate = default(int), int migrate = default(int), int place = default(int), int preemptions = default(int), int stop = default(int))
        {
            this.Canary = canary;
            this.DestructiveUpdate = destructiveUpdate;
            this.Ignore = ignore;
            this.InPlaceUpdate = inPlaceUpdate;
            this.Migrate = migrate;
            this.Place = place;
            this.Preemptions = preemptions;
            this.Stop = stop;
        }

        /// <summary>
        /// Gets or Sets Canary
        /// </summary>
        [DataMember(Name = "Canary", EmitDefaultValue = false)]
        public int Canary { get; set; }

        /// <summary>
        /// Gets or Sets DestructiveUpdate
        /// </summary>
        [DataMember(Name = "DestructiveUpdate", EmitDefaultValue = false)]
        public int DestructiveUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Ignore
        /// </summary>
        [DataMember(Name = "Ignore", EmitDefaultValue = false)]
        public int Ignore { get; set; }

        /// <summary>
        /// Gets or Sets InPlaceUpdate
        /// </summary>
        [DataMember(Name = "InPlaceUpdate", EmitDefaultValue = false)]
        public int InPlaceUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Migrate
        /// </summary>
        [DataMember(Name = "Migrate", EmitDefaultValue = false)]
        public int Migrate { get; set; }

        /// <summary>
        /// Gets or Sets Place
        /// </summary>
        [DataMember(Name = "Place", EmitDefaultValue = false)]
        public int Place { get; set; }

        /// <summary>
        /// Gets or Sets Preemptions
        /// </summary>
        [DataMember(Name = "Preemptions", EmitDefaultValue = false)]
        public int Preemptions { get; set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name = "Stop", EmitDefaultValue = false)]
        public int Stop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DesiredUpdates {\n");
            sb.Append("  Canary: ").Append(Canary).Append("\n");
            sb.Append("  DestructiveUpdate: ").Append(DestructiveUpdate).Append("\n");
            sb.Append("  Ignore: ").Append(Ignore).Append("\n");
            sb.Append("  InPlaceUpdate: ").Append(InPlaceUpdate).Append("\n");
            sb.Append("  Migrate: ").Append(Migrate).Append("\n");
            sb.Append("  Place: ").Append(Place).Append("\n");
            sb.Append("  Preemptions: ").Append(Preemptions).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DesiredUpdates);
        }

        /// <summary>
        /// Returns true if DesiredUpdates instances are equal
        /// </summary>
        /// <param name="input">Instance of DesiredUpdates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesiredUpdates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Canary == input.Canary ||
                    this.Canary.Equals(input.Canary)
                ) && 
                (
                    this.DestructiveUpdate == input.DestructiveUpdate ||
                    this.DestructiveUpdate.Equals(input.DestructiveUpdate)
                ) && 
                (
                    this.Ignore == input.Ignore ||
                    this.Ignore.Equals(input.Ignore)
                ) && 
                (
                    this.InPlaceUpdate == input.InPlaceUpdate ||
                    this.InPlaceUpdate.Equals(input.InPlaceUpdate)
                ) && 
                (
                    this.Migrate == input.Migrate ||
                    this.Migrate.Equals(input.Migrate)
                ) && 
                (
                    this.Place == input.Place ||
                    this.Place.Equals(input.Place)
                ) && 
                (
                    this.Preemptions == input.Preemptions ||
                    this.Preemptions.Equals(input.Preemptions)
                ) && 
                (
                    this.Stop == input.Stop ||
                    this.Stop.Equals(input.Stop)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Canary.GetHashCode();
                hashCode = (hashCode * 59) + this.DestructiveUpdate.GetHashCode();
                hashCode = (hashCode * 59) + this.Ignore.GetHashCode();
                hashCode = (hashCode * 59) + this.InPlaceUpdate.GetHashCode();
                hashCode = (hashCode * 59) + this.Migrate.GetHashCode();
                hashCode = (hashCode * 59) + this.Place.GetHashCode();
                hashCode = (hashCode * 59) + this.Preemptions.GetHashCode();
                hashCode = (hashCode * 59) + this.Stop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Canary (int) maximum
            if (this.Canary > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Canary, must be a value less than or equal to 384.", new [] { "Canary" });
            }

            // Canary (int) minimum
            if (this.Canary < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Canary, must be a value greater than or equal to 0.", new [] { "Canary" });
            }

            // DestructiveUpdate (int) maximum
            if (this.DestructiveUpdate > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestructiveUpdate, must be a value less than or equal to 384.", new [] { "DestructiveUpdate" });
            }

            // DestructiveUpdate (int) minimum
            if (this.DestructiveUpdate < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DestructiveUpdate, must be a value greater than or equal to 0.", new [] { "DestructiveUpdate" });
            }

            // Ignore (int) maximum
            if (this.Ignore > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ignore, must be a value less than or equal to 384.", new [] { "Ignore" });
            }

            // Ignore (int) minimum
            if (this.Ignore < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ignore, must be a value greater than or equal to 0.", new [] { "Ignore" });
            }

            // InPlaceUpdate (int) maximum
            if (this.InPlaceUpdate > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InPlaceUpdate, must be a value less than or equal to 384.", new [] { "InPlaceUpdate" });
            }

            // InPlaceUpdate (int) minimum
            if (this.InPlaceUpdate < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InPlaceUpdate, must be a value greater than or equal to 0.", new [] { "InPlaceUpdate" });
            }

            // Migrate (int) maximum
            if (this.Migrate > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Migrate, must be a value less than or equal to 384.", new [] { "Migrate" });
            }

            // Migrate (int) minimum
            if (this.Migrate < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Migrate, must be a value greater than or equal to 0.", new [] { "Migrate" });
            }

            // Place (int) maximum
            if (this.Place > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Place, must be a value less than or equal to 384.", new [] { "Place" });
            }

            // Place (int) minimum
            if (this.Place < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Place, must be a value greater than or equal to 0.", new [] { "Place" });
            }

            // Preemptions (int) maximum
            if (this.Preemptions > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Preemptions, must be a value less than or equal to 384.", new [] { "Preemptions" });
            }

            // Preemptions (int) minimum
            if (this.Preemptions < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Preemptions, must be a value greater than or equal to 0.", new [] { "Preemptions" });
            }

            // Stop (int) maximum
            if (this.Stop > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Stop, must be a value less than or equal to 384.", new [] { "Stop" });
            }

            // Stop (int) minimum
            if (this.Stop < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Stop, must be a value greater than or equal to 0.", new [] { "Stop" });
            }

            yield break;
        }
    }

}
