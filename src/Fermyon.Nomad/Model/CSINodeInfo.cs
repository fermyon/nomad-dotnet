/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// CSINodeInfo
    /// </summary>
    [DataContract(Name = "CSINodeInfo")]
    public partial class CSINodeInfo : IEquatable<CSINodeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSINodeInfo" /> class.
        /// </summary>
        /// <param name="accessibleTopology">accessibleTopology.</param>
        /// <param name="iD">iD.</param>
        /// <param name="maxVolumes">maxVolumes.</param>
        /// <param name="requiresNodeStageVolume">requiresNodeStageVolume.</param>
        /// <param name="supportsCondition">supportsCondition.</param>
        /// <param name="supportsExpand">supportsExpand.</param>
        /// <param name="supportsStats">supportsStats.</param>
        public CSINodeInfo(CSITopology accessibleTopology = default(CSITopology), string iD = default(string), long maxVolumes = default(long), bool requiresNodeStageVolume = default(bool), bool supportsCondition = default(bool), bool supportsExpand = default(bool), bool supportsStats = default(bool))
        {
            this.AccessibleTopology = accessibleTopology;
            this.ID = iD;
            this.MaxVolumes = maxVolumes;
            this.RequiresNodeStageVolume = requiresNodeStageVolume;
            this.SupportsCondition = supportsCondition;
            this.SupportsExpand = supportsExpand;
            this.SupportsStats = supportsStats;
        }

        /// <summary>
        /// Gets or Sets AccessibleTopology
        /// </summary>
        [DataMember(Name = "AccessibleTopology", EmitDefaultValue = false)]
        public CSITopology AccessibleTopology { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets MaxVolumes
        /// </summary>
        [DataMember(Name = "MaxVolumes", EmitDefaultValue = false)]
        public long MaxVolumes { get; set; }

        /// <summary>
        /// Gets or Sets RequiresNodeStageVolume
        /// </summary>
        [DataMember(Name = "RequiresNodeStageVolume", EmitDefaultValue = true)]
        public bool RequiresNodeStageVolume { get; set; }

        /// <summary>
        /// Gets or Sets SupportsCondition
        /// </summary>
        [DataMember(Name = "SupportsCondition", EmitDefaultValue = true)]
        public bool SupportsCondition { get; set; }

        /// <summary>
        /// Gets or Sets SupportsExpand
        /// </summary>
        [DataMember(Name = "SupportsExpand", EmitDefaultValue = true)]
        public bool SupportsExpand { get; set; }

        /// <summary>
        /// Gets or Sets SupportsStats
        /// </summary>
        [DataMember(Name = "SupportsStats", EmitDefaultValue = true)]
        public bool SupportsStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CSINodeInfo {\n");
            sb.Append("  AccessibleTopology: ").Append(AccessibleTopology).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  MaxVolumes: ").Append(MaxVolumes).Append("\n");
            sb.Append("  RequiresNodeStageVolume: ").Append(RequiresNodeStageVolume).Append("\n");
            sb.Append("  SupportsCondition: ").Append(SupportsCondition).Append("\n");
            sb.Append("  SupportsExpand: ").Append(SupportsExpand).Append("\n");
            sb.Append("  SupportsStats: ").Append(SupportsStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSINodeInfo);
        }

        /// <summary>
        /// Returns true if CSINodeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CSINodeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSINodeInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessibleTopology == input.AccessibleTopology ||
                    (this.AccessibleTopology != null &&
                    this.AccessibleTopology.Equals(input.AccessibleTopology))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.MaxVolumes == input.MaxVolumes ||
                    this.MaxVolumes.Equals(input.MaxVolumes)
                ) && 
                (
                    this.RequiresNodeStageVolume == input.RequiresNodeStageVolume ||
                    this.RequiresNodeStageVolume.Equals(input.RequiresNodeStageVolume)
                ) && 
                (
                    this.SupportsCondition == input.SupportsCondition ||
                    this.SupportsCondition.Equals(input.SupportsCondition)
                ) && 
                (
                    this.SupportsExpand == input.SupportsExpand ||
                    this.SupportsExpand.Equals(input.SupportsExpand)
                ) && 
                (
                    this.SupportsStats == input.SupportsStats ||
                    this.SupportsStats.Equals(input.SupportsStats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessibleTopology != null)
                {
                    hashCode = (hashCode * 59) + this.AccessibleTopology.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxVolumes.GetHashCode();
                hashCode = (hashCode * 59) + this.RequiresNodeStageVolume.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsCondition.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsExpand.GetHashCode();
                hashCode = (hashCode * 59) + this.SupportsStats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
