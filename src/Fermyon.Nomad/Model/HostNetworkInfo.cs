/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// HostNetworkInfo
    /// </summary>
    [DataContract(Name = "HostNetworkInfo")]
    public partial class HostNetworkInfo : IEquatable<HostNetworkInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostNetworkInfo" /> class.
        /// </summary>
        /// <param name="cIDR">cIDR.</param>
        /// <param name="varInterface">varInterface.</param>
        /// <param name="name">name.</param>
        /// <param name="reservedPorts">reservedPorts.</param>
        public HostNetworkInfo(string cIDR = default(string), string varInterface = default(string), string name = default(string), string reservedPorts = default(string))
        {
            this.CIDR = cIDR;
            this.VarInterface = varInterface;
            this.Name = name;
            this.ReservedPorts = reservedPorts;
        }

        /// <summary>
        /// Gets or Sets CIDR
        /// </summary>
        [DataMember(Name = "CIDR", EmitDefaultValue = false)]
        public string CIDR { get; set; }

        /// <summary>
        /// Gets or Sets VarInterface
        /// </summary>
        [DataMember(Name = "Interface", EmitDefaultValue = false)]
        public string VarInterface { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReservedPorts
        /// </summary>
        [DataMember(Name = "ReservedPorts", EmitDefaultValue = false)]
        public string ReservedPorts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HostNetworkInfo {\n");
            sb.Append("  CIDR: ").Append(CIDR).Append("\n");
            sb.Append("  VarInterface: ").Append(VarInterface).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReservedPorts: ").Append(ReservedPorts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostNetworkInfo);
        }

        /// <summary>
        /// Returns true if HostNetworkInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of HostNetworkInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostNetworkInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CIDR == input.CIDR ||
                    (this.CIDR != null &&
                    this.CIDR.Equals(input.CIDR))
                ) && 
                (
                    this.VarInterface == input.VarInterface ||
                    (this.VarInterface != null &&
                    this.VarInterface.Equals(input.VarInterface))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ReservedPorts == input.ReservedPorts ||
                    (this.ReservedPorts != null &&
                    this.ReservedPorts.Equals(input.ReservedPorts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CIDR != null)
                {
                    hashCode = (hashCode * 59) + this.CIDR.GetHashCode();
                }
                if (this.VarInterface != null)
                {
                    hashCode = (hashCode * 59) + this.VarInterface.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ReservedPorts != null)
                {
                    hashCode = (hashCode * 59) + this.ReservedPorts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
