/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// MigrateStrategy
    /// </summary>
    [DataContract(Name = "MigrateStrategy")]
    public partial class MigrateStrategy : IEquatable<MigrateStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MigrateStrategy" /> class.
        /// </summary>
        /// <param name="healthCheck">healthCheck.</param>
        /// <param name="healthyDeadline">healthyDeadline.</param>
        /// <param name="maxParallel">maxParallel.</param>
        /// <param name="minHealthyTime">minHealthyTime.</param>
        public MigrateStrategy(string healthCheck = default(string), long healthyDeadline = default(long), int maxParallel = default(int), long minHealthyTime = default(long))
        {
            this.HealthCheck = healthCheck;
            this.HealthyDeadline = healthyDeadline;
            this.MaxParallel = maxParallel;
            this.MinHealthyTime = minHealthyTime;
        }

        /// <summary>
        /// Gets or Sets HealthCheck
        /// </summary>
        [DataMember(Name = "HealthCheck", EmitDefaultValue = false)]
        public string HealthCheck { get; set; }

        /// <summary>
        /// Gets or Sets HealthyDeadline
        /// </summary>
        [DataMember(Name = "HealthyDeadline", EmitDefaultValue = false)]
        public long HealthyDeadline { get; set; }

        /// <summary>
        /// Gets or Sets MaxParallel
        /// </summary>
        [DataMember(Name = "MaxParallel", EmitDefaultValue = false)]
        public int MaxParallel { get; set; }

        /// <summary>
        /// Gets or Sets MinHealthyTime
        /// </summary>
        [DataMember(Name = "MinHealthyTime", EmitDefaultValue = false)]
        public long MinHealthyTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MigrateStrategy {\n");
            sb.Append("  HealthCheck: ").Append(HealthCheck).Append("\n");
            sb.Append("  HealthyDeadline: ").Append(HealthyDeadline).Append("\n");
            sb.Append("  MaxParallel: ").Append(MaxParallel).Append("\n");
            sb.Append("  MinHealthyTime: ").Append(MinHealthyTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MigrateStrategy);
        }

        /// <summary>
        /// Returns true if MigrateStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of MigrateStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MigrateStrategy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HealthCheck == input.HealthCheck ||
                    (this.HealthCheck != null &&
                    this.HealthCheck.Equals(input.HealthCheck))
                ) && 
                (
                    this.HealthyDeadline == input.HealthyDeadline ||
                    this.HealthyDeadline.Equals(input.HealthyDeadline)
                ) && 
                (
                    this.MaxParallel == input.MaxParallel ||
                    this.MaxParallel.Equals(input.MaxParallel)
                ) && 
                (
                    this.MinHealthyTime == input.MinHealthyTime ||
                    this.MinHealthyTime.Equals(input.MinHealthyTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HealthCheck != null)
                {
                    hashCode = (hashCode * 59) + this.HealthCheck.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HealthyDeadline.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxParallel.GetHashCode();
                hashCode = (hashCode * 59) + this.MinHealthyTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
