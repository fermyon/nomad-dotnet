/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Spread
    /// </summary>
    [DataContract(Name = "Spread")]
    public partial class Spread : IEquatable<Spread>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Spread" /> class.
        /// </summary>
        /// <param name="attribute">attribute.</param>
        /// <param name="spreadTarget">spreadTarget.</param>
        /// <param name="weight">weight.</param>
        public Spread(string attribute = default(string), List<SpreadTarget> spreadTarget = default(List<SpreadTarget>), int weight = default(int))
        {
            this.Attribute = attribute;
            this.SpreadTarget = spreadTarget;
            this.Weight = weight;
        }

        /// <summary>
        /// Gets or Sets Attribute
        /// </summary>
        [DataMember(Name = "Attribute", EmitDefaultValue = false)]
        public string Attribute { get; set; }

        /// <summary>
        /// Gets or Sets SpreadTarget
        /// </summary>
        [DataMember(Name = "SpreadTarget", EmitDefaultValue = false)]
        public List<SpreadTarget> SpreadTarget { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "Weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Spread {\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  SpreadTarget: ").Append(SpreadTarget).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Spread);
        }

        /// <summary>
        /// Returns true if Spread instances are equal
        /// </summary>
        /// <param name="input">Instance of Spread to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Spread input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                ) && 
                (
                    this.SpreadTarget == input.SpreadTarget ||
                    this.SpreadTarget != null &&
                    input.SpreadTarget != null &&
                    this.SpreadTarget.SequenceEqual(input.SpreadTarget)
                ) && 
                (
                    this.Weight == input.Weight ||
                    this.Weight.Equals(input.Weight)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attribute != null)
                {
                    hashCode = (hashCode * 59) + this.Attribute.GetHashCode();
                }
                if (this.SpreadTarget != null)
                {
                    hashCode = (hashCode * 59) + this.SpreadTarget.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Weight (int) maximum
            if (this.Weight > (int)127)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Weight, must be a value less than or equal to 127.", new [] { "Weight" });
            }

            // Weight (int) minimum
            if (this.Weight < (int)-128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Weight, must be a value greater than or equal to -128.", new [] { "Weight" });
            }

            yield break;
        }
    }

}
