/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// VolumeRequest
    /// </summary>
    [DataContract(Name = "VolumeRequest")]
    public partial class VolumeRequest : IEquatable<VolumeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VolumeRequest" /> class.
        /// </summary>
        /// <param name="accessMode">accessMode.</param>
        /// <param name="attachmentMode">attachmentMode.</param>
        /// <param name="mountOptions">mountOptions.</param>
        /// <param name="name">name.</param>
        /// <param name="perAlloc">perAlloc.</param>
        /// <param name="varReadOnly">varReadOnly.</param>
        /// <param name="source">source.</param>
        /// <param name="type">type.</param>
        public VolumeRequest(string accessMode = default(string), string attachmentMode = default(string), CSIMountOptions mountOptions = default(CSIMountOptions), string name = default(string), bool perAlloc = default(bool), bool varReadOnly = default(bool), string source = default(string), string type = default(string))
        {
            this.AccessMode = accessMode;
            this.AttachmentMode = attachmentMode;
            this.MountOptions = mountOptions;
            this.Name = name;
            this.PerAlloc = perAlloc;
            this.VarReadOnly = varReadOnly;
            this.Source = source;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets AccessMode
        /// </summary>
        [DataMember(Name = "AccessMode", EmitDefaultValue = false)]
        public string AccessMode { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentMode
        /// </summary>
        [DataMember(Name = "AttachmentMode", EmitDefaultValue = false)]
        public string AttachmentMode { get; set; }

        /// <summary>
        /// Gets or Sets MountOptions
        /// </summary>
        [DataMember(Name = "MountOptions", EmitDefaultValue = false)]
        public CSIMountOptions MountOptions { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PerAlloc
        /// </summary>
        [DataMember(Name = "PerAlloc", EmitDefaultValue = true)]
        public bool PerAlloc { get; set; }

        /// <summary>
        /// Gets or Sets VarReadOnly
        /// </summary>
        [DataMember(Name = "ReadOnly", EmitDefaultValue = true)]
        public bool VarReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "Source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VolumeRequest {\n");
            sb.Append("  AccessMode: ").Append(AccessMode).Append("\n");
            sb.Append("  AttachmentMode: ").Append(AttachmentMode).Append("\n");
            sb.Append("  MountOptions: ").Append(MountOptions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PerAlloc: ").Append(PerAlloc).Append("\n");
            sb.Append("  VarReadOnly: ").Append(VarReadOnly).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VolumeRequest);
        }

        /// <summary>
        /// Returns true if VolumeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of VolumeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VolumeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessMode == input.AccessMode ||
                    (this.AccessMode != null &&
                    this.AccessMode.Equals(input.AccessMode))
                ) && 
                (
                    this.AttachmentMode == input.AttachmentMode ||
                    (this.AttachmentMode != null &&
                    this.AttachmentMode.Equals(input.AttachmentMode))
                ) && 
                (
                    this.MountOptions == input.MountOptions ||
                    (this.MountOptions != null &&
                    this.MountOptions.Equals(input.MountOptions))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PerAlloc == input.PerAlloc ||
                    this.PerAlloc.Equals(input.PerAlloc)
                ) && 
                (
                    this.VarReadOnly == input.VarReadOnly ||
                    this.VarReadOnly.Equals(input.VarReadOnly)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessMode != null)
                {
                    hashCode = (hashCode * 59) + this.AccessMode.GetHashCode();
                }
                if (this.AttachmentMode != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentMode.GetHashCode();
                }
                if (this.MountOptions != null)
                {
                    hashCode = (hashCode * 59) + this.MountOptions.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PerAlloc.GetHashCode();
                hashCode = (hashCode * 59) + this.VarReadOnly.GetHashCode();
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
