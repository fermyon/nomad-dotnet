/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// TaskGroupSummary
    /// </summary>
    [DataContract(Name = "TaskGroupSummary")]
    public partial class TaskGroupSummary : IEquatable<TaskGroupSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskGroupSummary" /> class.
        /// </summary>
        /// <param name="complete">complete.</param>
        /// <param name="failed">failed.</param>
        /// <param name="lost">lost.</param>
        /// <param name="queued">queued.</param>
        /// <param name="running">running.</param>
        /// <param name="starting">starting.</param>
        /// <param name="unknown">unknown.</param>
        public TaskGroupSummary(int complete = default(int), int failed = default(int), int lost = default(int), int queued = default(int), int running = default(int), int starting = default(int), int unknown = default(int))
        {
            this.Complete = complete;
            this.Failed = failed;
            this.Lost = lost;
            this.Queued = queued;
            this.Running = running;
            this.Starting = starting;
            this.Unknown = unknown;
        }

        /// <summary>
        /// Gets or Sets Complete
        /// </summary>
        [DataMember(Name = "Complete", EmitDefaultValue = false)]
        public int Complete { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name = "Failed", EmitDefaultValue = false)]
        public int Failed { get; set; }

        /// <summary>
        /// Gets or Sets Lost
        /// </summary>
        [DataMember(Name = "Lost", EmitDefaultValue = false)]
        public int Lost { get; set; }

        /// <summary>
        /// Gets or Sets Queued
        /// </summary>
        [DataMember(Name = "Queued", EmitDefaultValue = false)]
        public int Queued { get; set; }

        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name = "Running", EmitDefaultValue = false)]
        public int Running { get; set; }

        /// <summary>
        /// Gets or Sets Starting
        /// </summary>
        [DataMember(Name = "Starting", EmitDefaultValue = false)]
        public int Starting { get; set; }

        /// <summary>
        /// Gets or Sets Unknown
        /// </summary>
        [DataMember(Name = "Unknown", EmitDefaultValue = false)]
        public int Unknown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaskGroupSummary {\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Lost: ").Append(Lost).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Starting: ").Append(Starting).Append("\n");
            sb.Append("  Unknown: ").Append(Unknown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskGroupSummary);
        }

        /// <summary>
        /// Returns true if TaskGroupSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskGroupSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskGroupSummary input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Complete == input.Complete ||
                    this.Complete.Equals(input.Complete)
                ) && 
                (
                    this.Failed == input.Failed ||
                    this.Failed.Equals(input.Failed)
                ) && 
                (
                    this.Lost == input.Lost ||
                    this.Lost.Equals(input.Lost)
                ) && 
                (
                    this.Queued == input.Queued ||
                    this.Queued.Equals(input.Queued)
                ) && 
                (
                    this.Running == input.Running ||
                    this.Running.Equals(input.Running)
                ) && 
                (
                    this.Starting == input.Starting ||
                    this.Starting.Equals(input.Starting)
                ) && 
                (
                    this.Unknown == input.Unknown ||
                    this.Unknown.Equals(input.Unknown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Complete.GetHashCode();
                hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                hashCode = (hashCode * 59) + this.Lost.GetHashCode();
                hashCode = (hashCode * 59) + this.Queued.GetHashCode();
                hashCode = (hashCode * 59) + this.Running.GetHashCode();
                hashCode = (hashCode * 59) + this.Starting.GetHashCode();
                hashCode = (hashCode * 59) + this.Unknown.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
