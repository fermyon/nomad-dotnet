/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// PeriodicConfig
    /// </summary>
    [DataContract(Name = "PeriodicConfig")]
    public partial class PeriodicConfig : IEquatable<PeriodicConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodicConfig" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="prohibitOverlap">prohibitOverlap.</param>
        /// <param name="spec">spec.</param>
        /// <param name="specType">specType.</param>
        /// <param name="timeZone">timeZone.</param>
        public PeriodicConfig(bool enabled = default(bool), bool prohibitOverlap = default(bool), string spec = default(string), string specType = default(string), string timeZone = default(string))
        {
            this.Enabled = enabled;
            this.ProhibitOverlap = prohibitOverlap;
            this.Spec = spec;
            this.SpecType = specType;
            this.TimeZone = timeZone;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ProhibitOverlap
        /// </summary>
        [DataMember(Name = "ProhibitOverlap", EmitDefaultValue = true)]
        public bool ProhibitOverlap { get; set; }

        /// <summary>
        /// Gets or Sets Spec
        /// </summary>
        [DataMember(Name = "Spec", EmitDefaultValue = false)]
        public string Spec { get; set; }

        /// <summary>
        /// Gets or Sets SpecType
        /// </summary>
        [DataMember(Name = "SpecType", EmitDefaultValue = false)]
        public string SpecType { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name = "TimeZone", EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodicConfig {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ProhibitOverlap: ").Append(ProhibitOverlap).Append("\n");
            sb.Append("  Spec: ").Append(Spec).Append("\n");
            sb.Append("  SpecType: ").Append(SpecType).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodicConfig);
        }

        /// <summary>
        /// Returns true if PeriodicConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodicConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodicConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.ProhibitOverlap == input.ProhibitOverlap ||
                    this.ProhibitOverlap.Equals(input.ProhibitOverlap)
                ) && 
                (
                    this.Spec == input.Spec ||
                    (this.Spec != null &&
                    this.Spec.Equals(input.Spec))
                ) && 
                (
                    this.SpecType == input.SpecType ||
                    (this.SpecType != null &&
                    this.SpecType.Equals(input.SpecType))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.ProhibitOverlap.GetHashCode();
                if (this.Spec != null)
                {
                    hashCode = (hashCode * 59) + this.Spec.GetHashCode();
                }
                if (this.SpecType != null)
                {
                    hashCode = (hashCode * 59) + this.SpecType.GetHashCode();
                }
                if (this.TimeZone != null)
                {
                    hashCode = (hashCode * 59) + this.TimeZone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
