/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// PeriodicForceResponse
    /// </summary>
    [DataContract(Name = "PeriodicForceResponse")]
    public partial class PeriodicForceResponse : IEquatable<PeriodicForceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeriodicForceResponse" /> class.
        /// </summary>
        /// <param name="evalCreateIndex">evalCreateIndex.</param>
        /// <param name="evalID">evalID.</param>
        /// <param name="index">index.</param>
        public PeriodicForceResponse(int evalCreateIndex = default(int), string evalID = default(string), int index = default(int))
        {
            this.EvalCreateIndex = evalCreateIndex;
            this.EvalID = evalID;
            this.Index = index;
        }

        /// <summary>
        /// Gets or Sets EvalCreateIndex
        /// </summary>
        [DataMember(Name = "EvalCreateIndex", EmitDefaultValue = false)]
        public int EvalCreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets EvalID
        /// </summary>
        [DataMember(Name = "EvalID", EmitDefaultValue = false)]
        public string EvalID { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "Index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PeriodicForceResponse {\n");
            sb.Append("  EvalCreateIndex: ").Append(EvalCreateIndex).Append("\n");
            sb.Append("  EvalID: ").Append(EvalID).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeriodicForceResponse);
        }

        /// <summary>
        /// Returns true if PeriodicForceResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PeriodicForceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeriodicForceResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EvalCreateIndex == input.EvalCreateIndex ||
                    this.EvalCreateIndex.Equals(input.EvalCreateIndex)
                ) && 
                (
                    this.EvalID == input.EvalID ||
                    (this.EvalID != null &&
                    this.EvalID.Equals(input.EvalID))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EvalCreateIndex.GetHashCode();
                if (this.EvalID != null)
                {
                    hashCode = (hashCode * 59) + this.EvalID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EvalCreateIndex (int) maximum
            if (this.EvalCreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvalCreateIndex, must be a value less than or equal to 384.", new [] { "EvalCreateIndex" });
            }

            // EvalCreateIndex (int) minimum
            if (this.EvalCreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EvalCreateIndex, must be a value greater than or equal to 0.", new [] { "EvalCreateIndex" });
            }

            // Index (int) maximum
            if (this.Index > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Index, must be a value less than or equal to 384.", new [] { "Index" });
            }

            // Index (int) minimum
            if (this.Index < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Index, must be a value greater than or equal to 0.", new [] { "Index" });
            }

            yield break;
        }
    }

}
