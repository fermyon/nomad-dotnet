/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// AllocatedResources
    /// </summary>
    [DataContract(Name = "AllocatedResources")]
    public partial class AllocatedResources : IEquatable<AllocatedResources>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocatedResources" /> class.
        /// </summary>
        /// <param name="shared">shared.</param>
        /// <param name="tasks">tasks.</param>
        public AllocatedResources(AllocatedSharedResources shared = default(AllocatedSharedResources), Dictionary<string, AllocatedTaskResources> tasks = default(Dictionary<string, AllocatedTaskResources>))
        {
            this.Shared = shared;
            this.Tasks = tasks;
        }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "Shared", EmitDefaultValue = false)]
        public AllocatedSharedResources Shared { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name = "Tasks", EmitDefaultValue = false)]
        public Dictionary<string, AllocatedTaskResources> Tasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllocatedResources {\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocatedResources);
        }

        /// <summary>
        /// Returns true if AllocatedResources instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocatedResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocatedResources input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Shared == input.Shared ||
                    (this.Shared != null &&
                    this.Shared.Equals(input.Shared))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    input.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Shared != null)
                {
                    hashCode = (hashCode * 59) + this.Shared.GetHashCode();
                }
                if (this.Tasks != null)
                {
                    hashCode = (hashCode * 59) + this.Tasks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
