/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// PlanAnnotations
    /// </summary>
    [DataContract(Name = "PlanAnnotations")]
    public partial class PlanAnnotations : IEquatable<PlanAnnotations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanAnnotations" /> class.
        /// </summary>
        /// <param name="desiredTGUpdates">desiredTGUpdates.</param>
        /// <param name="preemptedAllocs">preemptedAllocs.</param>
        public PlanAnnotations(Dictionary<string, DesiredUpdates> desiredTGUpdates = default(Dictionary<string, DesiredUpdates>), List<AllocationListStub> preemptedAllocs = default(List<AllocationListStub>))
        {
            this.DesiredTGUpdates = desiredTGUpdates;
            this.PreemptedAllocs = preemptedAllocs;
        }

        /// <summary>
        /// Gets or Sets DesiredTGUpdates
        /// </summary>
        [DataMember(Name = "DesiredTGUpdates", EmitDefaultValue = false)]
        public Dictionary<string, DesiredUpdates> DesiredTGUpdates { get; set; }

        /// <summary>
        /// Gets or Sets PreemptedAllocs
        /// </summary>
        [DataMember(Name = "PreemptedAllocs", EmitDefaultValue = false)]
        public List<AllocationListStub> PreemptedAllocs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlanAnnotations {\n");
            sb.Append("  DesiredTGUpdates: ").Append(DesiredTGUpdates).Append("\n");
            sb.Append("  PreemptedAllocs: ").Append(PreemptedAllocs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanAnnotations);
        }

        /// <summary>
        /// Returns true if PlanAnnotations instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanAnnotations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanAnnotations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DesiredTGUpdates == input.DesiredTGUpdates ||
                    this.DesiredTGUpdates != null &&
                    input.DesiredTGUpdates != null &&
                    this.DesiredTGUpdates.SequenceEqual(input.DesiredTGUpdates)
                ) && 
                (
                    this.PreemptedAllocs == input.PreemptedAllocs ||
                    this.PreemptedAllocs != null &&
                    input.PreemptedAllocs != null &&
                    this.PreemptedAllocs.SequenceEqual(input.PreemptedAllocs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DesiredTGUpdates != null)
                {
                    hashCode = (hashCode * 59) + this.DesiredTGUpdates.GetHashCode();
                }
                if (this.PreemptedAllocs != null)
                {
                    hashCode = (hashCode * 59) + this.PreemptedAllocs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
