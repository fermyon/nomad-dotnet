/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// Job
    /// </summary>
    [DataContract(Name = "Job")]
    public partial class Job : IEquatable<Job>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        /// <param name="affinities">affinities.</param>
        /// <param name="allAtOnce">allAtOnce.</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="consulNamespace">consulNamespace.</param>
        /// <param name="consulToken">consulToken.</param>
        /// <param name="createIndex">createIndex.</param>
        /// <param name="datacenters">datacenters.</param>
        /// <param name="dispatchIdempotencyToken">dispatchIdempotencyToken.</param>
        /// <param name="dispatched">dispatched.</param>
        /// <param name="iD">iD.</param>
        /// <param name="jobModifyIndex">jobModifyIndex.</param>
        /// <param name="meta">meta.</param>
        /// <param name="migrate">migrate.</param>
        /// <param name="modifyIndex">modifyIndex.</param>
        /// <param name="multiregion">multiregion.</param>
        /// <param name="name">name.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="nomadTokenID">nomadTokenID.</param>
        /// <param name="parameterizedJob">parameterizedJob.</param>
        /// <param name="parentID">parentID.</param>
        /// <param name="payload">payload.</param>
        /// <param name="periodic">periodic.</param>
        /// <param name="priority">priority.</param>
        /// <param name="region">region.</param>
        /// <param name="reschedule">reschedule.</param>
        /// <param name="spreads">spreads.</param>
        /// <param name="stable">stable.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDescription">statusDescription.</param>
        /// <param name="stop">stop.</param>
        /// <param name="submitTime">submitTime.</param>
        /// <param name="taskGroups">taskGroups.</param>
        /// <param name="type">type.</param>
        /// <param name="update">update.</param>
        /// <param name="vaultNamespace">vaultNamespace.</param>
        /// <param name="vaultToken">vaultToken.</param>
        /// <param name="varVersion">varVersion.</param>
        public Job(List<Affinity> affinities = default(List<Affinity>), bool allAtOnce = default(bool), List<Constraint> constraints = default(List<Constraint>), string consulNamespace = default(string), string consulToken = default(string), int createIndex = default(int), List<string> datacenters = default(List<string>), string dispatchIdempotencyToken = default(string), bool dispatched = default(bool), string iD = default(string), int jobModifyIndex = default(int), Dictionary<string, string> meta = default(Dictionary<string, string>), MigrateStrategy migrate = default(MigrateStrategy), int modifyIndex = default(int), Multiregion multiregion = default(Multiregion), string name = default(string), string varNamespace = default(string), string nomadTokenID = default(string), ParameterizedJobConfig parameterizedJob = default(ParameterizedJobConfig), string parentID = default(string), byte[] payload = default(byte[]), PeriodicConfig periodic = default(PeriodicConfig), int priority = default(int), string region = default(string), ReschedulePolicy reschedule = default(ReschedulePolicy), List<Spread> spreads = default(List<Spread>), bool stable = default(bool), string status = default(string), string statusDescription = default(string), bool stop = default(bool), long submitTime = default(long), List<TaskGroup> taskGroups = default(List<TaskGroup>), string type = default(string), UpdateStrategy update = default(UpdateStrategy), string vaultNamespace = default(string), string vaultToken = default(string), int varVersion = default(int))
        {
            this.Affinities = affinities;
            this.AllAtOnce = allAtOnce;
            this.Constraints = constraints;
            this.ConsulNamespace = consulNamespace;
            this.ConsulToken = consulToken;
            this.CreateIndex = createIndex;
            this.Datacenters = datacenters;
            this.DispatchIdempotencyToken = dispatchIdempotencyToken;
            this.Dispatched = dispatched;
            this.ID = iD;
            this.JobModifyIndex = jobModifyIndex;
            this.Meta = meta;
            this.Migrate = migrate;
            this.ModifyIndex = modifyIndex;
            this.Multiregion = multiregion;
            this.Name = name;
            this.VarNamespace = varNamespace;
            this.NomadTokenID = nomadTokenID;
            this.ParameterizedJob = parameterizedJob;
            this.ParentID = parentID;
            this.Payload = payload;
            this.Periodic = periodic;
            this.Priority = priority;
            this.Region = region;
            this.Reschedule = reschedule;
            this.Spreads = spreads;
            this.Stable = stable;
            this.Status = status;
            this.StatusDescription = statusDescription;
            this.Stop = stop;
            this.SubmitTime = submitTime;
            this.TaskGroups = taskGroups;
            this.Type = type;
            this.Update = update;
            this.VaultNamespace = vaultNamespace;
            this.VaultToken = vaultToken;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// Gets or Sets Affinities
        /// </summary>
        [DataMember(Name = "Affinities", EmitDefaultValue = false)]
        public List<Affinity> Affinities { get; set; }

        /// <summary>
        /// Gets or Sets AllAtOnce
        /// </summary>
        [DataMember(Name = "AllAtOnce", EmitDefaultValue = true)]
        public bool AllAtOnce { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "Constraints", EmitDefaultValue = false)]
        public List<Constraint> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets ConsulNamespace
        /// </summary>
        [DataMember(Name = "ConsulNamespace", EmitDefaultValue = false)]
        public string ConsulNamespace { get; set; }

        /// <summary>
        /// Gets or Sets ConsulToken
        /// </summary>
        [DataMember(Name = "ConsulToken", EmitDefaultValue = false)]
        public string ConsulToken { get; set; }

        /// <summary>
        /// Gets or Sets CreateIndex
        /// </summary>
        [DataMember(Name = "CreateIndex", EmitDefaultValue = false)]
        public int CreateIndex { get; set; }

        /// <summary>
        /// Gets or Sets Datacenters
        /// </summary>
        [DataMember(Name = "Datacenters", EmitDefaultValue = false)]
        public List<string> Datacenters { get; set; }

        /// <summary>
        /// Gets or Sets DispatchIdempotencyToken
        /// </summary>
        [DataMember(Name = "DispatchIdempotencyToken", EmitDefaultValue = false)]
        public string DispatchIdempotencyToken { get; set; }

        /// <summary>
        /// Gets or Sets Dispatched
        /// </summary>
        [DataMember(Name = "Dispatched", EmitDefaultValue = true)]
        public bool Dispatched { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets JobModifyIndex
        /// </summary>
        [DataMember(Name = "JobModifyIndex", EmitDefaultValue = false)]
        public int JobModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "Meta", EmitDefaultValue = false)]
        public Dictionary<string, string> Meta { get; set; }

        /// <summary>
        /// Gets or Sets Migrate
        /// </summary>
        [DataMember(Name = "Migrate", EmitDefaultValue = false)]
        public MigrateStrategy Migrate { get; set; }

        /// <summary>
        /// Gets or Sets ModifyIndex
        /// </summary>
        [DataMember(Name = "ModifyIndex", EmitDefaultValue = false)]
        public int ModifyIndex { get; set; }

        /// <summary>
        /// Gets or Sets Multiregion
        /// </summary>
        [DataMember(Name = "Multiregion", EmitDefaultValue = false)]
        public Multiregion Multiregion { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets NomadTokenID
        /// </summary>
        [DataMember(Name = "NomadTokenID", EmitDefaultValue = false)]
        public string NomadTokenID { get; set; }

        /// <summary>
        /// Gets or Sets ParameterizedJob
        /// </summary>
        [DataMember(Name = "ParameterizedJob", EmitDefaultValue = false)]
        public ParameterizedJobConfig ParameterizedJob { get; set; }

        /// <summary>
        /// Gets or Sets ParentID
        /// </summary>
        [DataMember(Name = "ParentID", EmitDefaultValue = false)]
        public string ParentID { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "Payload", EmitDefaultValue = false)]
        public byte[] Payload { get; set; }

        /// <summary>
        /// Gets or Sets Periodic
        /// </summary>
        [DataMember(Name = "Periodic", EmitDefaultValue = false)]
        public PeriodicConfig Periodic { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Reschedule
        /// </summary>
        [DataMember(Name = "Reschedule", EmitDefaultValue = false)]
        public ReschedulePolicy Reschedule { get; set; }

        /// <summary>
        /// Gets or Sets Spreads
        /// </summary>
        [DataMember(Name = "Spreads", EmitDefaultValue = false)]
        public List<Spread> Spreads { get; set; }

        /// <summary>
        /// Gets or Sets Stable
        /// </summary>
        [DataMember(Name = "Stable", EmitDefaultValue = true)]
        public bool Stable { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDescription
        /// </summary>
        [DataMember(Name = "StatusDescription", EmitDefaultValue = false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name = "Stop", EmitDefaultValue = true)]
        public bool Stop { get; set; }

        /// <summary>
        /// Gets or Sets SubmitTime
        /// </summary>
        [DataMember(Name = "SubmitTime", EmitDefaultValue = false)]
        public long SubmitTime { get; set; }

        /// <summary>
        /// Gets or Sets TaskGroups
        /// </summary>
        [DataMember(Name = "TaskGroups", EmitDefaultValue = false)]
        public List<TaskGroup> TaskGroups { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name = "Update", EmitDefaultValue = false)]
        public UpdateStrategy Update { get; set; }

        /// <summary>
        /// Gets or Sets VaultNamespace
        /// </summary>
        [DataMember(Name = "VaultNamespace", EmitDefaultValue = false)]
        public string VaultNamespace { get; set; }

        /// <summary>
        /// Gets or Sets VaultToken
        /// </summary>
        [DataMember(Name = "VaultToken", EmitDefaultValue = false)]
        public string VaultToken { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "Version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Job {\n");
            sb.Append("  Affinities: ").Append(Affinities).Append("\n");
            sb.Append("  AllAtOnce: ").Append(AllAtOnce).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  ConsulNamespace: ").Append(ConsulNamespace).Append("\n");
            sb.Append("  ConsulToken: ").Append(ConsulToken).Append("\n");
            sb.Append("  CreateIndex: ").Append(CreateIndex).Append("\n");
            sb.Append("  Datacenters: ").Append(Datacenters).Append("\n");
            sb.Append("  DispatchIdempotencyToken: ").Append(DispatchIdempotencyToken).Append("\n");
            sb.Append("  Dispatched: ").Append(Dispatched).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  JobModifyIndex: ").Append(JobModifyIndex).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Migrate: ").Append(Migrate).Append("\n");
            sb.Append("  ModifyIndex: ").Append(ModifyIndex).Append("\n");
            sb.Append("  Multiregion: ").Append(Multiregion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  NomadTokenID: ").Append(NomadTokenID).Append("\n");
            sb.Append("  ParameterizedJob: ").Append(ParameterizedJob).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Periodic: ").Append(Periodic).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Reschedule: ").Append(Reschedule).Append("\n");
            sb.Append("  Spreads: ").Append(Spreads).Append("\n");
            sb.Append("  Stable: ").Append(Stable).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  SubmitTime: ").Append(SubmitTime).Append("\n");
            sb.Append("  TaskGroups: ").Append(TaskGroups).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  VaultNamespace: ").Append(VaultNamespace).Append("\n");
            sb.Append("  VaultToken: ").Append(VaultToken).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Job);
        }

        /// <summary>
        /// Returns true if Job instances are equal
        /// </summary>
        /// <param name="input">Instance of Job to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Job input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Affinities == input.Affinities ||
                    this.Affinities != null &&
                    input.Affinities != null &&
                    this.Affinities.SequenceEqual(input.Affinities)
                ) && 
                (
                    this.AllAtOnce == input.AllAtOnce ||
                    this.AllAtOnce.Equals(input.AllAtOnce)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.ConsulNamespace == input.ConsulNamespace ||
                    (this.ConsulNamespace != null &&
                    this.ConsulNamespace.Equals(input.ConsulNamespace))
                ) && 
                (
                    this.ConsulToken == input.ConsulToken ||
                    (this.ConsulToken != null &&
                    this.ConsulToken.Equals(input.ConsulToken))
                ) && 
                (
                    this.CreateIndex == input.CreateIndex ||
                    this.CreateIndex.Equals(input.CreateIndex)
                ) && 
                (
                    this.Datacenters == input.Datacenters ||
                    this.Datacenters != null &&
                    input.Datacenters != null &&
                    this.Datacenters.SequenceEqual(input.Datacenters)
                ) && 
                (
                    this.DispatchIdempotencyToken == input.DispatchIdempotencyToken ||
                    (this.DispatchIdempotencyToken != null &&
                    this.DispatchIdempotencyToken.Equals(input.DispatchIdempotencyToken))
                ) && 
                (
                    this.Dispatched == input.Dispatched ||
                    this.Dispatched.Equals(input.Dispatched)
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.JobModifyIndex == input.JobModifyIndex ||
                    this.JobModifyIndex.Equals(input.JobModifyIndex)
                ) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && 
                (
                    this.Migrate == input.Migrate ||
                    (this.Migrate != null &&
                    this.Migrate.Equals(input.Migrate))
                ) && 
                (
                    this.ModifyIndex == input.ModifyIndex ||
                    this.ModifyIndex.Equals(input.ModifyIndex)
                ) && 
                (
                    this.Multiregion == input.Multiregion ||
                    (this.Multiregion != null &&
                    this.Multiregion.Equals(input.Multiregion))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.NomadTokenID == input.NomadTokenID ||
                    (this.NomadTokenID != null &&
                    this.NomadTokenID.Equals(input.NomadTokenID))
                ) && 
                (
                    this.ParameterizedJob == input.ParameterizedJob ||
                    (this.ParameterizedJob != null &&
                    this.ParameterizedJob.Equals(input.ParameterizedJob))
                ) && 
                (
                    this.ParentID == input.ParentID ||
                    (this.ParentID != null &&
                    this.ParentID.Equals(input.ParentID))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.Periodic == input.Periodic ||
                    (this.Periodic != null &&
                    this.Periodic.Equals(input.Periodic))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Reschedule == input.Reschedule ||
                    (this.Reschedule != null &&
                    this.Reschedule.Equals(input.Reschedule))
                ) && 
                (
                    this.Spreads == input.Spreads ||
                    this.Spreads != null &&
                    input.Spreads != null &&
                    this.Spreads.SequenceEqual(input.Spreads)
                ) && 
                (
                    this.Stable == input.Stable ||
                    this.Stable.Equals(input.Stable)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.Stop == input.Stop ||
                    this.Stop.Equals(input.Stop)
                ) && 
                (
                    this.SubmitTime == input.SubmitTime ||
                    this.SubmitTime.Equals(input.SubmitTime)
                ) && 
                (
                    this.TaskGroups == input.TaskGroups ||
                    this.TaskGroups != null &&
                    input.TaskGroups != null &&
                    this.TaskGroups.SequenceEqual(input.TaskGroups)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Update == input.Update ||
                    (this.Update != null &&
                    this.Update.Equals(input.Update))
                ) && 
                (
                    this.VaultNamespace == input.VaultNamespace ||
                    (this.VaultNamespace != null &&
                    this.VaultNamespace.Equals(input.VaultNamespace))
                ) && 
                (
                    this.VaultToken == input.VaultToken ||
                    (this.VaultToken != null &&
                    this.VaultToken.Equals(input.VaultToken))
                ) && 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affinities != null)
                {
                    hashCode = (hashCode * 59) + this.Affinities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllAtOnce.GetHashCode();
                if (this.Constraints != null)
                {
                    hashCode = (hashCode * 59) + this.Constraints.GetHashCode();
                }
                if (this.ConsulNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.ConsulNamespace.GetHashCode();
                }
                if (this.ConsulToken != null)
                {
                    hashCode = (hashCode * 59) + this.ConsulToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateIndex.GetHashCode();
                if (this.Datacenters != null)
                {
                    hashCode = (hashCode * 59) + this.Datacenters.GetHashCode();
                }
                if (this.DispatchIdempotencyToken != null)
                {
                    hashCode = (hashCode * 59) + this.DispatchIdempotencyToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Dispatched.GetHashCode();
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobModifyIndex.GetHashCode();
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.Migrate != null)
                {
                    hashCode = (hashCode * 59) + this.Migrate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModifyIndex.GetHashCode();
                if (this.Multiregion != null)
                {
                    hashCode = (hashCode * 59) + this.Multiregion.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.NomadTokenID != null)
                {
                    hashCode = (hashCode * 59) + this.NomadTokenID.GetHashCode();
                }
                if (this.ParameterizedJob != null)
                {
                    hashCode = (hashCode * 59) + this.ParameterizedJob.GetHashCode();
                }
                if (this.ParentID != null)
                {
                    hashCode = (hashCode * 59) + this.ParentID.GetHashCode();
                }
                if (this.Payload != null)
                {
                    hashCode = (hashCode * 59) + this.Payload.GetHashCode();
                }
                if (this.Periodic != null)
                {
                    hashCode = (hashCode * 59) + this.Periodic.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.Reschedule != null)
                {
                    hashCode = (hashCode * 59) + this.Reschedule.GetHashCode();
                }
                if (this.Spreads != null)
                {
                    hashCode = (hashCode * 59) + this.Spreads.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stable.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StatusDescription != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stop.GetHashCode();
                hashCode = (hashCode * 59) + this.SubmitTime.GetHashCode();
                if (this.TaskGroups != null)
                {
                    hashCode = (hashCode * 59) + this.TaskGroups.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Update != null)
                {
                    hashCode = (hashCode * 59) + this.Update.GetHashCode();
                }
                if (this.VaultNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VaultNamespace.GetHashCode();
                }
                if (this.VaultToken != null)
                {
                    hashCode = (hashCode * 59) + this.VaultToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreateIndex (int) maximum
            if (this.CreateIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value less than or equal to 384.", new [] { "CreateIndex" });
            }

            // CreateIndex (int) minimum
            if (this.CreateIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreateIndex, must be a value greater than or equal to 0.", new [] { "CreateIndex" });
            }

            // JobModifyIndex (int) maximum
            if (this.JobModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value less than or equal to 384.", new [] { "JobModifyIndex" });
            }

            // JobModifyIndex (int) minimum
            if (this.JobModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobModifyIndex, must be a value greater than or equal to 0.", new [] { "JobModifyIndex" });
            }

            // ModifyIndex (int) maximum
            if (this.ModifyIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value less than or equal to 384.", new [] { "ModifyIndex" });
            }

            // ModifyIndex (int) minimum
            if (this.ModifyIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModifyIndex, must be a value greater than or equal to 0.", new [] { "ModifyIndex" });
            }

            // VarVersion (int) maximum
            if (this.VarVersion > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarVersion, must be a value less than or equal to 384.", new [] { "VarVersion" });
            }

            // VarVersion (int) minimum
            if (this.VarVersion < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarVersion, must be a value greater than or equal to 0.", new [] { "VarVersion" });
            }

            yield break;
        }
    }

}
