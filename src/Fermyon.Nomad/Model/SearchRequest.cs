/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// SearchRequest
    /// </summary>
    [DataContract(Name = "SearchRequest")]
    public partial class SearchRequest : IEquatable<SearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequest" /> class.
        /// </summary>
        /// <param name="allowStale">allowStale.</param>
        /// <param name="authToken">authToken.</param>
        /// <param name="context">context.</param>
        /// <param name="filter">filter.</param>
        /// <param name="headers">headers.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="nextToken">nextToken.</param>
        /// <param name="varParams">varParams.</param>
        /// <param name="perPage">perPage.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="region">region.</param>
        /// <param name="reverse">reverse.</param>
        /// <param name="waitIndex">waitIndex.</param>
        /// <param name="waitTime">waitTime.</param>
        public SearchRequest(bool allowStale = default(bool), string authToken = default(string), string context = default(string), string filter = default(string), Dictionary<string, string> headers = default(Dictionary<string, string>), string varNamespace = default(string), string nextToken = default(string), Dictionary<string, string> varParams = default(Dictionary<string, string>), int perPage = default(int), string prefix = default(string), string region = default(string), bool reverse = default(bool), int waitIndex = default(int), long waitTime = default(long))
        {
            this.AllowStale = allowStale;
            this.AuthToken = authToken;
            this.Context = context;
            this.Filter = filter;
            this.Headers = headers;
            this.VarNamespace = varNamespace;
            this.NextToken = nextToken;
            this.VarParams = varParams;
            this.PerPage = perPage;
            this.Prefix = prefix;
            this.Region = region;
            this.Reverse = reverse;
            this.WaitIndex = waitIndex;
            this.WaitTime = waitTime;
        }

        /// <summary>
        /// Gets or Sets AllowStale
        /// </summary>
        [DataMember(Name = "AllowStale", EmitDefaultValue = true)]
        public bool AllowStale { get; set; }

        /// <summary>
        /// Gets or Sets AuthToken
        /// </summary>
        [DataMember(Name = "AuthToken", EmitDefaultValue = false)]
        public string AuthToken { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "Context", EmitDefaultValue = false)]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "Filter", EmitDefaultValue = false)]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "Headers", EmitDefaultValue = false)]
        public Dictionary<string, string> Headers { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "Namespace", EmitDefaultValue = false)]
        public string VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets NextToken
        /// </summary>
        [DataMember(Name = "NextToken", EmitDefaultValue = false)]
        public string NextToken { get; set; }

        /// <summary>
        /// Gets or Sets VarParams
        /// </summary>
        [DataMember(Name = "Params", EmitDefaultValue = false)]
        public Dictionary<string, string> VarParams { get; set; }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        [DataMember(Name = "PerPage", EmitDefaultValue = false)]
        public int PerPage { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "Prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "Region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets Reverse
        /// </summary>
        [DataMember(Name = "Reverse", EmitDefaultValue = true)]
        public bool Reverse { get; set; }

        /// <summary>
        /// Gets or Sets WaitIndex
        /// </summary>
        [DataMember(Name = "WaitIndex", EmitDefaultValue = false)]
        public int WaitIndex { get; set; }

        /// <summary>
        /// Gets or Sets WaitTime
        /// </summary>
        [DataMember(Name = "WaitTime", EmitDefaultValue = false)]
        public long WaitTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRequest {\n");
            sb.Append("  AllowStale: ").Append(AllowStale).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  NextToken: ").Append(NextToken).Append("\n");
            sb.Append("  VarParams: ").Append(VarParams).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Reverse: ").Append(Reverse).Append("\n");
            sb.Append("  WaitIndex: ").Append(WaitIndex).Append("\n");
            sb.Append("  WaitTime: ").Append(WaitTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchRequest);
        }

        /// <summary>
        /// Returns true if SearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllowStale == input.AllowStale ||
                    this.AllowStale.Equals(input.AllowStale)
                ) && 
                (
                    this.AuthToken == input.AuthToken ||
                    (this.AuthToken != null &&
                    this.AuthToken.Equals(input.AuthToken))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.VarNamespace == input.VarNamespace ||
                    (this.VarNamespace != null &&
                    this.VarNamespace.Equals(input.VarNamespace))
                ) && 
                (
                    this.NextToken == input.NextToken ||
                    (this.NextToken != null &&
                    this.NextToken.Equals(input.NextToken))
                ) && 
                (
                    this.VarParams == input.VarParams ||
                    this.VarParams != null &&
                    input.VarParams != null &&
                    this.VarParams.SequenceEqual(input.VarParams)
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    this.PerPage.Equals(input.PerPage)
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Reverse == input.Reverse ||
                    this.Reverse.Equals(input.Reverse)
                ) && 
                (
                    this.WaitIndex == input.WaitIndex ||
                    this.WaitIndex.Equals(input.WaitIndex)
                ) && 
                (
                    this.WaitTime == input.WaitTime ||
                    this.WaitTime.Equals(input.WaitTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AllowStale.GetHashCode();
                if (this.AuthToken != null)
                {
                    hashCode = (hashCode * 59) + this.AuthToken.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.Headers != null)
                {
                    hashCode = (hashCode * 59) + this.Headers.GetHashCode();
                }
                if (this.VarNamespace != null)
                {
                    hashCode = (hashCode * 59) + this.VarNamespace.GetHashCode();
                }
                if (this.NextToken != null)
                {
                    hashCode = (hashCode * 59) + this.NextToken.GetHashCode();
                }
                if (this.VarParams != null)
                {
                    hashCode = (hashCode * 59) + this.VarParams.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PerPage.GetHashCode();
                if (this.Prefix != null)
                {
                    hashCode = (hashCode * 59) + this.Prefix.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reverse.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitIndex.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WaitIndex (int) maximum
            if (this.WaitIndex > (int)384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitIndex, must be a value less than or equal to 384.", new [] { "WaitIndex" });
            }

            // WaitIndex (int) minimum
            if (this.WaitIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitIndex, must be a value greater than or equal to 0.", new [] { "WaitIndex" });
            }

            yield break;
        }
    }

}
