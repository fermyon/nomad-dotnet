/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// CSISnapshot
    /// </summary>
    [DataContract(Name = "CSISnapshot")]
    public partial class CSISnapshot : IEquatable<CSISnapshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CSISnapshot" /> class.
        /// </summary>
        /// <param name="createTime">createTime.</param>
        /// <param name="externalSourceVolumeID">externalSourceVolumeID.</param>
        /// <param name="iD">iD.</param>
        /// <param name="isReady">isReady.</param>
        /// <param name="name">name.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="pluginID">pluginID.</param>
        /// <param name="secrets">secrets.</param>
        /// <param name="sizeBytes">sizeBytes.</param>
        /// <param name="sourceVolumeID">sourceVolumeID.</param>
        public CSISnapshot(long createTime = default(long), string externalSourceVolumeID = default(string), string iD = default(string), bool isReady = default(bool), string name = default(string), Dictionary<string, string> parameters = default(Dictionary<string, string>), string pluginID = default(string), Dictionary<string, string> secrets = default(Dictionary<string, string>), long sizeBytes = default(long), string sourceVolumeID = default(string))
        {
            this.CreateTime = createTime;
            this.ExternalSourceVolumeID = externalSourceVolumeID;
            this.ID = iD;
            this.IsReady = isReady;
            this.Name = name;
            this.Parameters = parameters;
            this.PluginID = pluginID;
            this.Secrets = secrets;
            this.SizeBytes = sizeBytes;
            this.SourceVolumeID = sourceVolumeID;
        }

        /// <summary>
        /// Gets or Sets CreateTime
        /// </summary>
        [DataMember(Name = "CreateTime", EmitDefaultValue = false)]
        public long CreateTime { get; set; }

        /// <summary>
        /// Gets or Sets ExternalSourceVolumeID
        /// </summary>
        [DataMember(Name = "ExternalSourceVolumeID", EmitDefaultValue = false)]
        public string ExternalSourceVolumeID { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets IsReady
        /// </summary>
        [DataMember(Name = "IsReady", EmitDefaultValue = true)]
        public bool IsReady { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "Parameters", EmitDefaultValue = false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets PluginID
        /// </summary>
        [DataMember(Name = "PluginID", EmitDefaultValue = false)]
        public string PluginID { get; set; }

        /// <summary>
        /// Gets or Sets Secrets
        /// </summary>
        [DataMember(Name = "Secrets", EmitDefaultValue = false)]
        public Dictionary<string, string> Secrets { get; set; }

        /// <summary>
        /// Gets or Sets SizeBytes
        /// </summary>
        [DataMember(Name = "SizeBytes", EmitDefaultValue = false)]
        public long SizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets SourceVolumeID
        /// </summary>
        [DataMember(Name = "SourceVolumeID", EmitDefaultValue = false)]
        public string SourceVolumeID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CSISnapshot {\n");
            sb.Append("  CreateTime: ").Append(CreateTime).Append("\n");
            sb.Append("  ExternalSourceVolumeID: ").Append(ExternalSourceVolumeID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IsReady: ").Append(IsReady).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  PluginID: ").Append(PluginID).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  SourceVolumeID: ").Append(SourceVolumeID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CSISnapshot);
        }

        /// <summary>
        /// Returns true if CSISnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of CSISnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CSISnapshot input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateTime == input.CreateTime ||
                    this.CreateTime.Equals(input.CreateTime)
                ) && 
                (
                    this.ExternalSourceVolumeID == input.ExternalSourceVolumeID ||
                    (this.ExternalSourceVolumeID != null &&
                    this.ExternalSourceVolumeID.Equals(input.ExternalSourceVolumeID))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.IsReady == input.IsReady ||
                    this.IsReady.Equals(input.IsReady)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    input.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.PluginID == input.PluginID ||
                    (this.PluginID != null &&
                    this.PluginID.Equals(input.PluginID))
                ) && 
                (
                    this.Secrets == input.Secrets ||
                    this.Secrets != null &&
                    input.Secrets != null &&
                    this.Secrets.SequenceEqual(input.Secrets)
                ) && 
                (
                    this.SizeBytes == input.SizeBytes ||
                    this.SizeBytes.Equals(input.SizeBytes)
                ) && 
                (
                    this.SourceVolumeID == input.SourceVolumeID ||
                    (this.SourceVolumeID != null &&
                    this.SourceVolumeID.Equals(input.SourceVolumeID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateTime.GetHashCode();
                if (this.ExternalSourceVolumeID != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalSourceVolumeID.GetHashCode();
                }
                if (this.ID != null)
                {
                    hashCode = (hashCode * 59) + this.ID.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsReady.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Parameters != null)
                {
                    hashCode = (hashCode * 59) + this.Parameters.GetHashCode();
                }
                if (this.PluginID != null)
                {
                    hashCode = (hashCode * 59) + this.PluginID.GetHashCode();
                }
                if (this.Secrets != null)
                {
                    hashCode = (hashCode * 59) + this.Secrets.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SizeBytes.GetHashCode();
                if (this.SourceVolumeID != null)
                {
                    hashCode = (hashCode * 59) + this.SourceVolumeID.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
