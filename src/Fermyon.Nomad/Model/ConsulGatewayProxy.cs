/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ConsulGatewayProxy
    /// </summary>
    [DataContract(Name = "ConsulGatewayProxy")]
    public partial class ConsulGatewayProxy : IEquatable<ConsulGatewayProxy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsulGatewayProxy" /> class.
        /// </summary>
        /// <param name="config">config.</param>
        /// <param name="connectTimeout">connectTimeout.</param>
        /// <param name="envoyDNSDiscoveryType">envoyDNSDiscoveryType.</param>
        /// <param name="envoyGatewayBindAddresses">envoyGatewayBindAddresses.</param>
        /// <param name="envoyGatewayBindTaggedAddresses">envoyGatewayBindTaggedAddresses.</param>
        /// <param name="envoyGatewayNoDefaultBind">envoyGatewayNoDefaultBind.</param>
        public ConsulGatewayProxy(Dictionary<string, Object> config = default(Dictionary<string, Object>), long connectTimeout = default(long), string envoyDNSDiscoveryType = default(string), Dictionary<string, ConsulGatewayBindAddress> envoyGatewayBindAddresses = default(Dictionary<string, ConsulGatewayBindAddress>), bool envoyGatewayBindTaggedAddresses = default(bool), bool envoyGatewayNoDefaultBind = default(bool))
        {
            this.Config = config;
            this.ConnectTimeout = connectTimeout;
            this.EnvoyDNSDiscoveryType = envoyDNSDiscoveryType;
            this.EnvoyGatewayBindAddresses = envoyGatewayBindAddresses;
            this.EnvoyGatewayBindTaggedAddresses = envoyGatewayBindTaggedAddresses;
            this.EnvoyGatewayNoDefaultBind = envoyGatewayNoDefaultBind;
        }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "Config", EmitDefaultValue = false)]
        public Dictionary<string, Object> Config { get; set; }

        /// <summary>
        /// Gets or Sets ConnectTimeout
        /// </summary>
        [DataMember(Name = "ConnectTimeout", EmitDefaultValue = false)]
        public long ConnectTimeout { get; set; }

        /// <summary>
        /// Gets or Sets EnvoyDNSDiscoveryType
        /// </summary>
        [DataMember(Name = "EnvoyDNSDiscoveryType", EmitDefaultValue = false)]
        public string EnvoyDNSDiscoveryType { get; set; }

        /// <summary>
        /// Gets or Sets EnvoyGatewayBindAddresses
        /// </summary>
        [DataMember(Name = "EnvoyGatewayBindAddresses", EmitDefaultValue = false)]
        public Dictionary<string, ConsulGatewayBindAddress> EnvoyGatewayBindAddresses { get; set; }

        /// <summary>
        /// Gets or Sets EnvoyGatewayBindTaggedAddresses
        /// </summary>
        [DataMember(Name = "EnvoyGatewayBindTaggedAddresses", EmitDefaultValue = true)]
        public bool EnvoyGatewayBindTaggedAddresses { get; set; }

        /// <summary>
        /// Gets or Sets EnvoyGatewayNoDefaultBind
        /// </summary>
        [DataMember(Name = "EnvoyGatewayNoDefaultBind", EmitDefaultValue = true)]
        public bool EnvoyGatewayNoDefaultBind { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsulGatewayProxy {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  ConnectTimeout: ").Append(ConnectTimeout).Append("\n");
            sb.Append("  EnvoyDNSDiscoveryType: ").Append(EnvoyDNSDiscoveryType).Append("\n");
            sb.Append("  EnvoyGatewayBindAddresses: ").Append(EnvoyGatewayBindAddresses).Append("\n");
            sb.Append("  EnvoyGatewayBindTaggedAddresses: ").Append(EnvoyGatewayBindTaggedAddresses).Append("\n");
            sb.Append("  EnvoyGatewayNoDefaultBind: ").Append(EnvoyGatewayNoDefaultBind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsulGatewayProxy);
        }

        /// <summary>
        /// Returns true if ConsulGatewayProxy instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsulGatewayProxy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsulGatewayProxy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Config == input.Config ||
                    this.Config != null &&
                    input.Config != null &&
                    this.Config.SequenceEqual(input.Config)
                ) && 
                (
                    this.ConnectTimeout == input.ConnectTimeout ||
                    this.ConnectTimeout.Equals(input.ConnectTimeout)
                ) && 
                (
                    this.EnvoyDNSDiscoveryType == input.EnvoyDNSDiscoveryType ||
                    (this.EnvoyDNSDiscoveryType != null &&
                    this.EnvoyDNSDiscoveryType.Equals(input.EnvoyDNSDiscoveryType))
                ) && 
                (
                    this.EnvoyGatewayBindAddresses == input.EnvoyGatewayBindAddresses ||
                    this.EnvoyGatewayBindAddresses != null &&
                    input.EnvoyGatewayBindAddresses != null &&
                    this.EnvoyGatewayBindAddresses.SequenceEqual(input.EnvoyGatewayBindAddresses)
                ) && 
                (
                    this.EnvoyGatewayBindTaggedAddresses == input.EnvoyGatewayBindTaggedAddresses ||
                    this.EnvoyGatewayBindTaggedAddresses.Equals(input.EnvoyGatewayBindTaggedAddresses)
                ) && 
                (
                    this.EnvoyGatewayNoDefaultBind == input.EnvoyGatewayNoDefaultBind ||
                    this.EnvoyGatewayNoDefaultBind.Equals(input.EnvoyGatewayNoDefaultBind)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectTimeout.GetHashCode();
                if (this.EnvoyDNSDiscoveryType != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoyDNSDiscoveryType.GetHashCode();
                }
                if (this.EnvoyGatewayBindAddresses != null)
                {
                    hashCode = (hashCode * 59) + this.EnvoyGatewayBindAddresses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnvoyGatewayBindTaggedAddresses.GetHashCode();
                hashCode = (hashCode * 59) + this.EnvoyGatewayNoDefaultBind.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
