/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// RestartPolicy
    /// </summary>
    [DataContract(Name = "RestartPolicy")]
    public partial class RestartPolicy : IEquatable<RestartPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestartPolicy" /> class.
        /// </summary>
        /// <param name="attempts">attempts.</param>
        /// <param name="delay">delay.</param>
        /// <param name="interval">interval.</param>
        /// <param name="mode">mode.</param>
        public RestartPolicy(int attempts = default(int), long delay = default(long), long interval = default(long), string mode = default(string))
        {
            this.Attempts = attempts;
            this.Delay = delay;
            this.Interval = interval;
            this.Mode = mode;
        }

        /// <summary>
        /// Gets or Sets Attempts
        /// </summary>
        [DataMember(Name = "Attempts", EmitDefaultValue = false)]
        public int Attempts { get; set; }

        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [DataMember(Name = "Delay", EmitDefaultValue = false)]
        public long Delay { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "Interval", EmitDefaultValue = false)]
        public long Interval { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "Mode", EmitDefaultValue = false)]
        public string Mode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestartPolicy {\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestartPolicy);
        }

        /// <summary>
        /// Returns true if RestartPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of RestartPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestartPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attempts == input.Attempts ||
                    this.Attempts.Equals(input.Attempts)
                ) && 
                (
                    this.Delay == input.Delay ||
                    this.Delay.Equals(input.Delay)
                ) && 
                (
                    this.Interval == input.Interval ||
                    this.Interval.Equals(input.Interval)
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Attempts.GetHashCode();
                hashCode = (hashCode * 59) + this.Delay.GetHashCode();
                hashCode = (hashCode * 59) + this.Interval.GetHashCode();
                if (this.Mode != null)
                {
                    hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
