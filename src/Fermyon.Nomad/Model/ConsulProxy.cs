/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ConsulProxy
    /// </summary>
    [DataContract(Name = "ConsulProxy")]
    public partial class ConsulProxy : IEquatable<ConsulProxy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsulProxy" /> class.
        /// </summary>
        /// <param name="config">config.</param>
        /// <param name="exposeConfig">exposeConfig.</param>
        /// <param name="localServiceAddress">localServiceAddress.</param>
        /// <param name="localServicePort">localServicePort.</param>
        /// <param name="upstreams">upstreams.</param>
        public ConsulProxy(Dictionary<string, Object> config = default(Dictionary<string, Object>), ConsulExposeConfig exposeConfig = default(ConsulExposeConfig), string localServiceAddress = default(string), int localServicePort = default(int), List<ConsulUpstream> upstreams = default(List<ConsulUpstream>))
        {
            this.Config = config;
            this.ExposeConfig = exposeConfig;
            this.LocalServiceAddress = localServiceAddress;
            this.LocalServicePort = localServicePort;
            this.Upstreams = upstreams;
        }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "Config", EmitDefaultValue = false)]
        public Dictionary<string, Object> Config { get; set; }

        /// <summary>
        /// Gets or Sets ExposeConfig
        /// </summary>
        [DataMember(Name = "ExposeConfig", EmitDefaultValue = false)]
        public ConsulExposeConfig ExposeConfig { get; set; }

        /// <summary>
        /// Gets or Sets LocalServiceAddress
        /// </summary>
        [DataMember(Name = "LocalServiceAddress", EmitDefaultValue = false)]
        public string LocalServiceAddress { get; set; }

        /// <summary>
        /// Gets or Sets LocalServicePort
        /// </summary>
        [DataMember(Name = "LocalServicePort", EmitDefaultValue = false)]
        public int LocalServicePort { get; set; }

        /// <summary>
        /// Gets or Sets Upstreams
        /// </summary>
        [DataMember(Name = "Upstreams", EmitDefaultValue = false)]
        public List<ConsulUpstream> Upstreams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConsulProxy {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  ExposeConfig: ").Append(ExposeConfig).Append("\n");
            sb.Append("  LocalServiceAddress: ").Append(LocalServiceAddress).Append("\n");
            sb.Append("  LocalServicePort: ").Append(LocalServicePort).Append("\n");
            sb.Append("  Upstreams: ").Append(Upstreams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConsulProxy);
        }

        /// <summary>
        /// Returns true if ConsulProxy instances are equal
        /// </summary>
        /// <param name="input">Instance of ConsulProxy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsulProxy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Config == input.Config ||
                    this.Config != null &&
                    input.Config != null &&
                    this.Config.SequenceEqual(input.Config)
                ) && 
                (
                    this.ExposeConfig == input.ExposeConfig ||
                    (this.ExposeConfig != null &&
                    this.ExposeConfig.Equals(input.ExposeConfig))
                ) && 
                (
                    this.LocalServiceAddress == input.LocalServiceAddress ||
                    (this.LocalServiceAddress != null &&
                    this.LocalServiceAddress.Equals(input.LocalServiceAddress))
                ) && 
                (
                    this.LocalServicePort == input.LocalServicePort ||
                    this.LocalServicePort.Equals(input.LocalServicePort)
                ) && 
                (
                    this.Upstreams == input.Upstreams ||
                    this.Upstreams != null &&
                    input.Upstreams != null &&
                    this.Upstreams.SequenceEqual(input.Upstreams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Config != null)
                {
                    hashCode = (hashCode * 59) + this.Config.GetHashCode();
                }
                if (this.ExposeConfig != null)
                {
                    hashCode = (hashCode * 59) + this.ExposeConfig.GetHashCode();
                }
                if (this.LocalServiceAddress != null)
                {
                    hashCode = (hashCode * 59) + this.LocalServiceAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LocalServicePort.GetHashCode();
                if (this.Upstreams != null)
                {
                    hashCode = (hashCode * 59) + this.Upstreams.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
