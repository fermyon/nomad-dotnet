/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fermyon.Nomad.Client.OpenAPIDateConverter;

namespace Fermyon.Nomad.Model
{
    /// <summary>
    /// ServiceCheck
    /// </summary>
    [DataContract(Name = "ServiceCheck")]
    public partial class ServiceCheck : IEquatable<ServiceCheck>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceCheck" /> class.
        /// </summary>
        /// <param name="addressMode">addressMode.</param>
        /// <param name="advertise">advertise.</param>
        /// <param name="args">args.</param>
        /// <param name="body">body.</param>
        /// <param name="checkRestart">checkRestart.</param>
        /// <param name="command">command.</param>
        /// <param name="expose">expose.</param>
        /// <param name="failuresBeforeCritical">failuresBeforeCritical.</param>
        /// <param name="gRPCService">gRPCService.</param>
        /// <param name="gRPCUseTLS">gRPCUseTLS.</param>
        /// <param name="header">header.</param>
        /// <param name="initialStatus">initialStatus.</param>
        /// <param name="interval">interval.</param>
        /// <param name="method">method.</param>
        /// <param name="name">name.</param>
        /// <param name="onUpdate">onUpdate.</param>
        /// <param name="path">path.</param>
        /// <param name="portLabel">portLabel.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="successBeforePassing">successBeforePassing.</param>
        /// <param name="tLSSkipVerify">tLSSkipVerify.</param>
        /// <param name="taskName">taskName.</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="type">type.</param>
        public ServiceCheck(string addressMode = default(string), string advertise = default(string), List<string> args = default(List<string>), string body = default(string), CheckRestart checkRestart = default(CheckRestart), string command = default(string), bool expose = default(bool), int failuresBeforeCritical = default(int), string gRPCService = default(string), bool gRPCUseTLS = default(bool), Dictionary<string, List<string>> header = default(Dictionary<string, List<string>>), string initialStatus = default(string), long interval = default(long), string method = default(string), string name = default(string), string onUpdate = default(string), string path = default(string), string portLabel = default(string), string protocol = default(string), int successBeforePassing = default(int), bool tLSSkipVerify = default(bool), string taskName = default(string), long timeout = default(long), string type = default(string))
        {
            this.AddressMode = addressMode;
            this.Advertise = advertise;
            this.Args = args;
            this.Body = body;
            this.CheckRestart = checkRestart;
            this.Command = command;
            this.Expose = expose;
            this.FailuresBeforeCritical = failuresBeforeCritical;
            this.GRPCService = gRPCService;
            this.GRPCUseTLS = gRPCUseTLS;
            this.Header = header;
            this.InitialStatus = initialStatus;
            this.Interval = interval;
            this.Method = method;
            this.Name = name;
            this.OnUpdate = onUpdate;
            this.Path = path;
            this.PortLabel = portLabel;
            this.Protocol = protocol;
            this.SuccessBeforePassing = successBeforePassing;
            this.TLSSkipVerify = tLSSkipVerify;
            this.TaskName = taskName;
            this.Timeout = timeout;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets AddressMode
        /// </summary>
        [DataMember(Name = "AddressMode", EmitDefaultValue = false)]
        public string AddressMode { get; set; }

        /// <summary>
        /// Gets or Sets Advertise
        /// </summary>
        [DataMember(Name = "Advertise", EmitDefaultValue = false)]
        public string Advertise { get; set; }

        /// <summary>
        /// Gets or Sets Args
        /// </summary>
        [DataMember(Name = "Args", EmitDefaultValue = false)]
        public List<string> Args { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "Body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CheckRestart
        /// </summary>
        [DataMember(Name = "CheckRestart", EmitDefaultValue = false)]
        public CheckRestart CheckRestart { get; set; }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [DataMember(Name = "Command", EmitDefaultValue = false)]
        public string Command { get; set; }

        /// <summary>
        /// Gets or Sets Expose
        /// </summary>
        [DataMember(Name = "Expose", EmitDefaultValue = true)]
        public bool Expose { get; set; }

        /// <summary>
        /// Gets or Sets FailuresBeforeCritical
        /// </summary>
        [DataMember(Name = "FailuresBeforeCritical", EmitDefaultValue = false)]
        public int FailuresBeforeCritical { get; set; }

        /// <summary>
        /// Gets or Sets GRPCService
        /// </summary>
        [DataMember(Name = "GRPCService", EmitDefaultValue = false)]
        public string GRPCService { get; set; }

        /// <summary>
        /// Gets or Sets GRPCUseTLS
        /// </summary>
        [DataMember(Name = "GRPCUseTLS", EmitDefaultValue = true)]
        public bool GRPCUseTLS { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "Header", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> Header { get; set; }

        /// <summary>
        /// Gets or Sets InitialStatus
        /// </summary>
        [DataMember(Name = "InitialStatus", EmitDefaultValue = false)]
        public string InitialStatus { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "Interval", EmitDefaultValue = false)]
        public long Interval { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "Method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OnUpdate
        /// </summary>
        [DataMember(Name = "OnUpdate", EmitDefaultValue = false)]
        public string OnUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "Path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets PortLabel
        /// </summary>
        [DataMember(Name = "PortLabel", EmitDefaultValue = false)]
        public string PortLabel { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "Protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets SuccessBeforePassing
        /// </summary>
        [DataMember(Name = "SuccessBeforePassing", EmitDefaultValue = false)]
        public int SuccessBeforePassing { get; set; }

        /// <summary>
        /// Gets or Sets TLSSkipVerify
        /// </summary>
        [DataMember(Name = "TLSSkipVerify", EmitDefaultValue = true)]
        public bool TLSSkipVerify { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>
        [DataMember(Name = "TaskName", EmitDefaultValue = false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "Timeout", EmitDefaultValue = false)]
        public long Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceCheck {\n");
            sb.Append("  AddressMode: ").Append(AddressMode).Append("\n");
            sb.Append("  Advertise: ").Append(Advertise).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CheckRestart: ").Append(CheckRestart).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Expose: ").Append(Expose).Append("\n");
            sb.Append("  FailuresBeforeCritical: ").Append(FailuresBeforeCritical).Append("\n");
            sb.Append("  GRPCService: ").Append(GRPCService).Append("\n");
            sb.Append("  GRPCUseTLS: ").Append(GRPCUseTLS).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  InitialStatus: ").Append(InitialStatus).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnUpdate: ").Append(OnUpdate).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PortLabel: ").Append(PortLabel).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  SuccessBeforePassing: ").Append(SuccessBeforePassing).Append("\n");
            sb.Append("  TLSSkipVerify: ").Append(TLSSkipVerify).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceCheck);
        }

        /// <summary>
        /// Returns true if ServiceCheck instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceCheck to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceCheck input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressMode == input.AddressMode ||
                    (this.AddressMode != null &&
                    this.AddressMode.Equals(input.AddressMode))
                ) && 
                (
                    this.Advertise == input.Advertise ||
                    (this.Advertise != null &&
                    this.Advertise.Equals(input.Advertise))
                ) && 
                (
                    this.Args == input.Args ||
                    this.Args != null &&
                    input.Args != null &&
                    this.Args.SequenceEqual(input.Args)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.CheckRestart == input.CheckRestart ||
                    (this.CheckRestart != null &&
                    this.CheckRestart.Equals(input.CheckRestart))
                ) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.Expose == input.Expose ||
                    this.Expose.Equals(input.Expose)
                ) && 
                (
                    this.FailuresBeforeCritical == input.FailuresBeforeCritical ||
                    this.FailuresBeforeCritical.Equals(input.FailuresBeforeCritical)
                ) && 
                (
                    this.GRPCService == input.GRPCService ||
                    (this.GRPCService != null &&
                    this.GRPCService.Equals(input.GRPCService))
                ) && 
                (
                    this.GRPCUseTLS == input.GRPCUseTLS ||
                    this.GRPCUseTLS.Equals(input.GRPCUseTLS)
                ) && 
                (
                    this.Header == input.Header ||
                    this.Header != null &&
                    input.Header != null &&
                    this.Header.SequenceEqual(input.Header)
                ) && 
                (
                    this.InitialStatus == input.InitialStatus ||
                    (this.InitialStatus != null &&
                    this.InitialStatus.Equals(input.InitialStatus))
                ) && 
                (
                    this.Interval == input.Interval ||
                    this.Interval.Equals(input.Interval)
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OnUpdate == input.OnUpdate ||
                    (this.OnUpdate != null &&
                    this.OnUpdate.Equals(input.OnUpdate))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.PortLabel == input.PortLabel ||
                    (this.PortLabel != null &&
                    this.PortLabel.Equals(input.PortLabel))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.SuccessBeforePassing == input.SuccessBeforePassing ||
                    this.SuccessBeforePassing.Equals(input.SuccessBeforePassing)
                ) && 
                (
                    this.TLSSkipVerify == input.TLSSkipVerify ||
                    this.TLSSkipVerify.Equals(input.TLSSkipVerify)
                ) && 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressMode != null)
                {
                    hashCode = (hashCode * 59) + this.AddressMode.GetHashCode();
                }
                if (this.Advertise != null)
                {
                    hashCode = (hashCode * 59) + this.Advertise.GetHashCode();
                }
                if (this.Args != null)
                {
                    hashCode = (hashCode * 59) + this.Args.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.CheckRestart != null)
                {
                    hashCode = (hashCode * 59) + this.CheckRestart.GetHashCode();
                }
                if (this.Command != null)
                {
                    hashCode = (hashCode * 59) + this.Command.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Expose.GetHashCode();
                hashCode = (hashCode * 59) + this.FailuresBeforeCritical.GetHashCode();
                if (this.GRPCService != null)
                {
                    hashCode = (hashCode * 59) + this.GRPCService.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GRPCUseTLS.GetHashCode();
                if (this.Header != null)
                {
                    hashCode = (hashCode * 59) + this.Header.GetHashCode();
                }
                if (this.InitialStatus != null)
                {
                    hashCode = (hashCode * 59) + this.InitialStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Interval.GetHashCode();
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OnUpdate != null)
                {
                    hashCode = (hashCode * 59) + this.OnUpdate.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.PortLabel != null)
                {
                    hashCode = (hashCode * 59) + this.PortLabel.GetHashCode();
                }
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SuccessBeforePassing.GetHashCode();
                hashCode = (hashCode * 59) + this.TLSSkipVerify.GetHashCode();
                if (this.TaskName != null)
                {
                    hashCode = (hashCode * 59) + this.TaskName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
