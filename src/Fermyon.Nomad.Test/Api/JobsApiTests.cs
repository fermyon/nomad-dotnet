/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Fermyon.Nomad.Client;
using Fermyon.Nomad.Api;
// uncomment below to import models
//using Fermyon.Nomad.Model;

namespace Fermyon.Nomad.Test.Api
{
    /// <summary>
    ///  Class for testing JobsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class JobsApiTests : IDisposable
    {
        private JobsApi instance;

        public JobsApiTests()
        {
            instance = new JobsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of JobsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' JobsApi
            //Assert.IsType<JobsApi>(instance);
        }

        /// <summary>
        /// Test DeleteJob
        /// </summary>
        [Fact]
        public void DeleteJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //bool? purge = null;
            //bool? global = null;
            //var response = instance.DeleteJob(jobName, region, varNamespace, xNomadToken, idempotencyToken, purge, global);
            //Assert.IsType<JobDeregisterResponse>(response);
        }

        /// <summary>
        /// Test GetJob
        /// </summary>
        [Fact]
        public void GetJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetJob(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<Job>(response);
        }

        /// <summary>
        /// Test GetJobAllocations
        /// </summary>
        [Fact]
        public void GetJobAllocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //bool? all = null;
            //var response = instance.GetJobAllocations(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all);
            //Assert.IsType<List<AllocationListStub>>(response);
        }

        /// <summary>
        /// Test GetJobDeployment
        /// </summary>
        [Fact]
        public void GetJobDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetJobDeployment(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<Deployment>(response);
        }

        /// <summary>
        /// Test GetJobDeployments
        /// </summary>
        [Fact]
        public void GetJobDeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //int? all = null;
            //var response = instance.GetJobDeployments(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all);
            //Assert.IsType<List<Deployment>>(response);
        }

        /// <summary>
        /// Test GetJobEvaluations
        /// </summary>
        [Fact]
        public void GetJobEvaluationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetJobEvaluations(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<List<Evaluation>>(response);
        }

        /// <summary>
        /// Test GetJobScaleStatus
        /// </summary>
        [Fact]
        public void GetJobScaleStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetJobScaleStatus(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<JobScaleStatusResponse>(response);
        }

        /// <summary>
        /// Test GetJobSummary
        /// </summary>
        [Fact]
        public void GetJobSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetJobSummary(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<JobSummary>(response);
        }

        /// <summary>
        /// Test GetJobVersions
        /// </summary>
        [Fact]
        public void GetJobVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //bool? diffs = null;
            //var response = instance.GetJobVersions(jobName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs);
            //Assert.IsType<JobVersionsResponse>(response);
        }

        /// <summary>
        /// Test GetJobs
        /// </summary>
        [Fact]
        public void GetJobsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetJobs(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<List<JobListStub>>(response);
        }

        /// <summary>
        /// Test PostJob
        /// </summary>
        [Fact]
        public void PostJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //JobRegisterRequest jobRegisterRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJob(jobName, jobRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobRegisterResponse>(response);
        }

        /// <summary>
        /// Test PostJobDispatch
        /// </summary>
        [Fact]
        public void PostJobDispatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //JobDispatchRequest jobDispatchRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobDispatch(jobName, jobDispatchRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobDispatchResponse>(response);
        }

        /// <summary>
        /// Test PostJobEvaluate
        /// </summary>
        [Fact]
        public void PostJobEvaluateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //JobEvaluateRequest jobEvaluateRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobEvaluate(jobName, jobEvaluateRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobRegisterResponse>(response);
        }

        /// <summary>
        /// Test PostJobParse
        /// </summary>
        [Fact]
        public void PostJobParseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobsParseRequest jobsParseRequest = null;
            //var response = instance.PostJobParse(jobsParseRequest);
            //Assert.IsType<Job>(response);
        }

        /// <summary>
        /// Test PostJobPeriodicForce
        /// </summary>
        [Fact]
        public void PostJobPeriodicForceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobPeriodicForce(jobName, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<PeriodicForceResponse>(response);
        }

        /// <summary>
        /// Test PostJobPlan
        /// </summary>
        [Fact]
        public void PostJobPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //JobPlanRequest jobPlanRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobPlan(jobName, jobPlanRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobPlanResponse>(response);
        }

        /// <summary>
        /// Test PostJobRevert
        /// </summary>
        [Fact]
        public void PostJobRevertTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //JobRevertRequest jobRevertRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobRevert(jobName, jobRevertRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobRegisterResponse>(response);
        }

        /// <summary>
        /// Test PostJobScalingRequest
        /// </summary>
        [Fact]
        public void PostJobScalingRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //ScalingRequest scalingRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobScalingRequest(jobName, scalingRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobRegisterResponse>(response);
        }

        /// <summary>
        /// Test PostJobStability
        /// </summary>
        [Fact]
        public void PostJobStabilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string jobName = null;
            //JobStabilityRequest jobStabilityRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobStability(jobName, jobStabilityRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobStabilityResponse>(response);
        }

        /// <summary>
        /// Test PostJobValidateRequest
        /// </summary>
        [Fact]
        public void PostJobValidateRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobValidateRequest jobValidateRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostJobValidateRequest(jobValidateRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobValidateResponse>(response);
        }

        /// <summary>
        /// Test RegisterJob
        /// </summary>
        [Fact]
        public void RegisterJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //JobRegisterRequest jobRegisterRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.RegisterJob(jobRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<JobRegisterResponse>(response);
        }
    }
}
