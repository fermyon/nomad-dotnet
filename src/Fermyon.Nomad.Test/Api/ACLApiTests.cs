/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Fermyon.Nomad.Client;
using Fermyon.Nomad.Api;
// uncomment below to import models
//using Fermyon.Nomad.Model;

namespace Fermyon.Nomad.Test.Api
{
    /// <summary>
    ///  Class for testing ACLApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ACLApiTests : IDisposable
    {
        private ACLApi instance;

        public ACLApiTests()
        {
            instance = new ACLApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ACLApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ACLApi
            //Assert.IsType<ACLApi>(instance);
        }

        /// <summary>
        /// Test DeleteACLPolicy
        /// </summary>
        [Fact]
        public void DeleteACLPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyName = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //instance.DeleteACLPolicy(policyName, region, varNamespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        /// Test DeleteACLToken
        /// </summary>
        [Fact]
        public void DeleteACLTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenAccessor = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //instance.DeleteACLToken(tokenAccessor, region, varNamespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        /// Test GetACLPolicies
        /// </summary>
        [Fact]
        public void GetACLPoliciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetACLPolicies(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<List<ACLPolicyListStub>>(response);
        }

        /// <summary>
        /// Test GetACLPolicy
        /// </summary>
        [Fact]
        public void GetACLPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyName = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetACLPolicy(policyName, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<ACLPolicy>(response);
        }

        /// <summary>
        /// Test GetACLToken
        /// </summary>
        [Fact]
        public void GetACLTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenAccessor = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetACLToken(tokenAccessor, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<ACLToken>(response);
        }

        /// <summary>
        /// Test GetACLTokenSelf
        /// </summary>
        [Fact]
        public void GetACLTokenSelfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetACLTokenSelf(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<ACLToken>(response);
        }

        /// <summary>
        /// Test GetACLTokens
        /// </summary>
        [Fact]
        public void GetACLTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetACLTokens(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<List<ACLTokenListStub>>(response);
        }

        /// <summary>
        /// Test PostACLBootstrap
        /// </summary>
        [Fact]
        public void PostACLBootstrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostACLBootstrap(region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<ACLToken>(response);
        }

        /// <summary>
        /// Test PostACLPolicy
        /// </summary>
        [Fact]
        public void PostACLPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string policyName = null;
            //ACLPolicy aCLPolicy = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //instance.PostACLPolicy(policyName, aCLPolicy, region, varNamespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        /// Test PostACLToken
        /// </summary>
        [Fact]
        public void PostACLTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenAccessor = null;
            //ACLToken aCLToken = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostACLToken(tokenAccessor, aCLToken, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<ACLToken>(response);
        }

        /// <summary>
        /// Test PostACLTokenOnetime
        /// </summary>
        [Fact]
        public void PostACLTokenOnetimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostACLTokenOnetime(region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<OneTimeToken>(response);
        }

        /// <summary>
        /// Test PostACLTokenOnetimeExchange
        /// </summary>
        [Fact]
        public void PostACLTokenOnetimeExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OneTimeTokenExchangeRequest oneTimeTokenExchangeRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostACLTokenOnetimeExchange(oneTimeTokenExchangeRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<ACLToken>(response);
        }
    }
}
