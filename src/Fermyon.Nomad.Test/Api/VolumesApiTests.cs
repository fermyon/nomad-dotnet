/*
 * Nomad
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 * Contact: support@hashicorp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Fermyon.Nomad.Client;
using Fermyon.Nomad.Api;
// uncomment below to import models
//using Fermyon.Nomad.Model;

namespace Fermyon.Nomad.Test.Api
{
    /// <summary>
    ///  Class for testing VolumesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VolumesApiTests : IDisposable
    {
        private VolumesApi instance;

        public VolumesApiTests()
        {
            instance = new VolumesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VolumesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VolumesApi
            //Assert.IsType<VolumesApi>(instance);
        }

        /// <summary>
        /// Test CreateVolume
        /// </summary>
        [Fact]
        public void CreateVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string volumeId = null;
            //string action = null;
            //CSIVolumeCreateRequest cSIVolumeCreateRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //instance.CreateVolume(volumeId, action, cSIVolumeCreateRequest, region, varNamespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        /// Test DeleteSnapshot
        /// </summary>
        [Fact]
        public void DeleteSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //string? pluginId = null;
            //string? snapshotId = null;
            //instance.DeleteSnapshot(region, varNamespace, xNomadToken, idempotencyToken, pluginId, snapshotId);
        }

        /// <summary>
        /// Test DeleteVolumeRegistration
        /// </summary>
        [Fact]
        public void DeleteVolumeRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string volumeId = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //string? force = null;
            //instance.DeleteVolumeRegistration(volumeId, region, varNamespace, xNomadToken, idempotencyToken, force);
        }

        /// <summary>
        /// Test DetachOrDeleteVolume
        /// </summary>
        [Fact]
        public void DetachOrDeleteVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string volumeId = null;
            //string action = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //string? node = null;
            //instance.DetachOrDeleteVolume(volumeId, action, region, varNamespace, xNomadToken, idempotencyToken, node);
        }

        /// <summary>
        /// Test GetExternalVolumes
        /// </summary>
        [Fact]
        public void GetExternalVolumesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //string? pluginId = null;
            //var response = instance.GetExternalVolumes(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId);
            //Assert.IsType<CSIVolumeListExternalResponse>(response);
        }

        /// <summary>
        /// Test GetSnapshots
        /// </summary>
        [Fact]
        public void GetSnapshotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //string? pluginId = null;
            //var response = instance.GetSnapshots(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId);
            //Assert.IsType<CSISnapshotListResponse>(response);
        }

        /// <summary>
        /// Test GetVolume
        /// </summary>
        [Fact]
        public void GetVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string volumeId = null;
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //var response = instance.GetVolume(volumeId, region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken);
            //Assert.IsType<CSIVolume>(response);
        }

        /// <summary>
        /// Test GetVolumes
        /// </summary>
        [Fact]
        public void GetVolumesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? region = null;
            //string? varNamespace = null;
            //int? index = null;
            //string? wait = null;
            //string? stale = null;
            //string? prefix = null;
            //string? xNomadToken = null;
            //int? perPage = null;
            //string? nextToken = null;
            //string? nodeId = null;
            //string? pluginId = null;
            //string? type = null;
            //var response = instance.GetVolumes(region, varNamespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, nodeId, pluginId, type);
            //Assert.IsType<List<CSIVolumeListStub>>(response);
        }

        /// <summary>
        /// Test PostSnapshot
        /// </summary>
        [Fact]
        public void PostSnapshotTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CSISnapshotCreateRequest cSISnapshotCreateRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //var response = instance.PostSnapshot(cSISnapshotCreateRequest, region, varNamespace, xNomadToken, idempotencyToken);
            //Assert.IsType<CSISnapshotCreateResponse>(response);
        }

        /// <summary>
        /// Test PostVolume
        /// </summary>
        [Fact]
        public void PostVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CSIVolumeRegisterRequest cSIVolumeRegisterRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //instance.PostVolume(cSIVolumeRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken);
        }

        /// <summary>
        /// Test PostVolumeRegistration
        /// </summary>
        [Fact]
        public void PostVolumeRegistrationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string volumeId = null;
            //CSIVolumeRegisterRequest cSIVolumeRegisterRequest = null;
            //string? region = null;
            //string? varNamespace = null;
            //string? xNomadToken = null;
            //string? idempotencyToken = null;
            //instance.PostVolumeRegistration(volumeId, cSIVolumeRegisterRequest, region, varNamespace, xNomadToken, idempotencyToken);
        }
    }
}
